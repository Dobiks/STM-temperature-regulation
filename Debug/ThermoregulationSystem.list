
ThermoregulationSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008988  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d78  08008d78  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d80  08008d80  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08008d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000026c  08008ff4  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08008ff4  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b10d  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aec  00000000  00000000  0003b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  0003ee98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029adb  00000000  00000000  000417a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000153aa  00000000  00000000  0006b27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f57b5  00000000  00000000  00080625  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c8  00000000  00000000  00175e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000026c 	.word	0x2000026c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b40 	.word	0x08008b40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000270 	.word	0x20000270
 800020c:	08008b40 	.word	0x08008b40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4603      	mov	r3, r0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa5e 	bl	8001280 <null_ptr_check>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d11c      	bne.n	8000e0a <bmp280_get_regs+0x5e>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d019      	beq.n	8000e0a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de4:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685c      	ldr	r4, [r3, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7858      	ldrb	r0, [r3, #1]
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	7bf9      	ldrb	r1, [r7, #15]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	47a0      	blx	r4
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000e04:	23fc      	movs	r3, #252	; 0xfc
 8000e06:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000e08:	e001      	b.n	8000e0e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b089      	sub	sp, #36	; 0x24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4613      	mov	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d901      	bls.n	8000e34 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000e34:	6838      	ldr	r0, [r7, #0]
 8000e36:	f000 fa23 	bl	8001280 <null_ptr_check>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000e3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d14d      	bne.n	8000ee2 <bmp280_set_regs+0xc8>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d04a      	beq.n	8000ee2 <bmp280_set_regs+0xc8>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d047      	beq.n	8000ee2 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d041      	beq.n	8000edc <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	789b      	ldrb	r3, [r3, #2]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d114      	bne.n	8000e90 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	76fb      	strb	r3, [r7, #27]
 8000e6a:	e00d      	b.n	8000e88 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000e6c:	7efb      	ldrb	r3, [r7, #27]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	7efb      	ldrb	r3, [r7, #27]
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	440b      	add	r3, r1
 8000e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e82:	7efb      	ldrb	r3, [r7, #27]
 8000e84:	3301      	adds	r3, #1
 8000e86:	76fb      	strb	r3, [r7, #27]
 8000e88:	7efa      	ldrb	r2, [r7, #27]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d3ed      	bcc.n	8000e6c <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d90d      	bls.n	8000eb2 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f107 0110 	add.w	r1, r7, #16
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 fa0e 	bl	80012c0 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	83bb      	strh	r3, [r7, #28]
 8000eb0:	e001      	b.n	8000eb6 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689c      	ldr	r4, [r3, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	7858      	ldrb	r0, [r3, #1]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	7819      	ldrb	r1, [r3, #0]
 8000ec2:	8bbb      	ldrh	r3, [r7, #28]
 8000ec4:	f107 0210 	add.w	r2, r7, #16
 8000ec8:	47a0      	blx	r4
 8000eca:	4603      	mov	r3, r0
 8000ecc:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000ece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000ed6:	23fc      	movs	r3, #252	; 0xfc
 8000ed8:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000eda:	e005      	b.n	8000ee8 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000edc:	23fd      	movs	r3, #253	; 0xfd
 8000ede:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000ee0:	e002      	b.n	8000ee8 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	77fb      	strb	r3, [r7, #31]
 8000ee6:	e000      	b.n	8000eea <bmp280_set_regs+0xd0>
        if (len != 0)
 8000ee8:	bf00      	nop
    }

    return rslt;
 8000eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}

08000ef6 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000f02:	23b6      	movs	r3, #182	; 0xb6
 8000f04:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f9ba 	bl	8001280 <null_ptr_check>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f18:	f107 010d 	add.w	r1, r7, #13
 8000f1c:	f107 000e 	add.w	r0, r7, #14
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f7ff ff79 	bl	8000e1a <bmp280_set_regs>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2002      	movs	r0, #2
 8000f32:	4798      	blx	r3
    }

    return rslt;
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f997 	bl	8001280 <null_ptr_check>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d150      	bne.n	8001000 <bmp280_init+0xc0>
    {
        while (try_count)
 8000f5e:	e02d      	b.n	8000fbc <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	20d0      	movs	r0, #208	; 0xd0
 8000f68:	f7ff ff20 	bl	8000dac <bmp280_get_regs>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11a      	bne.n	8000fae <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000f7c:	2b56      	cmp	r3, #86	; 0x56
 8000f7e:	d007      	beq.n	8000f90 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b57      	cmp	r3, #87	; 0x57
 8000f86:	d003      	beq.n	8000f90 <bmp280_init+0x50>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b58      	cmp	r3, #88	; 0x58
 8000f8e:	d10e      	bne.n	8000fae <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffb0 	bl	8000ef6 <bmp280_soft_reset>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d110      	bne.n	8000fc4 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f9b7 	bl	8001316 <get_calib_param>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000fac:	e00a      	b.n	8000fc4 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	4798      	blx	r3
            --try_count;
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ce      	bne.n	8000f60 <bmp280_init+0x20>
 8000fc2:	e000      	b.n	8000fc6 <bmp280_init+0x86>
                break;
 8000fc4:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000fcc:	23fe      	movs	r3, #254	; 0xfe
 8000fce:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8000fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d113      	bne.n	8001000 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001016:	2300      	movs	r3, #0
 8001018:	733b      	strb	r3, [r7, #12]
 800101a:	2300      	movs	r3, #0
 800101c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f000 f92e 	bl	8001280 <null_ptr_check>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d137      	bne.n	80010a0 <bmp280_get_config+0x94>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d034      	beq.n	80010a0 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001036:	f107 010c 	add.w	r1, r7, #12
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2202      	movs	r2, #2
 800103e:	20f4      	movs	r0, #244	; 0xf4
 8001040:	f7ff feb4 	bl	8000dac <bmp280_get_regs>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	109b      	asrs	r3, r3, #2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	095b      	lsrs	r3, r3, #5
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	109b      	asrs	r3, r3, #2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	332c      	adds	r3, #44	; 0x2c
 8001096:	6810      	ldr	r0, [r2, #0]
 8001098:	6018      	str	r0, [r3, #0]
 800109a:	7912      	ldrb	r2, [r2, #4]
 800109c:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 800109e:	e001      	b.n	80010a4 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	; 0xff
 80010a2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f9c6 	bl	8001450 <conf_sensor>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	6039      	str	r1, [r7, #0]
 80010d8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f000 f8d0 	bl	8001280 <null_ptr_check>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d109      	bne.n	8001100 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f9aa 	bl	8001450 <conf_sensor>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f000 f8ad 	bl	8001280 <null_ptr_check>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d133      	bne.n	800119a <bmp280_get_uncomp_data+0x8e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001138:	f107 0108 	add.w	r1, r7, #8
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2206      	movs	r2, #6
 8001140:	20f7      	movs	r0, #247	; 0xf7
 8001142:	f7ff fe33 	bl	8000dac <bmp280_get_regs>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d120      	bne.n	8001194 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4313      	orrs	r3, r2
 800115c:	7aba      	ldrb	r2, [r7, #10]
 800115e:	0912      	lsrs	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	031a      	lsls	r2, r3, #12
 800116c:	7b3b      	ldrb	r3, [r7, #12]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4313      	orrs	r3, r2
 8001172:	7b7a      	ldrb	r2, [r7, #13]
 8001174:	0912      	lsrs	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 fa1b 	bl	80015c4 <st_check_boundaries>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001192:	e004      	b.n	800119e <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8001194:	23f3      	movs	r3, #243	; 0xf3
 8001196:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001198:	e001      	b.n	800119e <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800119a:	23ff      	movs	r3, #255	; 0xff
 800119c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b088      	sub	sp, #32
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f862 	bl	8001280 <null_ptr_check>
 80011bc:	4603      	mov	r3, r0
 80011be:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80011c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d150      	bne.n	800126a <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da00      	bge.n	80011d0 <bmp280_get_comp_temp_32bit+0x26>
 80011ce:	3307      	adds	r3, #7
 80011d0:	10db      	asrs	r3, r3, #3
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	8a1b      	ldrh	r3, [r3, #16]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da01      	bge.n	80011ee <bmp280_get_comp_temp_32bit+0x44>
 80011ea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011ee:	12db      	asrs	r3, r3, #11
 80011f0:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da00      	bge.n	80011fa <bmp280_get_comp_temp_32bit+0x50>
 80011f8:	330f      	adds	r3, #15
 80011fa:	111b      	asrs	r3, r3, #4
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	8a1b      	ldrh	r3, [r3, #16]
 8001202:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da00      	bge.n	800120c <bmp280_get_comp_temp_32bit+0x62>
 800120a:	330f      	adds	r3, #15
 800120c:	111b      	asrs	r3, r3, #4
 800120e:	4619      	mov	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8a1b      	ldrh	r3, [r3, #16]
 8001214:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8001216:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 800121a:	2b00      	cmp	r3, #0
 800121c:	da01      	bge.n	8001222 <bmp280_get_comp_temp_32bit+0x78>
 800121e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001222:	131b      	asrs	r3, r3, #12
 8001224:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 800122c:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8001230:	2b00      	cmp	r3, #0
 8001232:	da03      	bge.n	800123c <bmp280_get_comp_temp_32bit+0x92>
 8001234:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001238:	441a      	add	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	139b      	asrs	r3, r3, #14
 800123e:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	441a      	add	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3380      	adds	r3, #128	; 0x80
 8001256:	2b00      	cmp	r3, #0
 8001258:	da00      	bge.n	800125c <bmp280_get_comp_temp_32bit+0xb2>
 800125a:	33ff      	adds	r3, #255	; 0xff
 800125c:	121b      	asrs	r3, r3, #8
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	77fb      	strb	r3, [r7, #31]
 8001268:	e004      	b.n	8001274 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8001270:	23f2      	movs	r3, #242	; 0xf2
 8001272:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001274:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <null_ptr_check+0x26>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <null_ptr_check+0x26>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <null_ptr_check+0x26>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80012a6:	23ff      	movs	r3, #255	; 0xff
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e001      	b.n	80012b0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	e016      	b.n	8001302 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	441a      	add	r2, r3
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	3b01      	subs	r3, #1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	440b      	add	r3, r1
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	440b      	add	r3, r1
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	3301      	adds	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
 8001302:	7dfa      	ldrb	r2, [r7, #23]
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3e4      	bcc.n	80012d4 <interleave_data+0x14>
    }
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b08a      	sub	sp, #40	; 0x28
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
 800132e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffa5 	bl	8001280 <null_ptr_check>
 8001336:	4603      	mov	r3, r0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800133c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001340:	2b00      	cmp	r3, #0
 8001342:	d17f      	bne.n	8001444 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001344:	f107 010c 	add.w	r1, r7, #12
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2218      	movs	r2, #24
 800134c:	2088      	movs	r0, #136	; 0x88
 800134e:	f7ff fd2d 	bl	8000dac <bmp280_get_regs>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800135c:	2b00      	cmp	r3, #0
 800135e:	d171      	bne.n	8001444 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001386:	7c7b      	ldrb	r3, [r7, #17]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	7c3b      	ldrb	r3, [r7, #16]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	7cbb      	ldrb	r3, [r7, #18]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7d3b      	ldrb	r3, [r7, #20]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 80013d0:	7e7b      	ldrb	r3, [r7, #25]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	7e3b      	ldrb	r3, [r7, #24]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 80013e2:	7efb      	ldrb	r3, [r7, #27]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7ebb      	ldrb	r3, [r7, #26]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 80013f4:	7f7b      	ldrb	r3, [r7, #29]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7f3b      	ldrb	r3, [r7, #28]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7fbb      	ldrb	r3, [r7, #30]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001418:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 800142e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8001444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001448:	4618      	mov	r0, r3
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800145e:	2300      	movs	r3, #0
 8001460:	753b      	strb	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001466:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <conf_sensor+0x170>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff07 	bl	8001280 <null_ptr_check>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8095 	bne.w	80015aa <conf_sensor+0x15a>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8091 	beq.w	80015aa <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001488:	f107 0114 	add.w	r1, r7, #20
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	20f4      	movs	r0, #244	; 0xf4
 8001492:	f7ff fc8b 	bl	8000dac <bmp280_get_regs>
 8001496:	4603      	mov	r3, r0
 8001498:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8086 	bne.w	80015b0 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fd26 	bl	8000ef6 <bmp280_soft_reset>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80014ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d17c      	bne.n	80015b0 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80014b6:	7d3b      	ldrb	r3, [r7, #20]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	b25a      	sxtb	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	f023 031c 	bic.w	r3, r3, #28
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	f003 031c 	and.w	r3, r3, #28
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80014f0:	7d7b      	ldrb	r3, [r7, #21]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	f023 031c 	bic.w	r3, r3, #28
 8001512:	b25a      	sxtb	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	78db      	ldrb	r3, [r3, #3]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b25b      	sxtb	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	b25b      	sxtb	r3, r3
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	b25a      	sxtb	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	b25b      	sxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b25b      	sxtb	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b25b      	sxtb	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001548:	f107 0114 	add.w	r1, r7, #20
 800154c:	f107 0010 	add.w	r0, r7, #16
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f7ff fc61 	bl	8000e1a <bmp280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 800155c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d125      	bne.n	80015b0 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	332c      	adds	r3, #44	; 0x2c
 800156a:	6810      	ldr	r0, [r2, #0]
 800156c:	6018      	str	r0, [r3, #0]
 800156e:	7912      	ldrb	r2, [r2, #4]
 8001570:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001578:	7d3b      	ldrb	r3, [r7, #20]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	b25a      	sxtb	r2, r3
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b25b      	sxtb	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001594:	f107 0114 	add.w	r1, r7, #20
 8001598:	f107 0010 	add.w	r0, r7, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f7ff fc3b 	bl	8000e1a <bmp280_set_regs>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80015a8:	e002      	b.n	80015b0 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80015aa:	23ff      	movs	r3, #255	; 0xff
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e000      	b.n	80015b2 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 80015b0:	bf00      	nop
    }

    return rslt;
 80015b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	08008b58 	.word	0x08008b58

080015c4 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dd03      	ble.n	80015e0 <st_check_boundaries+0x1c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <st_check_boundaries+0x6c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	dd09      	ble.n	80015f4 <st_check_boundaries+0x30>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd03      	ble.n	80015ee <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <st_check_boundaries+0x6c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	dd02      	ble.n	80015f4 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80015ee:	23f4      	movs	r3, #244	; 0xf4
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e015      	b.n	8001620 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd03      	ble.n	8001602 <st_check_boundaries+0x3e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <st_check_boundaries+0x6c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	dd02      	ble.n	8001608 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001602:	23f6      	movs	r3, #246	; 0xf6
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e00b      	b.n	8001620 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dd03      	ble.n	8001616 <st_check_boundaries+0x52>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <st_check_boundaries+0x6c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	dd02      	ble.n	800161c <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001616:	23f5      	movs	r3, #245	; 0xf5
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001620:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	000fffef 	.word	0x000fffef

08001634 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fc7f 	bl	8000f40 <bmp280_init>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fcdd 	bl	800100c <bmp280_get_config>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8001656:	2300      	movs	r3, #0
 8001658:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 800165a:	2301      	movs	r3, #1
 800165c:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 800165e:	2301      	movs	r3, #1
 8001660:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 8001662:	2303      	movs	r3, #3
 8001664:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd1f 	bl	80010b0 <bmp280_set_config>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	2003      	movs	r0, #3
 800167a:	f7ff fd28 	bl	80010ce <bmp280_set_power_mode>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	603a      	str	r2, [r7, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	460b      	mov	r3, r1
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	4613      	mov	r3, r2
 80016a4:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++) 
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80016ba:	e011      	b.n	80016e0 <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 80016bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	441a      	add	r2, r3
 80016c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016c8:	3301      	adds	r3, #1
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016d0:	440b      	add	r3, r1
 80016d2:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++) 
 80016d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80016e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	88ba      	ldrh	r2, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8e7      	bhi.n	80016bc <bmp280_spi_reg_write+0x2c>
  }
  
  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <bmp280_spi_reg_write+0xdc>)
 80016f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <bmp280_spi_reg_write+0xe0>)
 80016f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	f002 f854 	bl	80037ac <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	f107 010c 	add.w	r1, r7, #12
 800170e:	2305      	movs	r3, #5
 8001710:	4818      	ldr	r0, [pc, #96]	; (8001774 <bmp280_spi_reg_write+0xe4>)
 8001712:	f003 fb2d 	bl	8004d70 <HAL_SPI_Transmit>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 800171c:	2300      	movs	r3, #0
 800171e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001722:	e012      	b.n	800174a <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8001724:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001728:	4a10      	ldr	r2, [pc, #64]	; (800176c <bmp280_spi_reg_write+0xdc>)
 800172a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800172e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <bmp280_spi_reg_write+0xe0>)
 8001734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001738:	2201      	movs	r2, #1
 800173a:	4619      	mov	r1, r3
 800173c:	f002 f836 	bl	80037ac <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001740:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001744:	3301      	adds	r3, #1
 8001746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800174a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800174e:	2b01      	cmp	r3, #1
 8001750:	d9e8      	bls.n	8001724 <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 8001752:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
    
  return (int8_t)iError;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	b25b      	sxtb	r3, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000008 	.word	0x20000008
 8001774:	20000318 	.word	0x20000318

08001778 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	; 0x50
 800177c:	af02      	add	r7, sp, #8
 800177e:	603a      	str	r2, [r7, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	460b      	mov	r3, r1
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	4613      	mov	r3, r2
 800178c:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <bmp280_spi_reg_read+0x110>)
 80017ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4a2e      	ldr	r2, [pc, #184]	; (800188c <bmp280_spi_reg_read+0x114>)
 80017d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	f001 ffe7 	bl	80037ac <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b298      	uxth	r0, r3
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017ec:	2305      	movs	r3, #5
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4603      	mov	r3, r0
 80017f2:	4827      	ldr	r0, [pc, #156]	; (8001890 <bmp280_spi_reg_read+0x118>)
 80017f4:	f003 fc22 	bl	800503c <HAL_SPI_TransmitReceive>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001804:	e012      	b.n	800182c <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8001806:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <bmp280_spi_reg_read+0x110>)
 800180c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001810:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <bmp280_spi_reg_read+0x114>)
 8001816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181a:	2201      	movs	r2, #1
 800181c:	4619      	mov	r1, r3
 800181e:	f001 ffc5 	bl	80037ac <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001822:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800182c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001830:	2b01      	cmp	r3, #1
 8001832:	d9e8      	bls.n	8001806 <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800183a:	e011      	b.n	8001860 <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 800183c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	440b      	add	r3, r1
 800184a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800184e:	440a      	add	r2, r1
 8001850:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001854:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 8001856:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800185a:	3301      	adds	r3, #1
 800185c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001860:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001864:	b29b      	uxth	r3, r3
 8001866:	88ba      	ldrh	r2, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8e7      	bhi.n	800183c <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 800186c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  return (int8_t)iError;
 800187a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187c:	b25b      	sxtb	r3, r3
}
 800187e:	4618      	mov	r0, r3
 8001880:	3748      	adds	r7, #72	; 0x48
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000
 800188c:	20000008 	.word	0x20000008
 8001890:	20000318 	.word	0x20000318

08001894 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_CRC_Init+0x3c>)
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <MX_CRC_Init+0x40>)
 800189c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_CRC_Init+0x3c>)
 80018be:	f001 fcbf 	bl	8003240 <HAL_CRC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018c8:	f000 fe2c 	bl	8002524 <Error_Handler>
  }

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000298 	.word	0x20000298
 80018d4:	40023000 	.word	0x40023000

080018d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_CRC_MspInit+0x38>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10b      	bne.n	8001902 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023000 	.word	0x40023000
 8001914:	40023800 	.word	0x40023800

08001918 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] hbtn Encoder handler
 * @return None
 */
void ENC_Init(ENC_HandleTypeDef* henc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	213c      	movs	r1, #60	; 0x3c
 8001926:	4618      	mov	r0, r3
 8001928:	f004 f844 	bl	80059b4 <HAL_TIM_Encoder_Start>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] hbtn Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_HandleTypeDef* henc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
  henc->Counter = henc->Timer->Instance->CNT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	bf34      	ite	cc
 8001958:	2301      	movcc	r3, #1
 800195a:	2300      	movcs	r3, #0
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	bf8c      	ite	hi
 800196c:	2301      	movhi	r3, #1
 800196e:	2300      	movls	r3, #0
 8001970:	b2da      	uxtb	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	745a      	strb	r2, [r3, #17]
  return henc->Counter;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <ENC_SetCounter>:

void ENC_SetCounter(ENC_HandleTypeDef* henc, uint16_t new_counter)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	807b      	strh	r3, [r7, #2]
	henc->Timer->Instance->CNT = new_counter;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	887a      	ldrh	r2, [r7, #2]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	4bb3      	ldr	r3, [pc, #716]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4ab2      	ldr	r2, [pc, #712]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4bb0      	ldr	r3, [pc, #704]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4bad      	ldr	r3, [pc, #692]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4aac      	ldr	r2, [pc, #688]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4baa      	ldr	r3, [pc, #680]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	4ba7      	ldr	r3, [pc, #668]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4aa6      	ldr	r2, [pc, #664]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4ba4      	ldr	r3, [pc, #656]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4ba1      	ldr	r3, [pc, #644]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4aa0      	ldr	r2, [pc, #640]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b9b      	ldr	r3, [pc, #620]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a9a      	ldr	r2, [pc, #616]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	4b95      	ldr	r3, [pc, #596]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4e:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a8e      	ldr	r2, [pc, #568]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <MX_GPIO_Init+0x2e4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2118      	movs	r1, #24
 8001a6a:	4889      	ldr	r0, [pc, #548]	; (8001c90 <MX_GPIO_Init+0x2e8>)
 8001a6c:	f001 fe9e 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2149      	movs	r1, #73	; 0x49
 8001a74:	4887      	ldr	r0, [pc, #540]	; (8001c94 <MX_GPIO_Init+0x2ec>)
 8001a76:	f001 fe99 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	4886      	ldr	r0, [pc, #536]	; (8001c98 <MX_GPIO_Init+0x2f0>)
 8001a80:	f001 fe94 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001a84:	2200      	movs	r2, #0
 8001a86:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001a8a:	4884      	ldr	r0, [pc, #528]	; (8001c9c <MX_GPIO_Init+0x2f4>)
 8001a8c:	f001 fe8e 	bl	80037ac <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a96:	487e      	ldr	r0, [pc, #504]	; (8001c90 <MX_GPIO_Init+0x2e8>)
 8001a98:	f001 fe88 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	487f      	ldr	r0, [pc, #508]	; (8001ca0 <MX_GPIO_Init+0x2f8>)
 8001aa2:	f001 fe83 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	21f0      	movs	r1, #240	; 0xf0
 8001aaa:	487e      	ldr	r0, [pc, #504]	; (8001ca4 <MX_GPIO_Init+0x2fc>)
 8001aac:	f001 fe7e 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001ab0:	2318      	movs	r3, #24
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4872      	ldr	r0, [pc, #456]	; (8001c90 <MX_GPIO_Init+0x2e8>)
 8001ac8:	f001 fcc6 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad2:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <MX_GPIO_Init+0x300>)
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	486c      	ldr	r0, [pc, #432]	; (8001c94 <MX_GPIO_Init+0x2ec>)
 8001ae2:	f001 fcb9 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4865      	ldr	r0, [pc, #404]	; (8001c94 <MX_GPIO_Init+0x2ec>)
 8001afe:	f001 fcab 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b02:	2332      	movs	r3, #50	; 0x32
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b12:	230b      	movs	r3, #11
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	485d      	ldr	r0, [pc, #372]	; (8001c94 <MX_GPIO_Init+0x2ec>)
 8001b1e:	f001 fc9b 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001b22:	2306      	movs	r3, #6
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b32:	230b      	movs	r3, #11
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4856      	ldr	r0, [pc, #344]	; (8001c98 <MX_GPIO_Init+0x2f0>)
 8001b3e:	f001 fc8b 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	484f      	ldr	r0, [pc, #316]	; (8001c98 <MX_GPIO_Init+0x2f0>)
 8001b5a:	f001 fc7d 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <MX_GPIO_Init+0x304>)
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4849      	ldr	r0, [pc, #292]	; (8001c98 <MX_GPIO_Init+0x2f0>)
 8001b72:	f001 fc71 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <MX_GPIO_Init+0x300>)
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	4843      	ldr	r0, [pc, #268]	; (8001c98 <MX_GPIO_Init+0x2f0>)
 8001b8a:	f001 fc65 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001b8e:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001b92:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	483d      	ldr	r0, [pc, #244]	; (8001c9c <MX_GPIO_Init+0x2f4>)
 8001ba8:	f001 fc56 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8001bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4832      	ldr	r0, [pc, #200]	; (8001c90 <MX_GPIO_Init+0x2e8>)
 8001bc6:	f001 fc47 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bdc:	230b      	movs	r3, #11
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	482d      	ldr	r0, [pc, #180]	; (8001c9c <MX_GPIO_Init+0x2f4>)
 8001be8:	f001 fc36 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_GPIO_Init+0x300>)
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4826      	ldr	r0, [pc, #152]	; (8001c9c <MX_GPIO_Init+0x2f4>)
 8001c02:	f001 fc29 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_GPIO_Init+0x304>)
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4822      	ldr	r0, [pc, #136]	; (8001ca4 <MX_GPIO_Init+0x2fc>)
 8001c1c:	f001 fc1c 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <MX_GPIO_Init+0x2fc>)
 8001c36:	f001 fc0f 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <MX_GPIO_Init+0x2f8>)
 8001c52:	f001 fc01 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_GPIO_Init+0x2f8>)
 8001c6a:	f001 fbf5 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8001c6e:	2340      	movs	r3, #64	; 0x40
 8001c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <MX_GPIO_Init+0x2ec>)
 8001c86:	f001 fbe7 	bl	8003458 <HAL_GPIO_Init>
 8001c8a:	e011      	b.n	8001cb0 <MX_GPIO_Init+0x308>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	10210000 	.word	0x10210000

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <MX_GPIO_Init+0x3ac>)
 8001cce:	f001 fbc3 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_GPIO_Init+0x3ac>)
 8001ce8:	f001 fbb6 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001cec:	23f0      	movs	r3, #240	; 0xf0
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <MX_GPIO_Init+0x3b0>)
 8001d04:	f001 fba8 	bl	8003458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_GPIO_Init+0x3b4>)
 8001d26:	f001 fb97 	bl	8003458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2017      	movs	r0, #23
 8001d30:	f001 fa4f 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d34:	2017      	movs	r0, #23
 8001d36:	f001 fa68 	bl	800320a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2028      	movs	r0, #40	; 0x28
 8001d40:	f001 fa47 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d44:	2028      	movs	r0, #40	; 0x28
 8001d46:	f001 fa60 	bl	800320a <HAL_NVIC_EnableIRQ>

}
 8001d4a:	bf00      	nop
 8001d4c:	3730      	adds	r7, #48	; 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021800 	.word	0x40021800

08001d60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d66:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <MX_I2C1_Init+0x78>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <MX_I2C1_Init+0x7c>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9a:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001d9c:	f001 fd44 	bl	8003828 <HAL_I2C_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001da6:	f000 fbbd 	bl	8002524 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001daa:	2100      	movs	r1, #0
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001dae:	f001 fdcb 	bl	8003948 <HAL_I2CEx_ConfigAnalogFilter>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001db8:	f000 fbb4 	bl	8002524 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_I2C1_Init+0x74>)
 8001dc0:	f001 fe0d 	bl	80039de <HAL_I2CEx_ConfigDigitalFilter>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 fbab 	bl	8002524 <Error_Handler>
  }

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002bc 	.word	0x200002bc
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	20404768 	.word	0x20404768

08001de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_I2C_MspInit+0x7c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d128      	bne.n	8001e54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8001e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480b      	ldr	r0, [pc, #44]	; (8001e64 <HAL_I2C_MspInit+0x84>)
 8001e38:	f001 fb0e 	bl	8003458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_I2C_MspInit+0x80>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400

08001e68 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	899b      	ldrh	r3, [r3, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f001 fc94 	bl	80037ac <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7d9b      	ldrb	r3, [r3, #22]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d115      	bne.n	8001eb8 <lcd_write_command+0x50>
  {
	if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7f1b      	ldrb	r3, [r3, #28]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <lcd_write_command+0x3c>
	{
	  lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f842 	bl	8001f28 <lcd_write>
	}
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2204      	movs	r2, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f839 	bl	8001f28 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 8001eb6:	e005      	b.n	8001ec4 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f832 	bl	8001f28 <lcd_write>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	899b      	ldrh	r3, [r3, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f001 fc62 	bl	80037ac <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7d9b      	ldrb	r3, [r3, #22]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d111      	bne.n	8001f14 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f814 	bl	8001f28 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2204      	movs	r2, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f80b 	bl	8001f28 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001f12:	e005      	b.n	8001f20 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2208      	movs	r2, #8
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f804 	bl	8001f28 <lcd_write>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
 8001f34:	4613      	mov	r3, r2
 8001f36:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6918      	ldr	r0, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8a9b      	ldrh	r3, [r3, #20]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4619      	mov	r1, r3
 8001f44:	f001 fc32 	bl	80037ac <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e019      	b.n	8001f82 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	8819      	ldrh	r1, [r3, #0]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	fa42 f303 	asr.w	r3, r2, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	f001 fc18 	bl	80037ac <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	78bb      	ldrb	r3, [r7, #2]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3e1      	bcc.n	8001f4e <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6918      	ldr	r0, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8a9b      	ldrh	r3, [r3, #20]
 8001f92:	2200      	movs	r2, #0
 8001f94:	4619      	mov	r1, r3
 8001f96:	f001 fc09 	bl	80037ac <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 8001f9a:	2132      	movs	r1, #50	; 0x32
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f804 	bl	8001faa <lcd_delay_us>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fb96 	bl	80056f4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 8001fc8:	bf00      	nop
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f8      	bhi.n	8001fca <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fbb3 	bl	8005748 <HAL_TIM_Base_Stop>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 8001ff8:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ffd4 	bl	8001faa <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7d9b      	ldrb	r3, [r3, #22]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d120      	bne.n	800204c <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800200a:	2103      	movs	r1, #3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff2b 	bl	8001e68 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8002012:	f241 0167 	movw	r1, #4199	; 0x1067
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffc7 	bl	8001faa <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 800201c:	2103      	movs	r1, #3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff22 	bl	8001e68 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8002024:	21c8      	movs	r1, #200	; 0xc8
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffbf 	bl	8001faa <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 800202c:	2103      	movs	r1, #3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff1a 	bl	8001e68 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8002034:	2102      	movs	r1, #2
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff16 	bl	8001e68 <lcd_write_command>

    hlcd->IsInitialized = 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8002042:	2128      	movs	r1, #40	; 0x28
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff0f 	bl	8001e68 <lcd_write_command>
 800204a:	e01f      	b.n	800208c <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7d9b      	ldrb	r3, [r3, #22]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d11b      	bne.n	800208c <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8002054:	2130      	movs	r1, #48	; 0x30
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff06 	bl	8001e68 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 800205c:	f241 0167 	movw	r1, #4199	; 0x1067
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffa2 	bl	8001faa <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8002066:	2130      	movs	r1, #48	; 0x30
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fefd 	bl	8001e68 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 800206e:	21c8      	movs	r1, #200	; 0xc8
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff9a 	bl	8001faa <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8002076:	2130      	movs	r1, #48	; 0x30
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fef5 	bl	8001e68 <lcd_write_command>

	hlcd->IsInitialized = 1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8002084:	2138      	movs	r1, #56	; 0x38
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff feee 	bl	8001e68 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 800208c:	2101      	movs	r1, #1
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff feea 	bl	8001e68 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8002094:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff86 	bl	8001faa <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 800209e:	210c      	movs	r1, #12
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fee1 	bl	8001e68 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 80020a6:	2106      	movs	r1, #6
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fedd 	bl	8001e68 <lcd_write_command>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e00a      	b.n	80020dc <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fefb 	bl	8001ecc <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	7bfc      	ldrb	r4, [r7, #15]
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7fe f896 	bl	8000210 <strlen>
 80020e4:	4603      	mov	r3, r0
 80020e6:	429c      	cmp	r4, r3
 80020e8:	d3ed      	bcc.n	80020c6 <LCD_printStr+0x10>
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}
	...

080020f4 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
 8002100:	4613      	mov	r3, r2
 8002102:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <LCD_SetCursor+0x30>)
 8002108:	5cd2      	ldrb	r2, [r2, r3]
 800210a:	78bb      	ldrb	r3, [r7, #2]
 800210c:	4413      	add	r3, r2
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3b80      	subs	r3, #128	; 0x80
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fea6 	bl	8001e68 <lcd_write_command>
  #endif
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	08008ba0 	.word	0x08008ba0

08002128 <_LCD_Show>:
 * @param[in] act_temp  Null-terminated string
 * @param[in] dest_temp  Null-terminated string
 * @param[in] fan  Null-terminated string
 * @return None
 */
void _LCD_Show(LCD_HandleTypeDef* hlcd, char* act_temp, char* dest_temp,char* fan){
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	LCD_SetCursor(hlcd, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff ffda 	bl	80020f4 <LCD_SetCursor>
    LCD_printf(hlcd,"Tz: %4d", act_temp);
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	4925      	ldr	r1, [pc, #148]	; (80021d8 <_LCD_Show+0xb0>)
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f853 	bl	80021f0 <LCD_printf>

    if(fan_blink<=4){
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <_LCD_Show+0xb4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d80f      	bhi.n	8002172 <_LCD_Show+0x4a>
    	LCD_SetCursor(hlcd, 0, 14);
 8002152:	220e      	movs	r2, #14
 8002154:	2100      	movs	r1, #0
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff ffcc 	bl	80020f4 <LCD_SetCursor>
    	LCD_printf(hlcd,"*");
 800215c:	4920      	ldr	r1, [pc, #128]	; (80021e0 <_LCD_Show+0xb8>)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f846 	bl	80021f0 <LCD_printf>
    	fan_blink++;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <_LCD_Show+0xb4>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <_LCD_Show+0xb4>)
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e01a      	b.n	80021a8 <_LCD_Show+0x80>
    }
    else if(fan_blink>4 && fan_blink<=8){
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <_LCD_Show+0xb4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d913      	bls.n	80021a2 <_LCD_Show+0x7a>
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <_LCD_Show+0xb4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b08      	cmp	r3, #8
 8002180:	d80f      	bhi.n	80021a2 <_LCD_Show+0x7a>
    	LCD_SetCursor(hlcd, 0, 14);
 8002182:	220e      	movs	r2, #14
 8002184:	2100      	movs	r1, #0
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ffb4 	bl	80020f4 <LCD_SetCursor>
    	LCD_printf(hlcd," ");
 800218c:	4915      	ldr	r1, [pc, #84]	; (80021e4 <_LCD_Show+0xbc>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f82e 	bl	80021f0 <LCD_printf>
    	fan_blink++;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_LCD_Show+0xb4>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <_LCD_Show+0xb4>)
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e002      	b.n	80021a8 <_LCD_Show+0x80>
    }
    else{

    	fan_blink=0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <_LCD_Show+0xb4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
    }

    LCD_SetCursor(hlcd, 1, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2101      	movs	r1, #1
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff ffa1 	bl	80020f4 <LCD_SetCursor>
	LCD_printf(hlcd,"To: %4d", dest_temp );
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <_LCD_Show+0xc0>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f81a 	bl	80021f0 <LCD_printf>
	LCD_SetCursor(hlcd, 1, 14);
 80021bc:	220e      	movs	r2, #14
 80021be:	2101      	movs	r1, #1
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff97 	bl	80020f4 <LCD_SetCursor>
    LCD_printf(hlcd,"%d", fan);
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4908      	ldr	r1, [pc, #32]	; (80021ec <_LCD_Show+0xc4>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f810 	bl	80021f0 <LCD_printf>

}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	08008b64 	.word	0x08008b64
 80021dc:	20000288 	.word	0x20000288
 80021e0:	08008b6c 	.word	0x08008b6c
 80021e4:	08008b70 	.word	0x08008b70
 80021e8:	08008b74 	.word	0x08008b74
 80021ec:	08008b5c 	.word	0x08008b5c

080021f0 <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 80021f0:	b40e      	push	{r1, r2, r3}
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b095      	sub	sp, #84	; 0x54
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 80021fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021fe:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fbef 	bl	80079ec <vsiprintf>
  LCD_printStr(hlcd, buffer);
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff4e 	bl	80020b6 <LCD_printStr>
  va_end(args);
}
 800221a:	bf00      	nop
 800221c:	3754      	adds	r7, #84	; 0x54
 800221e:	46bd      	mov	sp, r7
 8002220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002224:	b003      	add	sp, #12
 8002226:	4770      	bx	lr

08002228 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_UART_RxCpltCallback+0x5c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11b      	bne.n	8002272 <HAL_UART_RxCpltCallback+0x4a>
	 {
		int i;
		sscanf(rx_buffer, "%d", &i);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	461a      	mov	r2, r3
 8002240:	4911      	ldr	r1, [pc, #68]	; (8002288 <HAL_UART_RxCpltCallback+0x60>)
 8002242:	4812      	ldr	r0, [pc, #72]	; (800228c <HAL_UART_RxCpltCallback+0x64>)
 8002244:	f005 fb80 	bl	8007948 <siscanf>
		new_value = i;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_UART_RxCpltCallback+0x68>)
 800224e:	801a      	strh	r2, [r3, #0]
		ENC_SetCounter(&henc1,4*(new_value - start_value)/10);
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_UART_RxCpltCallback+0x68>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_UART_RxCpltCallback+0x6c>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_UART_RxCpltCallback+0x70>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	1092      	asrs	r2, r2, #2
 8002266:	17db      	asrs	r3, r3, #31
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4619      	mov	r1, r3
 800226c:	480b      	ldr	r0, [pc, #44]	; (800229c <HAL_UART_RxCpltCallback+0x74>)
 800226e:	f7ff fb8a 	bl	8001986 <ENC_SetCounter>




	 }
	HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8002272:	2204      	movs	r2, #4
 8002274:	4905      	ldr	r1, [pc, #20]	; (800228c <HAL_UART_RxCpltCallback+0x64>)
 8002276:	480a      	ldr	r0, [pc, #40]	; (80022a0 <HAL_UART_RxCpltCallback+0x78>)
 8002278:	f004 fc40 	bl	8006afc <HAL_UART_Receive_IT>
 }
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004800 	.word	0x40004800
 8002288:	08008b7c 	.word	0x08008b7c
 800228c:	20000308 	.word	0x20000308
 8002290:	2000030c 	.word	0x2000030c
 8002294:	2000008c 	.word	0x2000008c
 8002298:	66666667 	.word	0x66666667
 800229c:	20000040 	.word	0x20000040
 80022a0:	2000047c 	.word	0x2000047c

080022a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022aa:	f000 fe38 	bl	8002f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ae:	f000 f8a5 	bl	80023fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b2:	f7ff fb79 	bl	80019a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80022b6:	f000 fd29 	bl	8002d0c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80022ba:	f000 fa89 	bl	80027d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022be:	f000 fad5 	bl	800286c <MX_TIM3_Init>
  MX_TIM4_Init();
 80022c2:	f000 fb55 	bl	8002970 <MX_TIM4_Init>
  MX_I2C1_Init();
 80022c6:	f7ff fd4b 	bl	8001d60 <MX_I2C1_Init>
  MX_SPI4_Init();
 80022ca:	f000 f933 	bl	8002534 <MX_SPI4_Init>
  MX_TIM5_Init();
 80022ce:	f000 fba5 	bl	8002a1c <MX_TIM5_Init>
  MX_CRC_Init();
 80022d2:	f7ff fadf 	bl	8001894 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /** Sensor initialization *******************************************/
  BMP280_Init(&bmp280_1);
 80022d6:	483f      	ldr	r0, [pc, #252]	; (80023d4 <main+0x130>)
 80022d8:	f7ff f9ac 	bl	8001634 <BMP280_Init>

  /** Heater PWM initialization *******************************************/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022dc:	2100      	movs	r1, #0
 80022de:	483e      	ldr	r0, [pc, #248]	; (80023d8 <main+0x134>)
 80022e0:	f003 fa92 	bl	8005808 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80022e4:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <main+0x134>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34

  /** Fan PWM initialization *******************************************/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80022ec:	2104      	movs	r1, #4
 80022ee:	483a      	ldr	r0, [pc, #232]	; (80023d8 <main+0x134>)
 80022f0:	f003 fa8a 	bl	8005808 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <main+0x134>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38


  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 80022fc:	2204      	movs	r2, #4
 80022fe:	4937      	ldr	r1, [pc, #220]	; (80023dc <main+0x138>)
 8002300:	4837      	ldr	r0, [pc, #220]	; (80023e0 <main+0x13c>)
 8002302:	f004 fbfb 	bl	8006afc <HAL_UART_Receive_IT>

  /** LCD with user menu initialization **************************************************/
   LCD_Init(&hlcd1);
 8002306:	4837      	ldr	r0, [pc, #220]	; (80023e4 <main+0x140>)
 8002308:	f7ff fe6f 	bl	8001fea <LCD_Init>

  /** Rotary quadrature encoder initialization *******************************************/
   ENC_Init(&henc1);
 800230c:	4836      	ldr	r0, [pc, #216]	; (80023e8 <main+0x144>)
 800230e:	f7ff fb03 	bl	8001918 <ENC_Init>
  {


	  // Read rotary encoder counter

	  encoder_count = ENC_GetCounter(&henc1);
 8002312:	4835      	ldr	r0, [pc, #212]	; (80023e8 <main+0x144>)
 8002314:	f7ff fb0e 	bl	8001934 <ENC_GetCounter>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24
	  new_value = (int)(start_value + 10 * ((float)encoder_count)/4.0);
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <main+0x148>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f920 	bl	8000564 <__aeabi_i2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002332:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233a:	ee17 0a90 	vmov	r0, s15
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <main+0x14c>)
 8002348:	f7fe faa0 	bl	800088c <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ffba 	bl	80002cc <__adddf3>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4618      	mov	r0, r3
 800235e:	4621      	mov	r1, r4
 8002360:	f7fe fb7c 	bl	8000a5c <__aeabi_d2iz>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <main+0x150>)
 800236a:	801a      	strh	r2, [r3, #0]



	  /* Reading the raw data from sensor */
	  bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4918      	ldr	r1, [pc, #96]	; (80023d4 <main+0x130>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe feca 	bl	800110c <bmp280_get_uncomp_data>

	  /* Getting the 32 bit compensated temperature */
	  bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 8002378:	69f9      	ldr	r1, [r7, #28]
 800237a:	f107 0318 	add.w	r3, r7, #24
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <main+0x130>)
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe ff12 	bl	80011aa <bmp280_get_comp_temp_32bit>

	  fan_percent=60;//temp
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <main+0x154>)
 8002388:	223c      	movs	r2, #60	; 0x3c
 800238a:	601a      	str	r2, [r3, #0]

	  // temp destination, temp actual, fan speed percentage
	  _LCD_Show(&hlcd1, new_value,temp32 ,fan_percent);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <main+0x150>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	461a      	mov	r2, r3
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <main+0x154>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4812      	ldr	r0, [pc, #72]	; (80023e4 <main+0x140>)
 800239c:	f7ff fec4 	bl	8002128 <_LCD_Show>

	  // char messagetemp destination, temp actual, fan speed percentage
	  _Message_Generate(&message,temp32, new_value, fan_percent);
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <main+0x150>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <main+0x154>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1d38      	adds	r0, r7, #4
 80023ae:	f000 fd29 	bl	8002e04 <_Message_Generate>

	  HAL_UART_Transmit(&huart3, (uint8_t*)message,  strlen(message), 1000);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff2b 	bl	8000210 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	1d39      	adds	r1, r7, #4
 80023c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <main+0x13c>)
 80023c6:	f004 fb07 	bl	80069d8 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80023ca:	2064      	movs	r0, #100	; 0x64
 80023cc:	f000 fe04 	bl	8002fd8 <HAL_Delay>
	  encoder_count = ENC_GetCounter(&henc1);
 80023d0:	e79f      	b.n	8002312 <main+0x6e>
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	200003fc 	.word	0x200003fc
 80023dc:	20000308 	.word	0x20000308
 80023e0:	2000047c 	.word	0x2000047c
 80023e4:	2000006c 	.word	0x2000006c
 80023e8:	20000040 	.word	0x20000040
 80023ec:	2000008c 	.word	0x2000008c
 80023f0:	40100000 	.word	0x40100000
 80023f4:	2000030c 	.word	0x2000030c
 80023f8:	20000310 	.word	0x20000310

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0b4      	sub	sp, #208	; 0xd0
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002406:	2230      	movs	r2, #48	; 0x30
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fa74 	bl	80078f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002410:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	2284      	movs	r2, #132	; 0x84
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f005 fa65 	bl	80078f8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800242e:	f001 fb23 	bl	8003a78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <SystemClock_Config+0x120>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a39      	ldr	r2, [pc, #228]	; (800251c <SystemClock_Config+0x120>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <SystemClock_Config+0x120>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <SystemClock_Config+0x124>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <SystemClock_Config+0x124>)
 8002450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b32      	ldr	r3, [pc, #200]	; (8002520 <SystemClock_Config+0x124>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002462:	2301      	movs	r3, #1
 8002464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002468:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800246c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800247a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800247e:	2304      	movs	r3, #4
 8002480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002484:	23d8      	movs	r3, #216	; 0xd8
 8002486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002490:	2303      	movs	r3, #3
 8002492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fb4c 	bl	8003b38 <HAL_RCC_OscConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80024a6:	f000 f83d 	bl	8002524 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024aa:	f001 faf5 	bl	8003a98 <HAL_PWREx_EnableOverDrive>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80024b4:	f000 f836 	bl	8002524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b8:	230f      	movs	r3, #15
 80024ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80024da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024de:	2107      	movs	r1, #7
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 fdcd 	bl	8004080 <HAL_RCC_ClockConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80024ec:	f000 f81a 	bl	8002524 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 80024f0:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80024f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	4618      	mov	r0, r3
 8002504:	f001 ffb4 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800250e:	f000 f809 	bl	8002524 <Error_Handler>
  }
}
 8002512:	bf00      	nop
 8002514:	37d0      	adds	r7, #208	; 0xd0
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <MX_SPI4_Init+0x74>)
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <MX_SPI4_Init+0x78>)
 800253c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002544:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_SPI4_Init+0x74>)
 800254e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002552:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002556:	2202      	movs	r2, #2
 8002558:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <MX_SPI4_Init+0x74>)
 800255c:	2201      	movs	r2, #1
 800255e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002566:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_SPI4_Init+0x74>)
 800256a:	2218      	movs	r2, #24
 800256c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_SPI4_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002582:	2207      	movs	r2, #7
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SPI4_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_SPI4_Init+0x74>)
 8002594:	f002 fb5a 	bl	8004c4c <HAL_SPI_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800259e:	f7ff ffc1 	bl	8002524 <Error_Handler>
  }

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000318 	.word	0x20000318
 80025ac:	40013400 	.word	0x40013400

080025b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_SPI_MspInit+0x7c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d127      	bne.n	8002622 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025f0:	f043 0310 	orr.w	r3, r3, #16
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_SPI_MspInit+0x80>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8002602:	2364      	movs	r3, #100	; 0x64
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002612:	2305      	movs	r3, #5
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_SPI_MspInit+0x84>)
 800261e:	f000 ff1b 	bl	8003458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40013400 	.word	0x40013400
 8002630:	40023800 	.word	0x40023800
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_MspInit+0x44>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a0e      	ldr	r2, [pc, #56]	; (800267c <HAL_MspInit+0x44>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_MspInit+0x44>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_MspInit+0x44>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_MspInit+0x44>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_MspInit+0x44>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <HardFault_Handler+0x4>

08002694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <MemManage_Handler+0x4>

0800269a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269e:	e7fe      	b.n	800269e <BusFault_Handler+0x4>

080026a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <UsageFault_Handler+0x4>

080026a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d4:	f000 fc60 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80026e0:	2020      	movs	r0, #32
 80026e2:	f001 f87d 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026e6:	2040      	movs	r0, #64	; 0x40
 80026e8:	f001 f87a 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM2_IRQHandler+0x10>)
 80026f6:	f003 f994 	bl	8005a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000043c 	.word	0x2000043c

08002704 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <USART3_IRQHandler+0x10>)
 800270a:	f004 fa99 	bl	8006c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000047c 	.word	0x2000047c

08002718 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800271c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002720:	f001 f85e 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002724:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002728:	f001 f85a 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800272c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002730:	f001 f856 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f005 f89c 	bl	80078a4 <__errno>
 800276c:	4602      	mov	r2, r0
 800276e:	230c      	movs	r3, #12
 8002770:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20050000 	.word	0x20050000
 8002798:	00000400 	.word	0x00000400
 800279c:	2000028c 	.word	0x2000028c
 80027a0:	20000508 	.word	0x20000508

080027a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <SystemInit+0x28>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <SystemInit+0x28>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SystemInit+0x28>)
 80027ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027be:	609a      	str	r2, [r3, #8]
#endif
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <MX_TIM2_Init+0x98>)
 80027f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <MX_TIM2_Init+0x98>)
 80027f8:	226b      	movs	r2, #107	; 0x6b
 80027fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <MX_TIM2_Init+0x98>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM2_Init+0x98>)
 8002804:	f241 3287 	movw	r2, #4999	; 0x1387
 8002808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <MX_TIM2_Init+0x98>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_TIM2_Init+0x98>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002816:	4814      	ldr	r0, [pc, #80]	; (8002868 <MX_TIM2_Init+0x98>)
 8002818:	f002 ff40 	bl	800569c <HAL_TIM_Base_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002822:	f7ff fe7f 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4619      	mov	r1, r3
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <MX_TIM2_Init+0x98>)
 8002834:	f003 fb2c 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800283e:	f7ff fe71 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4806      	ldr	r0, [pc, #24]	; (8002868 <MX_TIM2_Init+0x98>)
 8002850:	f003 ffc8 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800285a:	f7ff fe63 	bl	8002524 <Error_Handler>
  }

}
 800285e:	bf00      	nop
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000043c 	.word	0x2000043c

0800286c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08e      	sub	sp, #56	; 0x38
 8002870:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028a0:	4a32      	ldr	r2, [pc, #200]	; (800296c <MX_TIM3_Init+0x100>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80028a4:	4b30      	ldr	r3, [pc, #192]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028a6:	226b      	movs	r2, #107	; 0x6b
 80028a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028c6:	f002 fee9 	bl	800569c <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80028d0:	f7ff fe28 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028de:	4619      	mov	r1, r3
 80028e0:	4821      	ldr	r0, [pc, #132]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028e2:	f003 fad5 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80028ec:	f7ff fe1a 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028f0:	481d      	ldr	r0, [pc, #116]	; (8002968 <MX_TIM3_Init+0xfc>)
 80028f2:	f002 ff54 	bl	800579e <HAL_TIM_PWM_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80028fc:	f7ff fe12 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4816      	ldr	r0, [pc, #88]	; (8002968 <MX_TIM3_Init+0xfc>)
 8002910:	f003 ff68 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800291a:	f7ff fe03 	bl	8002524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291e:	2360      	movs	r3, #96	; 0x60
 8002920:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800292e:	463b      	mov	r3, r7
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM3_Init+0xfc>)
 8002936:	f003 f993 	bl	8005c60 <HAL_TIM_PWM_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002940:	f7ff fdf0 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002944:	463b      	mov	r3, r7
 8002946:	2204      	movs	r2, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <MX_TIM3_Init+0xfc>)
 800294c:	f003 f988 	bl	8005c60 <HAL_TIM_PWM_ConfigChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002956:	f7ff fde5 	bl	8002524 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800295a:	4803      	ldr	r0, [pc, #12]	; (8002968 <MX_TIM3_Init+0xfc>)
 800295c:	f000 f980 	bl	8002c60 <HAL_TIM_MspPostInit>

}
 8002960:	bf00      	nop
 8002962:	3738      	adds	r7, #56	; 0x38
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200003fc 	.word	0x200003fc
 800296c:	40000400 	.word	0x40000400

08002970 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f004 ffba 	bl	80078f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <MX_TIM4_Init+0xa4>)
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <MX_TIM4_Init+0xa8>)
 8002992:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <MX_TIM4_Init+0xa4>)
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <MX_TIM4_Init+0xa4>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <MX_TIM4_Init+0xa4>)
 80029a2:	f240 128f 	movw	r2, #399	; 0x18f
 80029a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <MX_TIM4_Init+0xa4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <MX_TIM4_Init+0xa4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029b4:	2303      	movs	r3, #3
 80029b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80029b8:	2302      	movs	r3, #2
 80029ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029bc:	2301      	movs	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80029c8:	2302      	movs	r3, #2
 80029ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029cc:	2301      	movs	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4619      	mov	r1, r3
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <MX_TIM4_Init+0xa4>)
 80029e0:	f002 ff56 	bl	8005890 <HAL_TIM_Encoder_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80029ea:	f7ff fd9b 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029f6:	463b      	mov	r3, r7
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	; (8002a14 <MX_TIM4_Init+0xa4>)
 80029fc:	f003 fef2 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a06:	f7ff fd8d 	bl	8002524 <Error_Handler>
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3730      	adds	r7, #48	; 0x30
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000037c 	.word	0x2000037c
 8002a18:	40000800 	.word	0x40000800

08002a1c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <MX_TIM5_Init+0x98>)
 8002a3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a42:	226b      	movs	r2, #107	; 0x6b
 8002a44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a60:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a62:	f002 fe1b 	bl	800569c <HAL_TIM_Base_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002a6c:	f7ff fd5a 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a7e:	f003 fa07 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002a88:	f7ff fd4c 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a9a:	f003 fea3 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002aa4:	f7ff fd3e 	bl	8002524 <Error_Handler>
  }

}
 8002aa8:	bf00      	nop
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200003bc 	.word	0x200003bc
 8002ab4:	40000c00 	.word	0x40000c00

08002ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d114      	bne.n	8002b04 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ada:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	201c      	movs	r0, #28
 8002af8:	f000 fb6b 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002afc:	201c      	movs	r0, #28
 8002afe:	f000 fb84 	bl	800320a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b02:	e05b      	b.n	8002bbc <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_TIM_Base_MspInit+0x110>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d145      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0e:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 8002b56:	2302      	movs	r3, #2
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b66:	2302      	movs	r3, #2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4816      	ldr	r0, [pc, #88]	; (8002bcc <HAL_TIM_Base_MspInit+0x114>)
 8002b72:	f000 fc71 	bl	8003458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_B_Pin;
 8002b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_CH_B_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	4619      	mov	r1, r3
 8002b92:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <HAL_TIM_Base_MspInit+0x118>)
 8002b94:	f000 fc60 	bl	8003458 <HAL_GPIO_Init>
}
 8002b98:	e010      	b.n	8002bbc <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <HAL_TIM_Base_MspInit+0x11c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10b      	bne.n	8002bbc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_TIM_Base_MspInit+0x10c>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3730      	adds	r7, #48	; 0x30
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40000c00 	.word	0x40000c00

08002bd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d128      	bne.n	8002c4c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8002c2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8002c48:	f000 fc06 	bl	8003458 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020c00 	.word	0x40020c00

08002c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <HAL_TIM_MspPostInit+0x9c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d137      	bne.n	8002cf2 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_TIM_MspPostInit+0xa0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin;
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_G_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <HAL_TIM_MspPostInit+0xa4>)
 8002cce:	f000 fbc3 	bl	8003458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_R_Pin;
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_R_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <HAL_TIM_MspPostInit+0xa8>)
 8002cee:	f000 fbb3 	bl	8003458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020400 	.word	0x40020400

08002d0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <MX_USART3_UART_Init+0x5c>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_USART3_UART_Init+0x58>)
 8002d50:	f003 fdf4 	bl	800693c <HAL_UART_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002d5a:	f7ff fbe3 	bl	8002524 <Error_Handler>
  }

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000047c 	.word	0x2000047c
 8002d68:	40004800 	.word	0x40004800

08002d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_UART_MspInit+0x8c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d130      	bne.n	8002df0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_UART_MspInit+0x90>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4809      	ldr	r0, [pc, #36]	; (8002e00 <HAL_UART_MspInit+0x94>)
 8002ddc:	f000 fb3c 	bl	8003458 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	2027      	movs	r0, #39	; 0x27
 8002de6:	f000 f9f4 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dea:	2027      	movs	r0, #39	; 0x27
 8002dec:	f000 fa0d 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002df0:	bf00      	nop
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40004800 	.word	0x40004800
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020c00 	.word	0x40020c00

08002e04 <_Message_Generate>:
 * @param[in] temp32  Null-terminated string
 * @param[in] new_value  Null-terminated string
 * @param[in] fan_percent  Null-terminated string
 * @return None
 */
void _Message_Generate(char* message,int32_t temp32,uint32_t new_value,int32_t fan_percent){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
	char text[5];
	strcpy( message, ";" );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4928      	ldr	r1, [pc, #160]	; (8002eb8 <_Message_Generate+0xb4>)
 8002e16:	461a      	mov	r2, r3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	8013      	strh	r3, [r2, #0]
	sprintf(text,"%4d", new_value);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4925      	ldr	r1, [pc, #148]	; (8002ebc <_Message_Generate+0xb8>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 fd6e 	bl	8007908 <siprintf>
	strcat( message, text );
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	4619      	mov	r1, r3
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f004 fdb4 	bl	80079a0 <strcat>
	strcat( message, "," );
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7fd f9e9 	bl	8000210 <strlen>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	491e      	ldr	r1, [pc, #120]	; (8002ec0 <_Message_Generate+0xbc>)
 8002e48:	461a      	mov	r2, r3
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	8013      	strh	r3, [r2, #0]
	sprintf(text,"%4d", temp32);
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4919      	ldr	r1, [pc, #100]	; (8002ebc <_Message_Generate+0xb8>)
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 fd55 	bl	8007908 <siprintf>
	strcat( message, text );
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4619      	mov	r1, r3
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f004 fd9b 	bl	80079a0 <strcat>
	strcat( message, "," );
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7fd f9d0 	bl	8000210 <strlen>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	4911      	ldr	r1, [pc, #68]	; (8002ec0 <_Message_Generate+0xbc>)
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	8013      	strh	r3, [r2, #0]
	sprintf(text,"%d", fan_percent);
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <_Message_Generate+0xc0>)
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fd3c 	bl	8007908 <siprintf>
	strcat( message, text );
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4619      	mov	r1, r3
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f004 fd82 	bl	80079a0 <strcat>
	strcat( message, ";\r\n" );
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7fd f9b7 	bl	8000210 <strlen>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <_Message_Generate+0xc4>)
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	6018      	str	r0, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08008b80 	.word	0x08008b80
 8002ebc:	08008b84 	.word	0x08008b84
 8002ec0:	08008b88 	.word	0x08008b88
 8002ec4:	08008b8c 	.word	0x08008b8c
 8002ec8:	08008b90 	.word	0x08008b90

08002ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ed0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ed2:	e003      	b.n	8002edc <LoopCopyDataInit>

08002ed4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ed6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ed8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eda:	3104      	adds	r1, #4

08002edc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ee0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ee2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ee4:	d3f6      	bcc.n	8002ed4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ee8:	e002      	b.n	8002ef0 <LoopFillZerobss>

08002eea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eec:	f842 3b04 	str.w	r3, [r2], #4

08002ef0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ef2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ef4:	d3f9      	bcc.n	8002eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef6:	f7ff fc55 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f004 fcd9 	bl	80078b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efe:	f7ff f9d1 	bl	80022a4 <main>
  bx  lr    
 8002f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002f08:	08008d88 	.word	0x08008d88
  ldr  r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f10:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8002f14:	2000026c 	.word	0x2000026c
  ldr  r3, = _ebss
 8002f18:	20000504 	.word	0x20000504

08002f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC_IRQHandler>

08002f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f000 f94a 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f000 f805 	bl	8002f38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f2e:	f7ff fb83 	bl	8002638 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f965 	bl	8003226 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 f92d 	bl	80031d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000090 	.word	0x20000090
 8002f90:	20000098 	.word	0x20000098
 8002f94:	20000094 	.word	0x20000094

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000098 	.word	0x20000098
 8002fbc:	200004fc 	.word	0x200004fc

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200004fc 	.word	0x200004fc

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_Delay+0x40>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000098 	.word	0x20000098

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	4313      	orrs	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	05fa0000 	.word	0x05fa0000

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	; (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff29 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e4:	f7ff ff3e 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff8e 	bl	8003110 <NVIC_EncodePriority>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff5d 	bl	80030bc <__NVIC_SetPriority>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff31 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffa2 	bl	8003178 <SysTick_Config>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e054      	b.n	80032fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7f5b      	ldrb	r3, [r3, #29]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fb38 	bl	80018d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	791b      	ldrb	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_CRC_Init+0xc4>)
 800327c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0218 	bic.w	r2, r2, #24
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	e00c      	b.n	80032aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	461a      	mov	r2, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f834 	bl	8003308 <HAL_CRCEx_Polynomial_Set>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e028      	b.n	80032fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	611a      	str	r2, [r3, #16]
 80032bc:	e004      	b.n	80032c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6912      	ldr	r2, [r2, #16]
 80032c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	04c11db7 	.word	0x04c11db7

08003308 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003318:	231f      	movs	r3, #31
 800331a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800331c:	bf00      	nop
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	613a      	str	r2, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_CRCEx_Polynomial_Set+0x34>
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b18      	cmp	r3, #24
 8003340:	d846      	bhi.n	80033d0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	080033d7 	.word	0x080033d7
 800334c:	080033d1 	.word	0x080033d1
 8003350:	080033d1 	.word	0x080033d1
 8003354:	080033d1 	.word	0x080033d1
 8003358:	080033d1 	.word	0x080033d1
 800335c:	080033d1 	.word	0x080033d1
 8003360:	080033d1 	.word	0x080033d1
 8003364:	080033d1 	.word	0x080033d1
 8003368:	080033c5 	.word	0x080033c5
 800336c:	080033d1 	.word	0x080033d1
 8003370:	080033d1 	.word	0x080033d1
 8003374:	080033d1 	.word	0x080033d1
 8003378:	080033d1 	.word	0x080033d1
 800337c:	080033d1 	.word	0x080033d1
 8003380:	080033d1 	.word	0x080033d1
 8003384:	080033d1 	.word	0x080033d1
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033d1 	.word	0x080033d1
 8003390:	080033d1 	.word	0x080033d1
 8003394:	080033d1 	.word	0x080033d1
 8003398:	080033d1 	.word	0x080033d1
 800339c:	080033d1 	.word	0x080033d1
 80033a0:	080033d1 	.word	0x080033d1
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	080033ad 	.word	0x080033ad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d913      	bls.n	80033da <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033b6:	e010      	b.n	80033da <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d90f      	bls.n	80033de <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033c2:	e00c      	b.n	80033de <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	d90b      	bls.n	80033e2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033ce:	e008      	b.n	80033e2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
      break;
 80033d4:	e006      	b.n	80033e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033e2:	bf00      	nop
  }
  if (status == HAL_OK)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 0118 	bic.w	r1, r3, #24
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e00c      	b.n	800344c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2205      	movs	r2, #5
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e175      	b.n	8003764 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	f040 8164 	bne.w	800375e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d00b      	beq.n	80034b6 <HAL_GPIO_Init+0x5e>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034aa:	2b11      	cmp	r3, #17
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d130      	bne.n	8003518 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 0201 	and.w	r2, r3, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x100>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b12      	cmp	r3, #18
 8003556:	d123      	bne.n	80035a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80be 	beq.w	800375e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_GPIO_Init+0x320>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	4a64      	ldr	r2, [pc, #400]	; (8003778 <HAL_GPIO_Init+0x320>)
 80035e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ec:	6453      	str	r3, [r2, #68]	; 0x44
 80035ee:	4b62      	ldr	r3, [pc, #392]	; (8003778 <HAL_GPIO_Init+0x320>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035fa:	4a60      	ldr	r2, [pc, #384]	; (800377c <HAL_GPIO_Init+0x324>)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a57      	ldr	r2, [pc, #348]	; (8003780 <HAL_GPIO_Init+0x328>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d037      	beq.n	8003696 <HAL_GPIO_Init+0x23e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_GPIO_Init+0x32c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_GPIO_Init+0x23a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a55      	ldr	r2, [pc, #340]	; (8003788 <HAL_GPIO_Init+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02b      	beq.n	800368e <HAL_GPIO_Init+0x236>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a54      	ldr	r2, [pc, #336]	; (800378c <HAL_GPIO_Init+0x334>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d025      	beq.n	800368a <HAL_GPIO_Init+0x232>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a53      	ldr	r2, [pc, #332]	; (8003790 <HAL_GPIO_Init+0x338>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01f      	beq.n	8003686 <HAL_GPIO_Init+0x22e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_GPIO_Init+0x33c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d019      	beq.n	8003682 <HAL_GPIO_Init+0x22a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a51      	ldr	r2, [pc, #324]	; (8003798 <HAL_GPIO_Init+0x340>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_GPIO_Init+0x226>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a50      	ldr	r2, [pc, #320]	; (800379c <HAL_GPIO_Init+0x344>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00d      	beq.n	800367a <HAL_GPIO_Init+0x222>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4f      	ldr	r2, [pc, #316]	; (80037a0 <HAL_GPIO_Init+0x348>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <HAL_GPIO_Init+0x21e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_GPIO_Init+0x34c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_GPIO_Init+0x21a>
 800366e:	2309      	movs	r3, #9
 8003670:	e012      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003672:	230a      	movs	r3, #10
 8003674:	e010      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003676:	2308      	movs	r3, #8
 8003678:	e00e      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800367a:	2307      	movs	r3, #7
 800367c:	e00c      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800367e:	2306      	movs	r3, #6
 8003680:	e00a      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003682:	2305      	movs	r3, #5
 8003684:	e008      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003686:	2304      	movs	r3, #4
 8003688:	e006      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800368a:	2303      	movs	r3, #3
 800368c:	e004      	b.n	8003698 <HAL_GPIO_Init+0x240>
 800368e:	2302      	movs	r3, #2
 8003690:	e002      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_GPIO_Init+0x240>
 8003696:	2300      	movs	r3, #0
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f002 0203 	and.w	r2, r2, #3
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	4093      	lsls	r3, r2
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036a8:	4934      	ldr	r1, [pc, #208]	; (800377c <HAL_GPIO_Init+0x324>)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3302      	adds	r3, #2
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_GPIO_Init+0x350>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <HAL_GPIO_Init+0x350>)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_GPIO_Init+0x350>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003704:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_GPIO_Init+0x350>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_GPIO_Init+0x350>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_GPIO_Init+0x350>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_GPIO_Init+0x350>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_GPIO_Init+0x350>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	f67f ae86 	bls.w	8003478 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800376c:	bf00      	nop
 800376e:	3724      	adds	r7, #36	; 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40021400 	.word	0x40021400
 8003798:	40021800 	.word	0x40021800
 800379c:	40021c00 	.word	0x40021c00
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40022400 	.word	0x40022400
 80037a8:	40013c00 	.word	0x40013c00

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037c8:	e003      	b.n	80037d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f806 	bl	8003810 <HAL_GPIO_EXTI_Callback>
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40013c00 	.word	0x40013c00

08003810 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fac6 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e006      	b.n	80038b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d104      	bne.n	80038c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_I2C_Init+0x11c>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	ea42 0103 	orr.w	r1, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69d9      	ldr	r1, [r3, #28]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	02008000 	.word	0x02008000

08003948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	d138      	bne.n	80039d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003968:	2302      	movs	r3, #2
 800396a:	e032      	b.n	80039d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	; 0x24
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800399a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d139      	bne.n	8003a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e033      	b.n	8003a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2224      	movs	r2, #36	; 0x24
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac6:	f7ff fa7b 	bl	8002fc0 <HAL_GetTick>
 8003aca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003acc:	e009      	b.n	8003ae2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ace:	f7ff fa77 	bl	8002fc0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003adc:	d901      	bls.n	8003ae2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e022      	b.n	8003b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d1ee      	bne.n	8003ace <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afc:	f7ff fa60 	bl	8002fc0 <HAL_GetTick>
 8003b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b02:	e009      	b.n	8003b18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b04:	f7ff fa5c 	bl	8002fc0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b12:	d901      	bls.n	8003b18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e007      	b.n	8003b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b24:	d1ee      	bne.n	8003b04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e291      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8087 	beq.w	8003c6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b5c:	4b96      	ldr	r3, [pc, #600]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d00c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b68:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d112      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62>
 8003b74:	4b90      	ldr	r3, [pc, #576]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b80:	d10b      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b82:	4b8d      	ldr	r3, [pc, #564]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d06c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x130>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d168      	bne.n	8003c68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e26b      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x7a>
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a83      	ldr	r2, [pc, #524]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e02e      	b.n	8003c10 <HAL_RCC_OscConfig+0xd8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x9c>
 8003bba:	4b7f      	ldr	r3, [pc, #508]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a7e      	ldr	r2, [pc, #504]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b7c      	ldr	r3, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7b      	ldr	r2, [pc, #492]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xd8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xc0>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a72      	ldr	r2, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xd8>
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6b      	ldr	r2, [pc, #428]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7ff f9d2 	bl	8002fc0 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7ff f9ce 	bl	8002fc0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e21f      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe8>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7ff f9be 	bl	8002fc0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7ff f9ba 	bl	8002fc0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e20b      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x110>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d069      	beq.n	8003d4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c76:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x190>
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1df      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	493d      	ldr	r1, [pc, #244]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	e040      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d023      	beq.n	8003d18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff f970 	bl	8002fc0 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7ff f96c 	bl	8002fc0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1bd      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4929      	ldr	r1, [pc, #164]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
 8003d16:	e018      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7ff f94c 	bl	8002fc0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7ff f948 	bl	8002fc0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e199      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d038      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d019      	beq.n	8003d92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7ff f929 	bl	8002fc0 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d72:	f7ff f925 	bl	8002fc0 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e176      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x23a>
 8003d90:	e01a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <HAL_RCC_OscConfig+0x280>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7ff f90f 	bl	8002fc0 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da6:	f7ff f90b 	bl	8002fc0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d903      	bls.n	8003dbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e15c      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
 8003db8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b91      	ldr	r3, [pc, #580]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ee      	bne.n	8003da6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a4 	beq.w	8003f1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a87      	ldr	r2, [pc, #540]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b85      	ldr	r3, [pc, #532]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfe:	4b82      	ldr	r3, [pc, #520]	; (8004008 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	; (8004008 <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7e      	ldr	r2, [pc, #504]	; (8004008 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7ff f8d3 	bl	8002fc0 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7ff f8cf 	bl	8002fc0 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	; 0x64
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e120      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e30:	4b75      	ldr	r3, [pc, #468]	; (8004008 <HAL_RCC_OscConfig+0x4d0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x31a>
 8003e44:	4b6f      	ldr	r3, [pc, #444]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a6e      	ldr	r2, [pc, #440]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e02d      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x33c>
 8003e5a:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a69      	ldr	r2, [pc, #420]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b67      	ldr	r3, [pc, #412]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a66      	ldr	r2, [pc, #408]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x35e>
 8003e7c:	4b61      	ldr	r3, [pc, #388]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a60      	ldr	r2, [pc, #384]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b5e      	ldr	r3, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
 8003e96:	4b5b      	ldr	r3, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a5a      	ldr	r2, [pc, #360]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7ff f883 	bl	8002fc0 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7ff f87f 	bl	8002fc0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0ce      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x386>
 8003ee0:	e014      	b.n	8003f0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7ff f86d 	bl	8002fc0 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7ff f869 	bl	8002fc0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	4b40      	ldr	r3, [pc, #256]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b3c      	ldr	r3, [pc, #240]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80a4 	beq.w	8004070 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d06b      	beq.n	800400c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d149      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a30      	ldr	r2, [pc, #192]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7ff f83a 	bl	8002fc0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7ff f836 	bl	8002fc0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	4313      	orrs	r3, r2
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7ff f80a 	bl	8002fc0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7ff f806 	bl	8002fc0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e057      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x478>
 8003fce:	e04f      	b.n	8004070 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fff0 	bl	8002fc0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe ffec 	bl	8002fc0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e03d      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4ac>
 8004002:	e035      	b.n	8004070 <HAL_RCC_OscConfig+0x538>
 8004004:	40023800 	.word	0x40023800
 8004008:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x544>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0d0      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	4965      	ldr	r1, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d040      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d115      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b41      	ldr	r3, [pc, #260]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e073      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06b      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4936      	ldr	r1, [pc, #216]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fe ff24 	bl	8002fc0 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fe ff20 	bl	8002fc0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e053      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d210      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4922      	ldr	r1, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4601      	mov	r1, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x1cc>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	fa21 f303 	lsr.w	r3, r1, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1d0>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1d4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fe80 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	08008ba4 	.word	0x08008ba4
 8004250:	20000090 	.word	0x20000090
 8004254:	20000094 	.word	0x20000094

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	2300      	movs	r3, #0
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d007      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x32>
 800427a:	2b08      	cmp	r3, #8
 800427c:	d008      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x38>
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 80b4 	bne.w	80043ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004286:	60bb      	str	r3, [r7, #8]
      break;
 8004288:	e0b3      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800428c:	60bb      	str	r3, [r7, #8]
      break;
 800428e:	e0b0      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b5a      	ldr	r3, [pc, #360]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800429a:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04a      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b55      	ldr	r3, [pc, #340]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	ea03 0501 	and.w	r5, r3, r1
 80042bc:	ea04 0602 	and.w	r6, r4, r2
 80042c0:	4629      	mov	r1, r5
 80042c2:	4632      	mov	r2, r6
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0154      	lsls	r4, r2, #5
 80042ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d2:	014b      	lsls	r3, r1, #5
 80042d4:	4619      	mov	r1, r3
 80042d6:	4622      	mov	r2, r4
 80042d8:	1b49      	subs	r1, r1, r5
 80042da:	eb62 0206 	sbc.w	r2, r2, r6
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f04f 0400 	mov.w	r4, #0
 80042e6:	0194      	lsls	r4, r2, #6
 80042e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042ec:	018b      	lsls	r3, r1, #6
 80042ee:	1a5b      	subs	r3, r3, r1
 80042f0:	eb64 0402 	sbc.w	r4, r4, r2
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	00e2      	lsls	r2, r4, #3
 80042fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004302:	00d9      	lsls	r1, r3, #3
 8004304:	460b      	mov	r3, r1
 8004306:	4614      	mov	r4, r2
 8004308:	195b      	adds	r3, r3, r5
 800430a:	eb44 0406 	adc.w	r4, r4, r6
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	0262      	lsls	r2, r4, #9
 8004318:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800431c:	0259      	lsls	r1, r3, #9
 800431e:	460b      	mov	r3, r1
 8004320:	4614      	mov	r4, r2
 8004322:	4618      	mov	r0, r3
 8004324:	4621      	mov	r1, r4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f04f 0400 	mov.w	r4, #0
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	f7fc fbbc 	bl	8000aac <__aeabi_uldivmod>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e049      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	f04f 0400 	mov.w	r4, #0
 8004346:	f240 11ff 	movw	r1, #511	; 0x1ff
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	ea03 0501 	and.w	r5, r3, r1
 8004352:	ea04 0602 	and.w	r6, r4, r2
 8004356:	4629      	mov	r1, r5
 8004358:	4632      	mov	r2, r6
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	0154      	lsls	r4, r2, #5
 8004364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004368:	014b      	lsls	r3, r1, #5
 800436a:	4619      	mov	r1, r3
 800436c:	4622      	mov	r2, r4
 800436e:	1b49      	subs	r1, r1, r5
 8004370:	eb62 0206 	sbc.w	r2, r2, r6
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	0194      	lsls	r4, r2, #6
 800437e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004382:	018b      	lsls	r3, r1, #6
 8004384:	1a5b      	subs	r3, r3, r1
 8004386:	eb64 0402 	sbc.w	r4, r4, r2
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	00e2      	lsls	r2, r4, #3
 8004394:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004398:	00d9      	lsls	r1, r3, #3
 800439a:	460b      	mov	r3, r1
 800439c:	4614      	mov	r4, r2
 800439e:	195b      	adds	r3, r3, r5
 80043a0:	eb44 0406 	adc.w	r4, r4, r6
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	02a2      	lsls	r2, r4, #10
 80043ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043b2:	0299      	lsls	r1, r3, #10
 80043b4:	460b      	mov	r3, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	4621      	mov	r1, r4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	461a      	mov	r2, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	f7fc fb71 	bl	8000aac <__aeabi_uldivmod>
 80043ca:	4603      	mov	r3, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	60bb      	str	r3, [r7, #8]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ee:	60bb      	str	r3, [r7, #8]
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	68bb      	ldr	r3, [r7, #8]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000090 	.word	0x20000090

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	08008bb4 	.word	0x08008bb4

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4601      	mov	r1, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4a03      	ldr	r2, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	08008bb4 	.word	0x08008bb4

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004498:	4b69      	ldr	r3, [pc, #420]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a68      	ldr	r2, [pc, #416]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044a2:	6093      	str	r3, [r2, #8]
 80044a4:	4b66      	ldr	r3, [pc, #408]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	4964      	ldr	r1, [pc, #400]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ca:	4b5d      	ldr	r3, [pc, #372]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	4959      	ldr	r1, [pc, #356]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e8:	d101      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004506:	4b4e      	ldr	r3, [pc, #312]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	494a      	ldr	r1, [pc, #296]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004524:	d101      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004526:	2301      	movs	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 808b 	beq.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
 8004560:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a34      	ldr	r2, [pc, #208]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fe fd22 	bl	8002fc0 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fe fd1e 	bl	8002fc0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e355      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800459e:	4b28      	ldr	r3, [pc, #160]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d035      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d02e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c6:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045de:	4a18      	ldr	r2, [pc, #96]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045e4:	4b16      	ldr	r3, [pc, #88]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fce6 	bl	8002fc0 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fe fce2 	bl	8002fc0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e317      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004626:	d111      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004636:	400b      	ands	r3, r1
 8004638:	4901      	ldr	r1, [pc, #4]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
 800463e:	e00b      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004640:	40023800 	.word	0x40023800
 8004644:	40007000 	.word	0x40007000
 8004648:	0ffffcff 	.word	0x0ffffcff
 800464c:	4bb0      	ldr	r3, [pc, #704]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4aaf      	ldr	r2, [pc, #700]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004652:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004656:	6093      	str	r3, [r2, #8]
 8004658:	4bad      	ldr	r3, [pc, #692]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800465a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	49aa      	ldr	r1, [pc, #680]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004676:	4ba6      	ldr	r3, [pc, #664]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	4aa4      	ldr	r2, [pc, #656]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004682:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004686:	4ba2      	ldr	r3, [pc, #648]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004688:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	499f      	ldr	r1, [pc, #636]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a4:	4b9a      	ldr	r3, [pc, #616]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b2:	4997      	ldr	r1, [pc, #604]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c6:	4b92      	ldr	r3, [pc, #584]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d4:	498e      	ldr	r1, [pc, #568]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e8:	4b89      	ldr	r3, [pc, #548]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f6:	4986      	ldr	r1, [pc, #536]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800470a:	4b81      	ldr	r3, [pc, #516]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	497d      	ldr	r1, [pc, #500]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472c:	4b78      	ldr	r3, [pc, #480]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f023 0203 	bic.w	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4975      	ldr	r1, [pc, #468]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474e:	4b70      	ldr	r3, [pc, #448]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f023 020c 	bic.w	r2, r3, #12
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	496c      	ldr	r1, [pc, #432]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004770:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	4964      	ldr	r1, [pc, #400]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004792:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a0:	495b      	ldr	r1, [pc, #364]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047b4:	4b56      	ldr	r3, [pc, #344]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	4953      	ldr	r1, [pc, #332]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047d6:	4b4e      	ldr	r3, [pc, #312]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	494a      	ldr	r1, [pc, #296]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	4942      	ldr	r1, [pc, #264]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	4939      	ldr	r1, [pc, #228]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484a:	4931      	ldr	r1, [pc, #196]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800485e:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800486c:	4928      	ldr	r1, [pc, #160]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487c:	d101      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ac:	4918      	ldr	r1, [pc, #96]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d0:	490f      	ldr	r1, [pc, #60]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d005      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e6:	f040 80d8 	bne.w	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a08      	ldr	r2, [pc, #32]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f6:	f7fe fb63 	bl	8002fc0 <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048fe:	f7fe fb5f 	bl	8002fc0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d903      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e196      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004910:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ee      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d021      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11d      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004934:	4b64      	ldr	r3, [pc, #400]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493a:	0c1b      	lsrs	r3, r3, #16
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004942:	4b61      	ldr	r3, [pc, #388]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	019a      	lsls	r2, r3, #6
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	071b      	lsls	r3, r3, #28
 8004968:	4957      	ldr	r1, [pc, #348]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499a:	d129      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800499c:	4b4a      	ldr	r3, [pc, #296]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	0f1b      	lsrs	r3, r3, #28
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	019a      	lsls	r2, r3, #6
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	071b      	lsls	r3, r3, #28
 80049d0:	493d      	ldr	r1, [pc, #244]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049d8:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049de:	f023 021f 	bic.w	r2, r3, #31
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	3b01      	subs	r3, #1
 80049e8:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01d      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	0e1b      	lsrs	r3, r3, #24
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	0f1b      	lsrs	r3, r3, #28
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	019a      	lsls	r2, r3, #6
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	431a      	orrs	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	071b      	lsls	r3, r3, #28
 8004a30:	4925      	ldr	r1, [pc, #148]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d011      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	019a      	lsls	r2, r3, #6
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	4919      	ldr	r1, [pc, #100]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fe faa4 	bl	8002fc0 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a7c:	f7fe faa0 	bl	8002fc0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0d7      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 80cd 	bne.w	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fe fa87 	bl	8002fc0 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ab4:	e00a      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ab6:	f7fe fa83 	bl	8002fc0 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b64      	cmp	r3, #100	; 0x64
 8004ac2:	d903      	bls.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0ba      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004acc:	4b5e      	ldr	r3, [pc, #376]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad8:	d0ed      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02e      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12a      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b02:	4b51      	ldr	r3, [pc, #324]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b10:	4b4d      	ldr	r3, [pc, #308]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	0f1b      	lsrs	r3, r3, #28
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	4944      	ldr	r1, [pc, #272]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b3e:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	493d      	ldr	r1, [pc, #244]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6c:	d11d      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	0e1b      	lsrs	r3, r3, #24
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	0f1b      	lsrs	r3, r3, #28
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	019a      	lsls	r2, r3, #6
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	4929      	ldr	r1, [pc, #164]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	019a      	lsls	r2, r3, #6
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	4917      	ldr	r1, [pc, #92]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4911      	ldr	r1, [pc, #68]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fe f9d4 	bl	8002fc0 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c1c:	f7fe f9d0 	bl	8002fc0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e007      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3a:	d1ef      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800

08004c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e084      	b.n	8004d68 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fd fc99 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9e:	d902      	bls.n	8004ca6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cb4:	d007      	beq.n	8004cc6 <HAL_SPI_Init+0x7a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cbe:	d002      	beq.n	8004cc6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd6:	d903      	bls.n	8004ce0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cde:	e002      	b.n	8004ce6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0204 	and.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_SPI_Transmit+0x22>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e150      	b.n	8005034 <HAL_SPI_Transmit+0x2c4>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d9a:	f7fe f911 	bl	8002fc0 <HAL_GetTick>
 8004d9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
 8004db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004db4:	e135      	b.n	8005022 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x52>
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dc6:	e12c      	b.n	8005022 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e12:	d107      	bne.n	8004e24 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d007      	beq.n	8004e42 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e4a:	d94b      	bls.n	8004ee4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0xea>
 8004e54:	8afb      	ldrh	r3, [r7, #22]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d13e      	bne.n	8004ed8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	881a      	ldrh	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e7e:	e02b      	b.n	8004ed8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d112      	bne.n	8004eb4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	1c9a      	adds	r2, r3, #2
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb2:	e011      	b.n	8004ed8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb4:	f7fe f884 	bl	8002fc0 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d803      	bhi.n	8004ecc <HAL_SPI_Transmit+0x15c>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Transmit+0x162>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed6:	e0a4      	b.n	8005022 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ce      	bne.n	8004e80 <HAL_SPI_Transmit+0x110>
 8004ee2:	e07c      	b.n	8004fde <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Transmit+0x182>
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d170      	bne.n	8004fd4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d912      	bls.n	8004f22 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	1c9a      	adds	r2, r3, #2
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b02      	subs	r3, #2
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f20:	e058      	b.n	8004fd4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f48:	e044      	b.n	8004fd4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d12b      	bne.n	8004fb0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d912      	bls.n	8004f88 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	881a      	ldrh	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b02      	subs	r3, #2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f86:	e025      	b.n	8004fd4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fae:	e011      	b.n	8004fd4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb0:	f7fe f806 	bl	8002fc0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d803      	bhi.n	8004fc8 <HAL_SPI_Transmit+0x258>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Transmit+0x25e>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fd2:	e026      	b.n	8005022 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1b5      	bne.n	8004f4a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fb14 	bl	8005610 <SPI_EndRxTxTransaction>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e000      	b.n	8005022 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005032:	7ffb      	ldrb	r3, [r7, #31]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800504a:	2301      	movs	r3, #1
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x26>
 800505e:	2302      	movs	r3, #2
 8005060:	e1fb      	b.n	800545a <HAL_SPI_TransmitReceive+0x41e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fd ffa9 	bl	8002fc0 <HAL_GetTick>
 800506e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005076:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005082:	887b      	ldrh	r3, [r7, #2]
 8005084:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005086:	7efb      	ldrb	r3, [r7, #27]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d00e      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x6e>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005092:	d106      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x66>
 800509c:	7efb      	ldrb	r3, [r7, #27]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050a8:	e1cd      	b.n	8005446 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x80>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x80>
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050c2:	e1c0      	b.n	8005446 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d003      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2205      	movs	r2, #5
 80050d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	887a      	ldrh	r2, [r7, #2]
 80050fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800511a:	d802      	bhi.n	8005122 <HAL_SPI_TransmitReceive+0xe6>
 800511c:	8a3b      	ldrh	r3, [r7, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d908      	bls.n	8005134 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	e007      	b.n	8005144 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d007      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800516a:	d97c      	bls.n	8005266 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_TransmitReceive+0x13e>
 8005174:	8a7b      	ldrh	r3, [r7, #18]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d169      	bne.n	800524e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	1c9a      	adds	r2, r3, #2
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519e:	e056      	b.n	800524e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d11b      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x1aa>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d016      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x1aa>
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d113      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d11c      	bne.n	800522e <HAL_SPI_TransmitReceive+0x1f2>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	b292      	uxth	r2, r2
 800520c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800522a:	2301      	movs	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800522e:	f7fd fec7 	bl	8002fc0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	429a      	cmp	r2, r3
 800523c:	d807      	bhi.n	800524e <HAL_SPI_TransmitReceive+0x212>
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d003      	beq.n	800524e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800524c:	e0fb      	b.n	8005446 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1a3      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x164>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d19d      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x164>
 8005264:	e0df      	b.n	8005426 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x23a>
 800526e:	8a7b      	ldrh	r3, [r7, #18]
 8005270:	2b01      	cmp	r3, #1
 8005272:	f040 80cb 	bne.w	800540c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d912      	bls.n	80052a6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	881a      	ldrh	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	1c9a      	adds	r2, r3, #2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b02      	subs	r3, #2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a4:	e0b2      	b.n	800540c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052cc:	e09e      	b.n	800540c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d134      	bne.n	8005346 <HAL_SPI_TransmitReceive+0x30a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02f      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x30a>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d12c      	bne.n	8005346 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d912      	bls.n	800531c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	881a      	ldrh	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b02      	subs	r3, #2
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800531a:	e012      	b.n	8005342 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d148      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x3aa>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d042      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d923      	bls.n	80053b4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	b292      	uxth	r2, r2
 8005378:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b02      	subs	r3, #2
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d81f      	bhi.n	80053e2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e016      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f103 020c 	add.w	r2, r3, #12
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e2:	2301      	movs	r3, #1
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053e6:	f7fd fdeb 	bl	8002fc0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d803      	bhi.n	80053fe <HAL_SPI_TransmitReceive+0x3c2>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d102      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x3c8>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800540a:	e01c      	b.n	8005446 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	f47f af5b 	bne.w	80052ce <HAL_SPI_TransmitReceive+0x292>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f47f af54 	bne.w	80052ce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f8f0 	bl	8005610 <SPI_EndRxTxTransaction>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	661a      	str	r2, [r3, #96]	; 0x60
 8005442:	e000      	b.n	8005446 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005444:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800545a:	4618      	mov	r0, r3
 800545c:	3728      	adds	r7, #40	; 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	e04c      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d048      	beq.n	800550e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800547c:	f7fd fda0 	bl	8002fc0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d902      	bls.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x30>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d13d      	bne.n	800550e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d111      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d004      	beq.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d107      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d10f      	bne.n	80054fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00f      	b.n	800552e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d1a3      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005544:	e057      	b.n	80055f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800554c:	d106      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0x26>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d048      	beq.n	80055f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005564:	f7fd fd2c 	bl	8002fc0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d902      	bls.n	800557a <SPI_WaitFifoStateUntilTimeout+0x44>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d13d      	bne.n	80055f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d111      	bne.n	80055b8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559c:	d004      	beq.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d107      	bne.n	80055b8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d10f      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e008      	b.n	8005608 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d19f      	bne.n	8005546 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff ff84 	bl	8005536 <SPI_WaitFifoStateUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e027      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff ff07 	bl	8005462 <SPI_WaitFlagStateUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e014      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff ff5d 	bl	8005536 <SPI_WaitFifoStateUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e000      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e01d      	b.n	80056ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fd f9f8 	bl	8002ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 fcc4 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_TIM_Base_Start+0x50>)
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b06      	cmp	r3, #6
 8005714:	d00b      	beq.n	800572e <HAL_TIM_Base_Start+0x3a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d007      	beq.n	800572e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	00010007 	.word	0x00010007

08005748 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <HAL_TIM_Base_Stop+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	f240 4344 	movw	r3, #1092	; 0x444
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <HAL_TIM_Base_Stop+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e01d      	b.n	80057ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f815 	bl	80057f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 fc43 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2201      	movs	r2, #1
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ffbc 	bl	8006798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <HAL_TIM_PWM_Start+0x7c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIM_PWM_Start+0x2c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a16      	ldr	r2, [pc, #88]	; (8005888 <HAL_TIM_PWM_Start+0x80>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <HAL_TIM_PWM_Start+0x30>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_TIM_PWM_Start+0x32>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_TIM_PWM_Start+0x84>)
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d00b      	beq.n	8005878 <HAL_TIM_PWM_Start+0x70>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d007      	beq.n	8005878 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e07b      	b.n	800599c <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fd f98d 	bl	8002bd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b34      	ldr	r3, [pc, #208]	; (80059a4 <HAL_TIM_Encoder_Init+0x114>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fbc1 	bl	8006068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <HAL_TIM_Encoder_Init+0x118>)
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	4313      	orrs	r3, r2
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4b21      	ldr	r3, [pc, #132]	; (80059ac <HAL_TIM_Encoder_Init+0x11c>)
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <HAL_TIM_Encoder_Init+0x120>)
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	4313      	orrs	r3, r2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	011a      	lsls	r2, r3, #4
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	031b      	lsls	r3, r3, #12
 8005950:	4313      	orrs	r3, r2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	4313      	orrs	r3, r2
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	fffebff8 	.word	0xfffebff8
 80059a8:	fffffcfc 	.word	0xfffffcfc
 80059ac:	fffff3f3 	.word	0xfffff3f3
 80059b0:	ffff0f0f 	.word	0xffff0f0f

080059b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_TIM_Encoder_Start+0x16>
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d008      	beq.n	80059da <HAL_TIM_Encoder_Start+0x26>
 80059c8:	e00f      	b.n	80059ea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fee0 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 80059d8:	e016      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	2104      	movs	r1, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fed8 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 80059e8:	e00e      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fed0 	bl	8006798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2201      	movs	r2, #1
 80059fe:	2104      	movs	r1, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fec9 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 8005a06:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d122      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d11b      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0202 	mvn.w	r2, #2
 8005a4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fae1 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e005      	b.n	8005a78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fad3 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fae4 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d122      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d11b      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f06f 0204 	mvn.w	r2, #4
 8005aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fab7 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005abe:	e005      	b.n	8005acc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 faa9 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 faba 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d122      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d11b      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0208 	mvn.w	r2, #8
 8005af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2204      	movs	r2, #4
 8005afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa8d 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005b12:	e005      	b.n	8005b20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa7f 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa90 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d122      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d11b      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0210 	mvn.w	r2, #16
 8005b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa63 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005b66:	e005      	b.n	8005b74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa55 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa66 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d10e      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0201 	mvn.w	r2, #1
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa2f 	bl	8006004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fea1 	bl	8006914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fe94 	bl	8006928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa14 	bl	8006054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0220 	mvn.w	r2, #32
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fe54 	bl	8006900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e105      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b14      	cmp	r3, #20
 8005c8e:	f200 80f0 	bhi.w	8005e72 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005e73 	.word	0x08005e73
 8005ca0:	08005e73 	.word	0x08005e73
 8005ca4:	08005e73 	.word	0x08005e73
 8005ca8:	08005d2d 	.word	0x08005d2d
 8005cac:	08005e73 	.word	0x08005e73
 8005cb0:	08005e73 	.word	0x08005e73
 8005cb4:	08005e73 	.word	0x08005e73
 8005cb8:	08005d6f 	.word	0x08005d6f
 8005cbc:	08005e73 	.word	0x08005e73
 8005cc0:	08005e73 	.word	0x08005e73
 8005cc4:	08005e73 	.word	0x08005e73
 8005cc8:	08005daf 	.word	0x08005daf
 8005ccc:	08005e73 	.word	0x08005e73
 8005cd0:	08005e73 	.word	0x08005e73
 8005cd4:	08005e73 	.word	0x08005e73
 8005cd8:	08005df1 	.word	0x08005df1
 8005cdc:	08005e73 	.word	0x08005e73
 8005ce0:	08005e73 	.word	0x08005e73
 8005ce4:	08005e73 	.word	0x08005e73
 8005ce8:	08005e31 	.word	0x08005e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fa58 	bl	80061a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0208 	orr.w	r2, r2, #8
 8005d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0204 	bic.w	r2, r2, #4
 8005d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	619a      	str	r2, [r3, #24]
      break;
 8005d2a:	e0a3      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 faaa 	bl	800628c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	619a      	str	r2, [r3, #24]
      break;
 8005d6c:	e082      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fb01 	bl	800637c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0208 	orr.w	r2, r2, #8
 8005d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0204 	bic.w	r2, r2, #4
 8005d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69d9      	ldr	r1, [r3, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	61da      	str	r2, [r3, #28]
      break;
 8005dac:	e062      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fb57 	bl	8006468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	021a      	lsls	r2, r3, #8
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	61da      	str	r2, [r3, #28]
      break;
 8005dee:	e041      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fb8e 	bl	8006518 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e2e:	e021      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fbc0 	bl	80065bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e70:	e000      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005e72:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop

08005e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_ConfigClockSource+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0a6      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x166>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4b4f      	ldr	r3, [pc, #316]	; (8006000 <HAL_TIM_ConfigClockSource+0x170>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ece:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d067      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0x120>
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d80b      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x6c>
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d073      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d802      	bhi.n	8005ef2 <HAL_TIM_ConfigClockSource+0x62>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d06f      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ef0:	e078      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d06c      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
 8005ef6:	2b30      	cmp	r3, #48	; 0x30
 8005ef8:	d06a      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005efa:	e073      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005efc:	2b70      	cmp	r3, #112	; 0x70
 8005efe:	d00d      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x8c>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d804      	bhi.n	8005f0e <HAL_TIM_ConfigClockSource+0x7e>
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d033      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0xe0>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d041      	beq.n	8005f90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f0c:	e06a      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f12:	d066      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x152>
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f18:	d017      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f1a:	e063      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 fc14 	bl	8006758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e04c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 fbfd 	bl	8006758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6c:	609a      	str	r2, [r3, #8]
      break;
 8005f6e:	e039      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f000 fb71 	bl	8006664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2150      	movs	r1, #80	; 0x50
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fbca 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e029      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 fb90 	bl	80066c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2160      	movs	r1, #96	; 0x60
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fbba 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8005fae:	e019      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 fb51 	bl	8006664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2140      	movs	r1, #64	; 0x40
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fbaa 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8005fce:	e009      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 fba1 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	fffeff88 	.word	0xfffeff88

08006004 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a40      	ldr	r2, [pc, #256]	; (800617c <TIM_Base_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d00f      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <TIM_Base_SetConfig+0x118>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <TIM_Base_SetConfig+0x120>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3a      	ldr	r2, [pc, #232]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d108      	bne.n	80060ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	; (800617c <TIM_Base_SetConfig+0x114>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c8:	d027      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <TIM_Base_SetConfig+0x118>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d023      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	; (8006188 <TIM_Base_SetConfig+0x120>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a28      	ldr	r2, [pc, #160]	; (8006190 <TIM_Base_SetConfig+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a26      	ldr	r2, [pc, #152]	; (8006198 <TIM_Base_SetConfig+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a25      	ldr	r2, [pc, #148]	; (800619c <TIM_Base_SetConfig+0x134>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <TIM_Base_SetConfig+0x138>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <TIM_Base_SetConfig+0x13c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <TIM_Base_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0xf8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0c      	ldr	r2, [pc, #48]	; (800618c <TIM_Base_SetConfig+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	615a      	str	r2, [r3, #20]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40010400 	.word	0x40010400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800
 800619c:	40001800 	.word	0x40001800
 80061a0:	40001c00 	.word	0x40001c00
 80061a4:	40002000 	.word	0x40002000

080061a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <TIM_OC1_SetConfig+0xd8>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a21      	ldr	r2, [pc, #132]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC1_SetConfig+0x64>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a20      	ldr	r2, [pc, #128]	; (8006288 <TIM_OC1_SetConfig+0xe0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a16      	ldr	r2, [pc, #88]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0x8e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <TIM_OC1_SetConfig+0xe0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	fffeff8f 	.word	0xfffeff8f
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400

0800628c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f023 0210 	bic.w	r2, r3, #16
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <TIM_OC2_SetConfig+0xe4>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a23      	ldr	r2, [pc, #140]	; (8006374 <TIM_OC2_SetConfig+0xe8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC2_SetConfig+0x68>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a22      	ldr	r2, [pc, #136]	; (8006378 <TIM_OC2_SetConfig+0xec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10d      	bne.n	8006310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a18      	ldr	r2, [pc, #96]	; (8006374 <TIM_OC2_SetConfig+0xe8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_OC2_SetConfig+0x94>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <TIM_OC2_SetConfig+0xec>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d113      	bne.n	8006348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	feff8fff 	.word	0xfeff8fff
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4b2d      	ldr	r3, [pc, #180]	; (800645c <TIM_OC3_SetConfig+0xe0>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a22      	ldr	r2, [pc, #136]	; (8006460 <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC3_SetConfig+0x66>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <TIM_OC3_SetConfig+0xe8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10d      	bne.n	80063fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <TIM_OC3_SetConfig+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_OC3_SetConfig+0x92>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC3_SetConfig+0xe8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d113      	bne.n	8006436 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	fffeff8f 	.word	0xfffeff8f
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4b1e      	ldr	r3, [pc, #120]	; (800650c <TIM_OC4_SetConfig+0xa4>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <TIM_OC4_SetConfig+0xa8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC4_SetConfig+0x68>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a12      	ldr	r2, [pc, #72]	; (8006514 <TIM_OC4_SetConfig+0xac>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d109      	bne.n	80064e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	019b      	lsls	r3, r3, #6
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	feff8fff 	.word	0xfeff8fff
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <TIM_OC5_SetConfig+0x98>)
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006558:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <TIM_OC5_SetConfig+0x9c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC5_SetConfig+0x5e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <TIM_OC5_SetConfig+0xa0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d109      	bne.n	800658a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	fffeff8f 	.word	0xfffeff8f
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <TIM_OC6_SetConfig+0x9c>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a13      	ldr	r2, [pc, #76]	; (800665c <TIM_OC6_SetConfig+0xa0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_OC6_SetConfig+0x60>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <TIM_OC6_SetConfig+0xa4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d109      	bne.n	8006630 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006622:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	029b      	lsls	r3, r3, #10
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	feff8fff 	.word	0xfeff8fff
 800665c:	40010000 	.word	0x40010000
 8006660:	40010400 	.word	0x40010400

08006664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 030a 	bic.w	r3, r3, #10
 80066a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0210 	bic.w	r2, r3, #16
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	f043 0307 	orr.w	r3, r3, #7
 8006744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2201      	movs	r2, #1
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1a      	ldr	r2, [r3, #32]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	401a      	ands	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1a      	ldr	r2, [r3, #32]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e06d      	b.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a30      	ldr	r2, [pc, #192]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d108      	bne.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d022      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d01d      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00e      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a15      	ldr	r2, [pc, #84]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10c      	bne.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40001800 	.word	0x40001800

08006900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e040      	b.n	80069d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fc fa04 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 faa6 	bl	8006ecc <UART_SetConfig>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e022      	b.n	80069d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fd44 	bl	8007420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fdcb 	bl	8007564 <UART_CheckIdleState>
 80069ce:	4603      	mov	r3, r0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d17f      	bne.n	8006af0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_UART_Transmit+0x24>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e078      	b.n	8006af2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Transmit+0x36>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e071      	b.n	8006af2 <HAL_UART_Transmit+0x11a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2221      	movs	r2, #33	; 0x21
 8006a20:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a22:	f7fc facd 	bl	8002fc0 <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a40:	d108      	bne.n	8006a54 <HAL_UART_Transmit+0x7c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e003      	b.n	8006a5c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006a64:	e02c      	b.n	8006ac0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2180      	movs	r1, #128	; 0x80
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fda6 	bl	80075c2 <UART_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e038      	b.n	8006af2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	3302      	adds	r3, #2
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	e007      	b.n	8006aae <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1cc      	bne.n	8006a66 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2140      	movs	r1, #64	; 0x40
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fd73 	bl	80075c2 <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e005      	b.n	8006af2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e000      	b.n	8006af2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
  }
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	f040 808a 	bne.w	8006c28 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_UART_Receive_IT+0x24>
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e082      	b.n	8006c2a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Receive_IT+0x36>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e07b      	b.n	8006c2a <HAL_UART_Receive_IT+0x12e>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d10e      	bne.n	8006b7e <HAL_UART_Receive_IT+0x82>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <HAL_UART_Receive_IT+0x78>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b72:	e02d      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	22ff      	movs	r2, #255	; 0xff
 8006b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b7c:	e028      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <HAL_UART_Receive_IT+0xa6>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d104      	bne.n	8006b98 <HAL_UART_Receive_IT+0x9c>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b96:	e01b      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	227f      	movs	r2, #127	; 0x7f
 8006b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ba0:	e016      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006baa:	d10d      	bne.n	8006bc8 <HAL_UART_Receive_IT+0xcc>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <HAL_UART_Receive_IT+0xc2>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	227f      	movs	r2, #127	; 0x7f
 8006bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bbc:	e008      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	223f      	movs	r2, #63	; 0x3f
 8006bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bc6:	e003      	b.n	8006bd0 <HAL_UART_Receive_IT+0xd4>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2222      	movs	r2, #34	; 0x22
 8006bda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf4:	d107      	bne.n	8006c06 <HAL_UART_Receive_IT+0x10a>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <HAL_UART_Receive_IT+0x13c>)
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60
 8006c04:	e002      	b.n	8006c0c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a0c      	ldr	r2, [pc, #48]	; (8006c3c <HAL_UART_Receive_IT+0x140>)
 8006c0a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e000      	b.n	8006c2a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	080077fd 	.word	0x080077fd
 8006c3c:	08007757 	.word	0x08007757

08006c40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c66:	4013      	ands	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d113      	bne.n	8006c98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8100 	beq.w	8006e8e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      }
      return;
 8006c96:	e0fa      	b.n	8006e8e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80d5 	beq.w	8006e4a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80ca 	beq.w	8006e4a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <HAL_UART_IRQHandler+0x9e>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd6:	f043 0201 	orr.w	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <HAL_UART_IRQHandler+0xc6>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfe:	f043 0204 	orr.w	r2, r3, #4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <HAL_UART_IRQHandler+0xee>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d26:	f043 0202 	orr.w	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2208      	movs	r2, #8
 8006d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d58:	f043 0208 	orr.w	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00f      	beq.n	8006d8a <HAL_UART_IRQHandler+0x14a>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d82:	f043 0220 	orr.w	r2, r3, #32
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d07f      	beq.n	8006e92 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dba:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d004      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d031      	beq.n	8006e38 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc6f 	bl	80076b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d123      	bne.n	8006e30 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e04:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <HAL_UART_IRQHandler+0x260>)
 8006e06:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fc fb01 	bl	8003414 <HAL_DMA_Abort_IT>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e26:	e00e      	b.n	8006e46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f845 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2e:	e00a      	b.n	8006e46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f841 	bl	8006eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	e006      	b.n	8006e46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f83d 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006e44:	e025      	b.n	8006e92 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e46:	bf00      	nop
    return;
 8006e48:	e023      	b.n	8006e92 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d017      	beq.n	8006e96 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
    }
    return;
 8006e6e:	e012      	b.n	8006e96 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00e      	beq.n	8006e98 <HAL_UART_IRQHandler+0x258>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fc4d 	bl	8007724 <UART_EndTransmit_IT>
    return;
 8006e8a:	bf00      	nop
 8006e8c:	e004      	b.n	8006e98 <HAL_UART_IRQHandler+0x258>
      return;
 8006e8e:	bf00      	nop
 8006e90:	e002      	b.n	8006e98 <HAL_UART_IRQHandler+0x258>
    return;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_UART_IRQHandler+0x258>
    return;
 8006e96:	bf00      	nop
  }

}
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	080076f9 	.word	0x080076f9

08006ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4bb1      	ldr	r3, [pc, #708]	; (80071c0 <UART_SetConfig+0x2f4>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	6939      	ldr	r1, [r7, #16]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a9f      	ldr	r2, [pc, #636]	; (80071c4 <UART_SetConfig+0x2f8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d121      	bne.n	8006f90 <UART_SetConfig+0xc4>
 8006f4c:	4b9e      	ldr	r3, [pc, #632]	; (80071c8 <UART_SetConfig+0x2fc>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d816      	bhi.n	8006f88 <UART_SetConfig+0xbc>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x94>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08006f71 	.word	0x08006f71
 8006f64:	08006f7d 	.word	0x08006f7d
 8006f68:	08006f77 	.word	0x08006f77
 8006f6c:	08006f83 	.word	0x08006f83
 8006f70:	2301      	movs	r3, #1
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e151      	b.n	800721a <UART_SetConfig+0x34e>
 8006f76:	2302      	movs	r3, #2
 8006f78:	77fb      	strb	r3, [r7, #31]
 8006f7a:	e14e      	b.n	800721a <UART_SetConfig+0x34e>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e14b      	b.n	800721a <UART_SetConfig+0x34e>
 8006f82:	2308      	movs	r3, #8
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e148      	b.n	800721a <UART_SetConfig+0x34e>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	bf00      	nop
 8006f8e:	e144      	b.n	800721a <UART_SetConfig+0x34e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a8d      	ldr	r2, [pc, #564]	; (80071cc <UART_SetConfig+0x300>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d134      	bne.n	8007004 <UART_SetConfig+0x138>
 8006f9a:	4b8b      	ldr	r3, [pc, #556]	; (80071c8 <UART_SetConfig+0x2fc>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	f003 030c 	and.w	r3, r3, #12
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d829      	bhi.n	8006ffc <UART_SetConfig+0x130>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0xe4>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fe5 	.word	0x08006fe5
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08006ffd 	.word	0x08006ffd
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	08006ffd 	.word	0x08006ffd
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006feb 	.word	0x08006feb
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08006ff7 	.word	0x08006ff7
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e117      	b.n	800721a <UART_SetConfig+0x34e>
 8006fea:	2302      	movs	r3, #2
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e114      	b.n	800721a <UART_SetConfig+0x34e>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e111      	b.n	800721a <UART_SetConfig+0x34e>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e10e      	b.n	800721a <UART_SetConfig+0x34e>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	bf00      	nop
 8007002:	e10a      	b.n	800721a <UART_SetConfig+0x34e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a71      	ldr	r2, [pc, #452]	; (80071d0 <UART_SetConfig+0x304>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d120      	bne.n	8007050 <UART_SetConfig+0x184>
 800700e:	4b6e      	ldr	r3, [pc, #440]	; (80071c8 <UART_SetConfig+0x2fc>)
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007018:	2b10      	cmp	r3, #16
 800701a:	d00f      	beq.n	800703c <UART_SetConfig+0x170>
 800701c:	2b10      	cmp	r3, #16
 800701e:	d802      	bhi.n	8007026 <UART_SetConfig+0x15a>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <UART_SetConfig+0x164>
 8007024:	e010      	b.n	8007048 <UART_SetConfig+0x17c>
 8007026:	2b20      	cmp	r3, #32
 8007028:	d005      	beq.n	8007036 <UART_SetConfig+0x16a>
 800702a:	2b30      	cmp	r3, #48	; 0x30
 800702c:	d009      	beq.n	8007042 <UART_SetConfig+0x176>
 800702e:	e00b      	b.n	8007048 <UART_SetConfig+0x17c>
 8007030:	2300      	movs	r3, #0
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e0f1      	b.n	800721a <UART_SetConfig+0x34e>
 8007036:	2302      	movs	r3, #2
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e0ee      	b.n	800721a <UART_SetConfig+0x34e>
 800703c:	2304      	movs	r3, #4
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e0eb      	b.n	800721a <UART_SetConfig+0x34e>
 8007042:	2308      	movs	r3, #8
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e0e8      	b.n	800721a <UART_SetConfig+0x34e>
 8007048:	2310      	movs	r3, #16
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	bf00      	nop
 800704e:	e0e4      	b.n	800721a <UART_SetConfig+0x34e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a5f      	ldr	r2, [pc, #380]	; (80071d4 <UART_SetConfig+0x308>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d120      	bne.n	800709c <UART_SetConfig+0x1d0>
 800705a:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <UART_SetConfig+0x2fc>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d00f      	beq.n	8007088 <UART_SetConfig+0x1bc>
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d802      	bhi.n	8007072 <UART_SetConfig+0x1a6>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <UART_SetConfig+0x1b0>
 8007070:	e010      	b.n	8007094 <UART_SetConfig+0x1c8>
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d005      	beq.n	8007082 <UART_SetConfig+0x1b6>
 8007076:	2bc0      	cmp	r3, #192	; 0xc0
 8007078:	d009      	beq.n	800708e <UART_SetConfig+0x1c2>
 800707a:	e00b      	b.n	8007094 <UART_SetConfig+0x1c8>
 800707c:	2300      	movs	r3, #0
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e0cb      	b.n	800721a <UART_SetConfig+0x34e>
 8007082:	2302      	movs	r3, #2
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e0c8      	b.n	800721a <UART_SetConfig+0x34e>
 8007088:	2304      	movs	r3, #4
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0c5      	b.n	800721a <UART_SetConfig+0x34e>
 800708e:	2308      	movs	r3, #8
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e0c2      	b.n	800721a <UART_SetConfig+0x34e>
 8007094:	2310      	movs	r3, #16
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	bf00      	nop
 800709a:	e0be      	b.n	800721a <UART_SetConfig+0x34e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a4d      	ldr	r2, [pc, #308]	; (80071d8 <UART_SetConfig+0x30c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d124      	bne.n	80070f0 <UART_SetConfig+0x224>
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <UART_SetConfig+0x2fc>)
 80070a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b4:	d012      	beq.n	80070dc <UART_SetConfig+0x210>
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ba:	d802      	bhi.n	80070c2 <UART_SetConfig+0x1f6>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <UART_SetConfig+0x204>
 80070c0:	e012      	b.n	80070e8 <UART_SetConfig+0x21c>
 80070c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c6:	d006      	beq.n	80070d6 <UART_SetConfig+0x20a>
 80070c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070cc:	d009      	beq.n	80070e2 <UART_SetConfig+0x216>
 80070ce:	e00b      	b.n	80070e8 <UART_SetConfig+0x21c>
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e0a1      	b.n	800721a <UART_SetConfig+0x34e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e09e      	b.n	800721a <UART_SetConfig+0x34e>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e09b      	b.n	800721a <UART_SetConfig+0x34e>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e098      	b.n	800721a <UART_SetConfig+0x34e>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	bf00      	nop
 80070ee:	e094      	b.n	800721a <UART_SetConfig+0x34e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a39      	ldr	r2, [pc, #228]	; (80071dc <UART_SetConfig+0x310>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d124      	bne.n	8007144 <UART_SetConfig+0x278>
 80070fa:	4b33      	ldr	r3, [pc, #204]	; (80071c8 <UART_SetConfig+0x2fc>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007108:	d012      	beq.n	8007130 <UART_SetConfig+0x264>
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710e:	d802      	bhi.n	8007116 <UART_SetConfig+0x24a>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <UART_SetConfig+0x258>
 8007114:	e012      	b.n	800713c <UART_SetConfig+0x270>
 8007116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711a:	d006      	beq.n	800712a <UART_SetConfig+0x25e>
 800711c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007120:	d009      	beq.n	8007136 <UART_SetConfig+0x26a>
 8007122:	e00b      	b.n	800713c <UART_SetConfig+0x270>
 8007124:	2301      	movs	r3, #1
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e077      	b.n	800721a <UART_SetConfig+0x34e>
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e074      	b.n	800721a <UART_SetConfig+0x34e>
 8007130:	2304      	movs	r3, #4
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e071      	b.n	800721a <UART_SetConfig+0x34e>
 8007136:	2308      	movs	r3, #8
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e06e      	b.n	800721a <UART_SetConfig+0x34e>
 800713c:	2310      	movs	r3, #16
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	bf00      	nop
 8007142:	e06a      	b.n	800721a <UART_SetConfig+0x34e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <UART_SetConfig+0x314>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d124      	bne.n	8007198 <UART_SetConfig+0x2cc>
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <UART_SetConfig+0x2fc>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715c:	d012      	beq.n	8007184 <UART_SetConfig+0x2b8>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d802      	bhi.n	800716a <UART_SetConfig+0x29e>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <UART_SetConfig+0x2ac>
 8007168:	e012      	b.n	8007190 <UART_SetConfig+0x2c4>
 800716a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716e:	d006      	beq.n	800717e <UART_SetConfig+0x2b2>
 8007170:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007174:	d009      	beq.n	800718a <UART_SetConfig+0x2be>
 8007176:	e00b      	b.n	8007190 <UART_SetConfig+0x2c4>
 8007178:	2300      	movs	r3, #0
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e04d      	b.n	800721a <UART_SetConfig+0x34e>
 800717e:	2302      	movs	r3, #2
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e04a      	b.n	800721a <UART_SetConfig+0x34e>
 8007184:	2304      	movs	r3, #4
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e047      	b.n	800721a <UART_SetConfig+0x34e>
 800718a:	2308      	movs	r3, #8
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e044      	b.n	800721a <UART_SetConfig+0x34e>
 8007190:	2310      	movs	r3, #16
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	bf00      	nop
 8007196:	e040      	b.n	800721a <UART_SetConfig+0x34e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <UART_SetConfig+0x318>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d139      	bne.n	8007216 <UART_SetConfig+0x34a>
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <UART_SetConfig+0x2fc>)
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b0:	d027      	beq.n	8007202 <UART_SetConfig+0x336>
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b6:	d817      	bhi.n	80071e8 <UART_SetConfig+0x31c>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01c      	beq.n	80071f6 <UART_SetConfig+0x32a>
 80071bc:	e027      	b.n	800720e <UART_SetConfig+0x342>
 80071be:	bf00      	nop
 80071c0:	efff69f3 	.word	0xefff69f3
 80071c4:	40011000 	.word	0x40011000
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40004400 	.word	0x40004400
 80071d0:	40004800 	.word	0x40004800
 80071d4:	40004c00 	.word	0x40004c00
 80071d8:	40005000 	.word	0x40005000
 80071dc:	40011400 	.word	0x40011400
 80071e0:	40007800 	.word	0x40007800
 80071e4:	40007c00 	.word	0x40007c00
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	d006      	beq.n	80071fc <UART_SetConfig+0x330>
 80071ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071f2:	d009      	beq.n	8007208 <UART_SetConfig+0x33c>
 80071f4:	e00b      	b.n	800720e <UART_SetConfig+0x342>
 80071f6:	2300      	movs	r3, #0
 80071f8:	77fb      	strb	r3, [r7, #31]
 80071fa:	e00e      	b.n	800721a <UART_SetConfig+0x34e>
 80071fc:	2302      	movs	r3, #2
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e00b      	b.n	800721a <UART_SetConfig+0x34e>
 8007202:	2304      	movs	r3, #4
 8007204:	77fb      	strb	r3, [r7, #31]
 8007206:	e008      	b.n	800721a <UART_SetConfig+0x34e>
 8007208:	2308      	movs	r3, #8
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e005      	b.n	800721a <UART_SetConfig+0x34e>
 800720e:	2310      	movs	r3, #16
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	bf00      	nop
 8007214:	e001      	b.n	800721a <UART_SetConfig+0x34e>
 8007216:	2310      	movs	r3, #16
 8007218:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007222:	d17f      	bne.n	8007324 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007224:	7ffb      	ldrb	r3, [r7, #31]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d85c      	bhi.n	80072e4 <UART_SetConfig+0x418>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x364>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007255 	.word	0x08007255
 8007234:	08007275 	.word	0x08007275
 8007238:	08007295 	.word	0x08007295
 800723c:	080072e5 	.word	0x080072e5
 8007240:	080072ad 	.word	0x080072ad
 8007244:	080072e5 	.word	0x080072e5
 8007248:	080072e5 	.word	0x080072e5
 800724c:	080072e5 	.word	0x080072e5
 8007250:	080072cd 	.word	0x080072cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fd f8e4 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8007258:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	005a      	lsls	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	441a      	add	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	fbb2 f3f3 	udiv	r3, r2, r3
 800726e:	b29b      	uxth	r3, r3
 8007270:	61bb      	str	r3, [r7, #24]
        break;
 8007272:	e03a      	b.n	80072ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007274:	f7fd f8e8 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8007278:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	005a      	lsls	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	b29b      	uxth	r3, r3
 8007290:	61bb      	str	r3, [r7, #24]
        break;
 8007292:	e02a      	b.n	80072ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	085a      	lsrs	r2, r3, #1
 800729a:	4b5f      	ldr	r3, [pc, #380]	; (8007418 <UART_SetConfig+0x54c>)
 800729c:	4413      	add	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6852      	ldr	r2, [r2, #4]
 80072a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	61bb      	str	r3, [r7, #24]
        break;
 80072aa:	e01e      	b.n	80072ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ac:	f7fc ffd4 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 80072b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	61bb      	str	r3, [r7, #24]
        break;
 80072ca:	e00e      	b.n	80072ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	b29b      	uxth	r3, r3
 80072e0:	61bb      	str	r3, [r7, #24]
        break;
 80072e2:	e002      	b.n	80072ea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
        break;
 80072e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d916      	bls.n	800731e <UART_SetConfig+0x452>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f6:	d212      	bcs.n	800731e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f023 030f 	bic.w	r3, r3, #15
 8007300:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	b29a      	uxth	r2, r3
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	4313      	orrs	r3, r2
 8007312:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	897a      	ldrh	r2, [r7, #10]
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	e070      	b.n	8007400 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
 8007322:	e06d      	b.n	8007400 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007324:	7ffb      	ldrb	r3, [r7, #31]
 8007326:	2b08      	cmp	r3, #8
 8007328:	d859      	bhi.n	80073de <UART_SetConfig+0x512>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x464>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007355 	.word	0x08007355
 8007334:	08007373 	.word	0x08007373
 8007338:	08007391 	.word	0x08007391
 800733c:	080073df 	.word	0x080073df
 8007340:	080073a9 	.word	0x080073a9
 8007344:	080073df 	.word	0x080073df
 8007348:	080073df 	.word	0x080073df
 800734c:	080073df 	.word	0x080073df
 8007350:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fd f864 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8007358:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	085a      	lsrs	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	441a      	add	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	b29b      	uxth	r3, r3
 800736e:	61bb      	str	r3, [r7, #24]
        break;
 8007370:	e038      	b.n	80073e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007372:	f7fd f869 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8007376:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	085a      	lsrs	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	441a      	add	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	b29b      	uxth	r3, r3
 800738c:	61bb      	str	r3, [r7, #24]
        break;
 800738e:	e029      	b.n	80073e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	085a      	lsrs	r2, r3, #1
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <UART_SetConfig+0x550>)
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6852      	ldr	r2, [r2, #4]
 800739e:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	61bb      	str	r3, [r7, #24]
        break;
 80073a6:	e01d      	b.n	80073e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a8:	f7fc ff56 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 80073ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085a      	lsrs	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	441a      	add	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	61bb      	str	r3, [r7, #24]
        break;
 80073c4:	e00e      	b.n	80073e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	b29b      	uxth	r3, r3
 80073da:	61bb      	str	r3, [r7, #24]
        break;
 80073dc:	e002      	b.n	80073e4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
        break;
 80073e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d908      	bls.n	80073fc <UART_SetConfig+0x530>
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f0:	d204      	bcs.n	80073fc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	e001      	b.n	8007400 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	01e84800 	.word	0x01e84800
 800741c:	00f42400 	.word	0x00f42400

08007420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d10a      	bne.n	8007536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af02      	add	r7, sp, #8
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007572:	f7fb fd25 	bl	8002fc0 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b08      	cmp	r3, #8
 8007584:	d10e      	bne.n	80075a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f814 	bl	80075c2 <UART_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e00a      	b.n	80075ba <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d2:	e05d      	b.n	8007690 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	d059      	beq.n	8007690 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075dc:	f7fb fcf0 	bl	8002fc0 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11b      	bne.n	800762a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007600:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e042      	b.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02b      	beq.n	8007690 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007646:	d123      	bne.n	8007690 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007650:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007660:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e00f      	b.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4013      	ands	r3, r2
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	429a      	cmp	r2, r3
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d092      	beq.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	661a      	str	r2, [r3, #96]	; 0x60
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fbce 	bl	8006eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800773a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fbab 	bl	8006ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007764:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776a:	2b22      	cmp	r3, #34	; 0x22
 800776c:	d13a      	bne.n	80077e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007776:	89bb      	ldrh	r3, [r7, #12]
 8007778:	b2d9      	uxtb	r1, r3
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007782:	400a      	ands	r2, r1
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d121      	bne.n	80077f4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fa fd23 	bl	8002228 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077e2:	e007      	b.n	80077f4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	619a      	str	r2, [r3, #24]
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800780a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007810:	2b22      	cmp	r3, #34	; 0x22
 8007812:	d13a      	bne.n	800788a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007820:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007822:	89ba      	ldrh	r2, [r7, #12]
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	4013      	ands	r3, r2
 8007828:	b29a      	uxth	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d121      	bne.n	800789a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007864:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fa fcd0 	bl	8002228 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007888:	e007      	b.n	800789a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0208 	orr.w	r2, r2, #8
 8007898:	619a      	str	r2, [r3, #24]
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <__errno>:
 80078a4:	4b01      	ldr	r3, [pc, #4]	; (80078ac <__errno+0x8>)
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	2000009c 	.word	0x2000009c

080078b0 <__libc_init_array>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4e0d      	ldr	r6, [pc, #52]	; (80078e8 <__libc_init_array+0x38>)
 80078b4:	4c0d      	ldr	r4, [pc, #52]	; (80078ec <__libc_init_array+0x3c>)
 80078b6:	1ba4      	subs	r4, r4, r6
 80078b8:	10a4      	asrs	r4, r4, #2
 80078ba:	2500      	movs	r5, #0
 80078bc:	42a5      	cmp	r5, r4
 80078be:	d109      	bne.n	80078d4 <__libc_init_array+0x24>
 80078c0:	4e0b      	ldr	r6, [pc, #44]	; (80078f0 <__libc_init_array+0x40>)
 80078c2:	4c0c      	ldr	r4, [pc, #48]	; (80078f4 <__libc_init_array+0x44>)
 80078c4:	f001 f93c 	bl	8008b40 <_init>
 80078c8:	1ba4      	subs	r4, r4, r6
 80078ca:	10a4      	asrs	r4, r4, #2
 80078cc:	2500      	movs	r5, #0
 80078ce:	42a5      	cmp	r5, r4
 80078d0:	d105      	bne.n	80078de <__libc_init_array+0x2e>
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d8:	4798      	blx	r3
 80078da:	3501      	adds	r5, #1
 80078dc:	e7ee      	b.n	80078bc <__libc_init_array+0xc>
 80078de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078e2:	4798      	blx	r3
 80078e4:	3501      	adds	r5, #1
 80078e6:	e7f2      	b.n	80078ce <__libc_init_array+0x1e>
 80078e8:	08008d80 	.word	0x08008d80
 80078ec:	08008d80 	.word	0x08008d80
 80078f0:	08008d80 	.word	0x08008d80
 80078f4:	08008d84 	.word	0x08008d84

080078f8 <memset>:
 80078f8:	4402      	add	r2, r0
 80078fa:	4603      	mov	r3, r0
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d100      	bne.n	8007902 <memset+0xa>
 8007900:	4770      	bx	lr
 8007902:	f803 1b01 	strb.w	r1, [r3], #1
 8007906:	e7f9      	b.n	80078fc <memset+0x4>

08007908 <siprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b500      	push	{lr}
 800790c:	b09c      	sub	sp, #112	; 0x70
 800790e:	ab1d      	add	r3, sp, #116	; 0x74
 8007910:	9002      	str	r0, [sp, #8]
 8007912:	9006      	str	r0, [sp, #24]
 8007914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007918:	4809      	ldr	r0, [pc, #36]	; (8007940 <siprintf+0x38>)
 800791a:	9107      	str	r1, [sp, #28]
 800791c:	9104      	str	r1, [sp, #16]
 800791e:	4909      	ldr	r1, [pc, #36]	; (8007944 <siprintf+0x3c>)
 8007920:	f853 2b04 	ldr.w	r2, [r3], #4
 8007924:	9105      	str	r1, [sp, #20]
 8007926:	6800      	ldr	r0, [r0, #0]
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	a902      	add	r1, sp, #8
 800792c:	f000 f8c2 	bl	8007ab4 <_svfiprintf_r>
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	b01c      	add	sp, #112	; 0x70
 8007938:	f85d eb04 	ldr.w	lr, [sp], #4
 800793c:	b003      	add	sp, #12
 800793e:	4770      	bx	lr
 8007940:	2000009c 	.word	0x2000009c
 8007944:	ffff0208 	.word	0xffff0208

08007948 <siscanf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	b530      	push	{r4, r5, lr}
 800794c:	b09c      	sub	sp, #112	; 0x70
 800794e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007950:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007954:	f854 5b04 	ldr.w	r5, [r4], #4
 8007958:	f8ad 2014 	strh.w	r2, [sp, #20]
 800795c:	9002      	str	r0, [sp, #8]
 800795e:	9006      	str	r0, [sp, #24]
 8007960:	f7f8 fc56 	bl	8000210 <strlen>
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <siscanf+0x4c>)
 8007966:	9003      	str	r0, [sp, #12]
 8007968:	9007      	str	r0, [sp, #28]
 800796a:	930b      	str	r3, [sp, #44]	; 0x2c
 800796c:	480a      	ldr	r0, [pc, #40]	; (8007998 <siscanf+0x50>)
 800796e:	9401      	str	r4, [sp, #4]
 8007970:	2300      	movs	r3, #0
 8007972:	930f      	str	r3, [sp, #60]	; 0x3c
 8007974:	9314      	str	r3, [sp, #80]	; 0x50
 8007976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800797a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800797e:	462a      	mov	r2, r5
 8007980:	4623      	mov	r3, r4
 8007982:	a902      	add	r1, sp, #8
 8007984:	6800      	ldr	r0, [r0, #0]
 8007986:	f000 f9e7 	bl	8007d58 <__ssvfiscanf_r>
 800798a:	b01c      	add	sp, #112	; 0x70
 800798c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007990:	b003      	add	sp, #12
 8007992:	4770      	bx	lr
 8007994:	0800799d 	.word	0x0800799d
 8007998:	2000009c 	.word	0x2000009c

0800799c <__seofread>:
 800799c:	2000      	movs	r0, #0
 800799e:	4770      	bx	lr

080079a0 <strcat>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4603      	mov	r3, r0
 80079a4:	781a      	ldrb	r2, [r3, #0]
 80079a6:	1c5c      	adds	r4, r3, #1
 80079a8:	b93a      	cbnz	r2, 80079ba <strcat+0x1a>
 80079aa:	3b01      	subs	r3, #1
 80079ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d1f9      	bne.n	80079ac <strcat+0xc>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	4623      	mov	r3, r4
 80079bc:	e7f2      	b.n	80079a4 <strcat+0x4>
	...

080079c0 <_vsiprintf_r>:
 80079c0:	b500      	push	{lr}
 80079c2:	b09b      	sub	sp, #108	; 0x6c
 80079c4:	9100      	str	r1, [sp, #0]
 80079c6:	9104      	str	r1, [sp, #16]
 80079c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079cc:	9105      	str	r1, [sp, #20]
 80079ce:	9102      	str	r1, [sp, #8]
 80079d0:	4905      	ldr	r1, [pc, #20]	; (80079e8 <_vsiprintf_r+0x28>)
 80079d2:	9103      	str	r1, [sp, #12]
 80079d4:	4669      	mov	r1, sp
 80079d6:	f000 f86d 	bl	8007ab4 <_svfiprintf_r>
 80079da:	9b00      	ldr	r3, [sp, #0]
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	b01b      	add	sp, #108	; 0x6c
 80079e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80079e6:	bf00      	nop
 80079e8:	ffff0208 	.word	0xffff0208

080079ec <vsiprintf>:
 80079ec:	4613      	mov	r3, r2
 80079ee:	460a      	mov	r2, r1
 80079f0:	4601      	mov	r1, r0
 80079f2:	4802      	ldr	r0, [pc, #8]	; (80079fc <vsiprintf+0x10>)
 80079f4:	6800      	ldr	r0, [r0, #0]
 80079f6:	f7ff bfe3 	b.w	80079c0 <_vsiprintf_r>
 80079fa:	bf00      	nop
 80079fc:	2000009c 	.word	0x2000009c

08007a00 <__ssputs_r>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	688e      	ldr	r6, [r1, #8]
 8007a06:	429e      	cmp	r6, r3
 8007a08:	4682      	mov	sl, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	4699      	mov	r9, r3
 8007a10:	d837      	bhi.n	8007a82 <__ssputs_r+0x82>
 8007a12:	898a      	ldrh	r2, [r1, #12]
 8007a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a18:	d031      	beq.n	8007a7e <__ssputs_r+0x7e>
 8007a1a:	6825      	ldr	r5, [r4, #0]
 8007a1c:	6909      	ldr	r1, [r1, #16]
 8007a1e:	1a6f      	subs	r7, r5, r1
 8007a20:	6965      	ldr	r5, [r4, #20]
 8007a22:	2302      	movs	r3, #2
 8007a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a28:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a2c:	f109 0301 	add.w	r3, r9, #1
 8007a30:	443b      	add	r3, r7
 8007a32:	429d      	cmp	r5, r3
 8007a34:	bf38      	it	cc
 8007a36:	461d      	movcc	r5, r3
 8007a38:	0553      	lsls	r3, r2, #21
 8007a3a:	d530      	bpl.n	8007a9e <__ssputs_r+0x9e>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f000 ffd7 	bl	80089f0 <_malloc_r>
 8007a42:	4606      	mov	r6, r0
 8007a44:	b950      	cbnz	r0, 8007a5c <__ssputs_r+0x5c>
 8007a46:	230c      	movs	r3, #12
 8007a48:	f8ca 3000 	str.w	r3, [sl]
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	6921      	ldr	r1, [r4, #16]
 8007a60:	f000 ff54 	bl	800890c <memcpy>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	6126      	str	r6, [r4, #16]
 8007a72:	6165      	str	r5, [r4, #20]
 8007a74:	443e      	add	r6, r7
 8007a76:	1bed      	subs	r5, r5, r7
 8007a78:	6026      	str	r6, [r4, #0]
 8007a7a:	60a5      	str	r5, [r4, #8]
 8007a7c:	464e      	mov	r6, r9
 8007a7e:	454e      	cmp	r6, r9
 8007a80:	d900      	bls.n	8007a84 <__ssputs_r+0x84>
 8007a82:	464e      	mov	r6, r9
 8007a84:	4632      	mov	r2, r6
 8007a86:	4641      	mov	r1, r8
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	f000 ff4a 	bl	8008922 <memmove>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	1b9b      	subs	r3, r3, r6
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	441e      	add	r6, r3
 8007a98:	6026      	str	r6, [r4, #0]
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e7dc      	b.n	8007a58 <__ssputs_r+0x58>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	f001 f800 	bl	8008aa4 <_realloc_r>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d1e2      	bne.n	8007a70 <__ssputs_r+0x70>
 8007aaa:	6921      	ldr	r1, [r4, #16]
 8007aac:	4650      	mov	r0, sl
 8007aae:	f000 ff51 	bl	8008954 <_free_r>
 8007ab2:	e7c8      	b.n	8007a46 <__ssputs_r+0x46>

08007ab4 <_svfiprintf_r>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	461d      	mov	r5, r3
 8007aba:	898b      	ldrh	r3, [r1, #12]
 8007abc:	061f      	lsls	r7, r3, #24
 8007abe:	b09d      	sub	sp, #116	; 0x74
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	d50f      	bpl.n	8007ae8 <_svfiprintf_r+0x34>
 8007ac8:	690b      	ldr	r3, [r1, #16]
 8007aca:	b96b      	cbnz	r3, 8007ae8 <_svfiprintf_r+0x34>
 8007acc:	2140      	movs	r1, #64	; 0x40
 8007ace:	f000 ff8f 	bl	80089f0 <_malloc_r>
 8007ad2:	6020      	str	r0, [r4, #0]
 8007ad4:	6120      	str	r0, [r4, #16]
 8007ad6:	b928      	cbnz	r0, 8007ae4 <_svfiprintf_r+0x30>
 8007ad8:	230c      	movs	r3, #12
 8007ada:	f8c8 3000 	str.w	r3, [r8]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	e0c8      	b.n	8007c76 <_svfiprintf_r+0x1c2>
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	6163      	str	r3, [r4, #20]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	2320      	movs	r3, #32
 8007aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af2:	2330      	movs	r3, #48	; 0x30
 8007af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af8:	9503      	str	r5, [sp, #12]
 8007afa:	f04f 0b01 	mov.w	fp, #1
 8007afe:	4637      	mov	r7, r6
 8007b00:	463d      	mov	r5, r7
 8007b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b06:	b10b      	cbz	r3, 8007b0c <_svfiprintf_r+0x58>
 8007b08:	2b25      	cmp	r3, #37	; 0x25
 8007b0a:	d13e      	bne.n	8007b8a <_svfiprintf_r+0xd6>
 8007b0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b10:	d00b      	beq.n	8007b2a <_svfiprintf_r+0x76>
 8007b12:	4653      	mov	r3, sl
 8007b14:	4632      	mov	r2, r6
 8007b16:	4621      	mov	r1, r4
 8007b18:	4640      	mov	r0, r8
 8007b1a:	f7ff ff71 	bl	8007a00 <__ssputs_r>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f000 80a4 	beq.w	8007c6c <_svfiprintf_r+0x1b8>
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	4453      	add	r3, sl
 8007b28:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2a:	783b      	ldrb	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 809d 	beq.w	8007c6c <_svfiprintf_r+0x1b8>
 8007b32:	2300      	movs	r3, #0
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295
 8007b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b44:	931a      	str	r3, [sp, #104]	; 0x68
 8007b46:	462f      	mov	r7, r5
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b4e:	4850      	ldr	r0, [pc, #320]	; (8007c90 <_svfiprintf_r+0x1dc>)
 8007b50:	f7f8 fb66 	bl	8000220 <memchr>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	b9d0      	cbnz	r0, 8007b8e <_svfiprintf_r+0xda>
 8007b58:	06d9      	lsls	r1, r3, #27
 8007b5a:	bf44      	itt	mi
 8007b5c:	2220      	movmi	r2, #32
 8007b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b62:	071a      	lsls	r2, r3, #28
 8007b64:	bf44      	itt	mi
 8007b66:	222b      	movmi	r2, #43	; 0x2b
 8007b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b6c:	782a      	ldrb	r2, [r5, #0]
 8007b6e:	2a2a      	cmp	r2, #42	; 0x2a
 8007b70:	d015      	beq.n	8007b9e <_svfiprintf_r+0xea>
 8007b72:	9a07      	ldr	r2, [sp, #28]
 8007b74:	462f      	mov	r7, r5
 8007b76:	2000      	movs	r0, #0
 8007b78:	250a      	movs	r5, #10
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94d      	bls.n	8007c22 <_svfiprintf_r+0x16e>
 8007b86:	b1b8      	cbz	r0, 8007bb8 <_svfiprintf_r+0x104>
 8007b88:	e00f      	b.n	8007baa <_svfiprintf_r+0xf6>
 8007b8a:	462f      	mov	r7, r5
 8007b8c:	e7b8      	b.n	8007b00 <_svfiprintf_r+0x4c>
 8007b8e:	4a40      	ldr	r2, [pc, #256]	; (8007c90 <_svfiprintf_r+0x1dc>)
 8007b90:	1a80      	subs	r0, r0, r2
 8007b92:	fa0b f000 	lsl.w	r0, fp, r0
 8007b96:	4318      	orrs	r0, r3
 8007b98:	9004      	str	r0, [sp, #16]
 8007b9a:	463d      	mov	r5, r7
 8007b9c:	e7d3      	b.n	8007b46 <_svfiprintf_r+0x92>
 8007b9e:	9a03      	ldr	r2, [sp, #12]
 8007ba0:	1d11      	adds	r1, r2, #4
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	db01      	blt.n	8007bae <_svfiprintf_r+0xfa>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e004      	b.n	8007bb8 <_svfiprintf_r+0x104>
 8007bae:	4252      	negs	r2, r2
 8007bb0:	f043 0302 	orr.w	r3, r3, #2
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	783b      	ldrb	r3, [r7, #0]
 8007bba:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbc:	d10c      	bne.n	8007bd8 <_svfiprintf_r+0x124>
 8007bbe:	787b      	ldrb	r3, [r7, #1]
 8007bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc2:	d133      	bne.n	8007c2c <_svfiprintf_r+0x178>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd4:	3702      	adds	r7, #2
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	4d2e      	ldr	r5, [pc, #184]	; (8007c94 <_svfiprintf_r+0x1e0>)
 8007bda:	7839      	ldrb	r1, [r7, #0]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7f8 fb1e 	bl	8000220 <memchr>
 8007be4:	b138      	cbz	r0, 8007bf6 <_svfiprintf_r+0x142>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	1b40      	subs	r0, r0, r5
 8007bea:	fa03 f000 	lsl.w	r0, r3, r0
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	4303      	orrs	r3, r0
 8007bf2:	3701      	adds	r7, #1
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	7839      	ldrb	r1, [r7, #0]
 8007bf8:	4827      	ldr	r0, [pc, #156]	; (8007c98 <_svfiprintf_r+0x1e4>)
 8007bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bfe:	2206      	movs	r2, #6
 8007c00:	1c7e      	adds	r6, r7, #1
 8007c02:	f7f8 fb0d 	bl	8000220 <memchr>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d038      	beq.n	8007c7c <_svfiprintf_r+0x1c8>
 8007c0a:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <_svfiprintf_r+0x1e8>)
 8007c0c:	bb13      	cbnz	r3, 8007c54 <_svfiprintf_r+0x1a0>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	3307      	adds	r3, #7
 8007c12:	f023 0307 	bic.w	r3, r3, #7
 8007c16:	3308      	adds	r3, #8
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	444b      	add	r3, r9
 8007c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c20:	e76d      	b.n	8007afe <_svfiprintf_r+0x4a>
 8007c22:	fb05 3202 	mla	r2, r5, r2, r3
 8007c26:	2001      	movs	r0, #1
 8007c28:	460f      	mov	r7, r1
 8007c2a:	e7a6      	b.n	8007b7a <_svfiprintf_r+0xc6>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	3701      	adds	r7, #1
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	4619      	mov	r1, r3
 8007c34:	250a      	movs	r5, #10
 8007c36:	4638      	mov	r0, r7
 8007c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c3c:	3a30      	subs	r2, #48	; 0x30
 8007c3e:	2a09      	cmp	r2, #9
 8007c40:	d903      	bls.n	8007c4a <_svfiprintf_r+0x196>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c8      	beq.n	8007bd8 <_svfiprintf_r+0x124>
 8007c46:	9105      	str	r1, [sp, #20]
 8007c48:	e7c6      	b.n	8007bd8 <_svfiprintf_r+0x124>
 8007c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4607      	mov	r7, r0
 8007c52:	e7f0      	b.n	8007c36 <_svfiprintf_r+0x182>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <_svfiprintf_r+0x1ec>)
 8007c5c:	a904      	add	r1, sp, #16
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f3af 8000 	nop.w
 8007c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c68:	4681      	mov	r9, r0
 8007c6a:	d1d6      	bne.n	8007c1a <_svfiprintf_r+0x166>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	065b      	lsls	r3, r3, #25
 8007c70:	f53f af35 	bmi.w	8007ade <_svfiprintf_r+0x2a>
 8007c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c76:	b01d      	add	sp, #116	; 0x74
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	ab03      	add	r3, sp, #12
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4622      	mov	r2, r4
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <_svfiprintf_r+0x1ec>)
 8007c84:	a904      	add	r1, sp, #16
 8007c86:	4640      	mov	r0, r8
 8007c88:	f000 fa2c 	bl	80080e4 <_printf_i>
 8007c8c:	e7ea      	b.n	8007c64 <_svfiprintf_r+0x1b0>
 8007c8e:	bf00      	nop
 8007c90:	08008bbc 	.word	0x08008bbc
 8007c94:	08008bc2 	.word	0x08008bc2
 8007c98:	08008bc6 	.word	0x08008bc6
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	08007a01 	.word	0x08007a01

08007ca4 <_sungetc_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	1c4b      	adds	r3, r1, #1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	d103      	bne.n	8007cb4 <_sungetc_r+0x10>
 8007cac:	f04f 35ff 	mov.w	r5, #4294967295
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	8993      	ldrh	r3, [r2, #12]
 8007cb6:	f023 0320 	bic.w	r3, r3, #32
 8007cba:	8193      	strh	r3, [r2, #12]
 8007cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cbe:	6852      	ldr	r2, [r2, #4]
 8007cc0:	b2cd      	uxtb	r5, r1
 8007cc2:	b18b      	cbz	r3, 8007ce8 <_sungetc_r+0x44>
 8007cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	dd08      	ble.n	8007cdc <_sungetc_r+0x38>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	1e5a      	subs	r2, r3, #1
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	e7e9      	b.n	8007cb0 <_sungetc_r+0xc>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f000 fdb7 	bl	8008850 <__submore>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0f1      	beq.n	8007cca <_sungetc_r+0x26>
 8007ce6:	e7e1      	b.n	8007cac <_sungetc_r+0x8>
 8007ce8:	6921      	ldr	r1, [r4, #16]
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	b151      	cbz	r1, 8007d04 <_sungetc_r+0x60>
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	d208      	bcs.n	8007d04 <_sungetc_r+0x60>
 8007cf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007cf6:	42a9      	cmp	r1, r5
 8007cf8:	d104      	bne.n	8007d04 <_sungetc_r+0x60>
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	3201      	adds	r2, #1
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	6062      	str	r2, [r4, #4]
 8007d02:	e7d5      	b.n	8007cb0 <_sungetc_r+0xc>
 8007d04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0e:	2303      	movs	r3, #3
 8007d10:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d12:	4623      	mov	r3, r4
 8007d14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e7dc      	b.n	8007cd8 <_sungetc_r+0x34>

08007d1e <__ssrefill_r>:
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d24:	b169      	cbz	r1, 8007d42 <__ssrefill_r+0x24>
 8007d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	d001      	beq.n	8007d32 <__ssrefill_r+0x14>
 8007d2e:	f000 fe11 	bl	8008954 <_free_r>
 8007d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d34:	6063      	str	r3, [r4, #4]
 8007d36:	2000      	movs	r0, #0
 8007d38:	6360      	str	r0, [r4, #52]	; 0x34
 8007d3a:	b113      	cbz	r3, 8007d42 <__ssrefill_r+0x24>
 8007d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0320 	orr.w	r3, r3, #32
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	f04f 30ff 	mov.w	r0, #4294967295
 8007d56:	e7f3      	b.n	8007d40 <__ssrefill_r+0x22>

08007d58 <__ssvfiscanf_r>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007d60:	460c      	mov	r4, r1
 8007d62:	2100      	movs	r1, #0
 8007d64:	9144      	str	r1, [sp, #272]	; 0x110
 8007d66:	9145      	str	r1, [sp, #276]	; 0x114
 8007d68:	499f      	ldr	r1, [pc, #636]	; (8007fe8 <__ssvfiscanf_r+0x290>)
 8007d6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8007d6c:	f10d 0804 	add.w	r8, sp, #4
 8007d70:	499e      	ldr	r1, [pc, #632]	; (8007fec <__ssvfiscanf_r+0x294>)
 8007d72:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007ff0 <__ssvfiscanf_r+0x298>
 8007d76:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	4692      	mov	sl, r2
 8007d7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	270a      	movs	r7, #10
 8007d84:	f89a 3000 	ldrb.w	r3, [sl]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 812a 	beq.w	8007fe2 <__ssvfiscanf_r+0x28a>
 8007d8e:	4655      	mov	r5, sl
 8007d90:	f000 fd9c 	bl	80088cc <__locale_ctype_ptr>
 8007d94:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007d98:	4458      	add	r0, fp
 8007d9a:	7843      	ldrb	r3, [r0, #1]
 8007d9c:	f013 0308 	ands.w	r3, r3, #8
 8007da0:	d01c      	beq.n	8007ddc <__ssvfiscanf_r+0x84>
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dd12      	ble.n	8007dce <__ssvfiscanf_r+0x76>
 8007da8:	f000 fd90 	bl	80088cc <__locale_ctype_ptr>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	781a      	ldrb	r2, [r3, #0]
 8007db0:	4410      	add	r0, r2
 8007db2:	7842      	ldrb	r2, [r0, #1]
 8007db4:	0712      	lsls	r2, r2, #28
 8007db6:	d401      	bmi.n	8007dbc <__ssvfiscanf_r+0x64>
 8007db8:	46aa      	mov	sl, r5
 8007dba:	e7e3      	b.n	8007d84 <__ssvfiscanf_r+0x2c>
 8007dbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007dbe:	3201      	adds	r2, #1
 8007dc0:	9245      	str	r2, [sp, #276]	; 0x114
 8007dc2:	6862      	ldr	r2, [r4, #4]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	3a01      	subs	r2, #1
 8007dc8:	6062      	str	r2, [r4, #4]
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	e7e9      	b.n	8007da2 <__ssvfiscanf_r+0x4a>
 8007dce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4798      	blx	r3
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0e6      	beq.n	8007da8 <__ssvfiscanf_r+0x50>
 8007dda:	e7ed      	b.n	8007db8 <__ssvfiscanf_r+0x60>
 8007ddc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007de0:	f040 8082 	bne.w	8007ee8 <__ssvfiscanf_r+0x190>
 8007de4:	9343      	str	r3, [sp, #268]	; 0x10c
 8007de6:	9341      	str	r3, [sp, #260]	; 0x104
 8007de8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007dec:	2b2a      	cmp	r3, #42	; 0x2a
 8007dee:	d103      	bne.n	8007df8 <__ssvfiscanf_r+0xa0>
 8007df0:	2310      	movs	r3, #16
 8007df2:	9341      	str	r3, [sp, #260]	; 0x104
 8007df4:	f10a 0502 	add.w	r5, sl, #2
 8007df8:	46aa      	mov	sl, r5
 8007dfa:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007dfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007e02:	2a09      	cmp	r2, #9
 8007e04:	d922      	bls.n	8007e4c <__ssvfiscanf_r+0xf4>
 8007e06:	2203      	movs	r2, #3
 8007e08:	4879      	ldr	r0, [pc, #484]	; (8007ff0 <__ssvfiscanf_r+0x298>)
 8007e0a:	f7f8 fa09 	bl	8000220 <memchr>
 8007e0e:	b138      	cbz	r0, 8007e20 <__ssvfiscanf_r+0xc8>
 8007e10:	eba0 0309 	sub.w	r3, r0, r9
 8007e14:	2001      	movs	r0, #1
 8007e16:	4098      	lsls	r0, r3
 8007e18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e1a:	4318      	orrs	r0, r3
 8007e1c:	9041      	str	r0, [sp, #260]	; 0x104
 8007e1e:	46aa      	mov	sl, r5
 8007e20:	f89a 3000 	ldrb.w	r3, [sl]
 8007e24:	2b67      	cmp	r3, #103	; 0x67
 8007e26:	f10a 0501 	add.w	r5, sl, #1
 8007e2a:	d82b      	bhi.n	8007e84 <__ssvfiscanf_r+0x12c>
 8007e2c:	2b65      	cmp	r3, #101	; 0x65
 8007e2e:	f080 809f 	bcs.w	8007f70 <__ssvfiscanf_r+0x218>
 8007e32:	2b47      	cmp	r3, #71	; 0x47
 8007e34:	d810      	bhi.n	8007e58 <__ssvfiscanf_r+0x100>
 8007e36:	2b45      	cmp	r3, #69	; 0x45
 8007e38:	f080 809a 	bcs.w	8007f70 <__ssvfiscanf_r+0x218>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d06c      	beq.n	8007f1a <__ssvfiscanf_r+0x1c2>
 8007e40:	2b25      	cmp	r3, #37	; 0x25
 8007e42:	d051      	beq.n	8007ee8 <__ssvfiscanf_r+0x190>
 8007e44:	2303      	movs	r3, #3
 8007e46:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e48:	9742      	str	r7, [sp, #264]	; 0x108
 8007e4a:	e027      	b.n	8007e9c <__ssvfiscanf_r+0x144>
 8007e4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007e4e:	fb07 1303 	mla	r3, r7, r3, r1
 8007e52:	3b30      	subs	r3, #48	; 0x30
 8007e54:	9343      	str	r3, [sp, #268]	; 0x10c
 8007e56:	e7cf      	b.n	8007df8 <__ssvfiscanf_r+0xa0>
 8007e58:	2b5b      	cmp	r3, #91	; 0x5b
 8007e5a:	d06a      	beq.n	8007f32 <__ssvfiscanf_r+0x1da>
 8007e5c:	d80c      	bhi.n	8007e78 <__ssvfiscanf_r+0x120>
 8007e5e:	2b58      	cmp	r3, #88	; 0x58
 8007e60:	d1f0      	bne.n	8007e44 <__ssvfiscanf_r+0xec>
 8007e62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e68:	9241      	str	r2, [sp, #260]	; 0x104
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	9242      	str	r2, [sp, #264]	; 0x108
 8007e6e:	2b6e      	cmp	r3, #110	; 0x6e
 8007e70:	bf8c      	ite	hi
 8007e72:	2304      	movhi	r3, #4
 8007e74:	2303      	movls	r3, #3
 8007e76:	e010      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007e78:	2b63      	cmp	r3, #99	; 0x63
 8007e7a:	d065      	beq.n	8007f48 <__ssvfiscanf_r+0x1f0>
 8007e7c:	2b64      	cmp	r3, #100	; 0x64
 8007e7e:	d1e1      	bne.n	8007e44 <__ssvfiscanf_r+0xec>
 8007e80:	9742      	str	r7, [sp, #264]	; 0x108
 8007e82:	e7f4      	b.n	8007e6e <__ssvfiscanf_r+0x116>
 8007e84:	2b70      	cmp	r3, #112	; 0x70
 8007e86:	d04b      	beq.n	8007f20 <__ssvfiscanf_r+0x1c8>
 8007e88:	d826      	bhi.n	8007ed8 <__ssvfiscanf_r+0x180>
 8007e8a:	2b6e      	cmp	r3, #110	; 0x6e
 8007e8c:	d062      	beq.n	8007f54 <__ssvfiscanf_r+0x1fc>
 8007e8e:	d84c      	bhi.n	8007f2a <__ssvfiscanf_r+0x1d2>
 8007e90:	2b69      	cmp	r3, #105	; 0x69
 8007e92:	d1d7      	bne.n	8007e44 <__ssvfiscanf_r+0xec>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9342      	str	r3, [sp, #264]	; 0x108
 8007e98:	2303      	movs	r3, #3
 8007e9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd68      	ble.n	8007f74 <__ssvfiscanf_r+0x21c>
 8007ea2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ea4:	0659      	lsls	r1, r3, #25
 8007ea6:	d407      	bmi.n	8007eb8 <__ssvfiscanf_r+0x160>
 8007ea8:	f000 fd10 	bl	80088cc <__locale_ctype_ptr>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	4410      	add	r0, r2
 8007eb2:	7842      	ldrb	r2, [r0, #1]
 8007eb4:	0712      	lsls	r2, r2, #28
 8007eb6:	d464      	bmi.n	8007f82 <__ssvfiscanf_r+0x22a>
 8007eb8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	dc73      	bgt.n	8007fa6 <__ssvfiscanf_r+0x24e>
 8007ebe:	466b      	mov	r3, sp
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	a941      	add	r1, sp, #260	; 0x104
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 fa1f 	bl	8008308 <_scanf_chars>
 8007eca:	2801      	cmp	r0, #1
 8007ecc:	f000 8089 	beq.w	8007fe2 <__ssvfiscanf_r+0x28a>
 8007ed0:	2802      	cmp	r0, #2
 8007ed2:	f47f af71 	bne.w	8007db8 <__ssvfiscanf_r+0x60>
 8007ed6:	e01d      	b.n	8007f14 <__ssvfiscanf_r+0x1bc>
 8007ed8:	2b75      	cmp	r3, #117	; 0x75
 8007eda:	d0d1      	beq.n	8007e80 <__ssvfiscanf_r+0x128>
 8007edc:	2b78      	cmp	r3, #120	; 0x78
 8007ede:	d0c0      	beq.n	8007e62 <__ssvfiscanf_r+0x10a>
 8007ee0:	2b73      	cmp	r3, #115	; 0x73
 8007ee2:	d1af      	bne.n	8007e44 <__ssvfiscanf_r+0xec>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e7d8      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dd0c      	ble.n	8007f08 <__ssvfiscanf_r+0x1b0>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	455a      	cmp	r2, fp
 8007ef4:	d175      	bne.n	8007fe2 <__ssvfiscanf_r+0x28a>
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	6862      	ldr	r2, [r4, #4]
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007efe:	3a01      	subs	r2, #1
 8007f00:	3301      	adds	r3, #1
 8007f02:	6062      	str	r2, [r4, #4]
 8007f04:	9345      	str	r3, [sp, #276]	; 0x114
 8007f06:	e757      	b.n	8007db8 <__ssvfiscanf_r+0x60>
 8007f08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4798      	blx	r3
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0ec      	beq.n	8007eee <__ssvfiscanf_r+0x196>
 8007f14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d159      	bne.n	8007fce <__ssvfiscanf_r+0x276>
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	e05c      	b.n	8007fda <__ssvfiscanf_r+0x282>
 8007f20:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007f22:	f042 0220 	orr.w	r2, r2, #32
 8007f26:	9241      	str	r2, [sp, #260]	; 0x104
 8007f28:	e79b      	b.n	8007e62 <__ssvfiscanf_r+0x10a>
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	9342      	str	r3, [sp, #264]	; 0x108
 8007f2e:	2304      	movs	r3, #4
 8007f30:	e7b3      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4640      	mov	r0, r8
 8007f36:	f000 fb3f 	bl	80085b8 <__sccl>
 8007f3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f40:	9341      	str	r3, [sp, #260]	; 0x104
 8007f42:	4605      	mov	r5, r0
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7a8      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007f48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4e:	9341      	str	r3, [sp, #260]	; 0x104
 8007f50:	2300      	movs	r3, #0
 8007f52:	e7a2      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007f54:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007f56:	06c3      	lsls	r3, r0, #27
 8007f58:	f53f af2e 	bmi.w	8007db8 <__ssvfiscanf_r+0x60>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f60:	1d19      	adds	r1, r3, #4
 8007f62:	9100      	str	r1, [sp, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	07c0      	lsls	r0, r0, #31
 8007f68:	bf4c      	ite	mi
 8007f6a:	801a      	strhmi	r2, [r3, #0]
 8007f6c:	601a      	strpl	r2, [r3, #0]
 8007f6e:	e723      	b.n	8007db8 <__ssvfiscanf_r+0x60>
 8007f70:	2305      	movs	r3, #5
 8007f72:	e792      	b.n	8007e9a <__ssvfiscanf_r+0x142>
 8007f74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f76:	4621      	mov	r1, r4
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4798      	blx	r3
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d090      	beq.n	8007ea2 <__ssvfiscanf_r+0x14a>
 8007f80:	e7c8      	b.n	8007f14 <__ssvfiscanf_r+0x1bc>
 8007f82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f84:	3201      	adds	r2, #1
 8007f86:	9245      	str	r2, [sp, #276]	; 0x114
 8007f88:	6862      	ldr	r2, [r4, #4]
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	6062      	str	r2, [r4, #4]
 8007f90:	dd02      	ble.n	8007f98 <__ssvfiscanf_r+0x240>
 8007f92:	3301      	adds	r3, #1
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	e787      	b.n	8007ea8 <__ssvfiscanf_r+0x150>
 8007f98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4798      	blx	r3
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d081      	beq.n	8007ea8 <__ssvfiscanf_r+0x150>
 8007fa4:	e7b6      	b.n	8007f14 <__ssvfiscanf_r+0x1bc>
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	dc06      	bgt.n	8007fb8 <__ssvfiscanf_r+0x260>
 8007faa:	466b      	mov	r3, sp
 8007fac:	4622      	mov	r2, r4
 8007fae:	a941      	add	r1, sp, #260	; 0x104
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 fa0d 	bl	80083d0 <_scanf_i>
 8007fb6:	e788      	b.n	8007eca <__ssvfiscanf_r+0x172>
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <__ssvfiscanf_r+0x29c>)
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f aefc 	beq.w	8007db8 <__ssvfiscanf_r+0x60>
 8007fc0:	466b      	mov	r3, sp
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	a941      	add	r1, sp, #260	; 0x104
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f3af 8000 	nop.w
 8007fcc:	e77d      	b.n	8007eca <__ssvfiscanf_r+0x172>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007fd4:	bf18      	it	ne
 8007fd6:	f04f 30ff 	movne.w	r0, #4294967295
 8007fda:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007fe4:	e7f9      	b.n	8007fda <__ssvfiscanf_r+0x282>
 8007fe6:	bf00      	nop
 8007fe8:	08007ca5 	.word	0x08007ca5
 8007fec:	08007d1f 	.word	0x08007d1f
 8007ff0:	08008bc2 	.word	0x08008bc2
 8007ff4:	00000000 	.word	0x00000000

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4691      	mov	r9, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	4293      	cmp	r3, r2
 800800a:	bfb8      	it	lt
 800800c:	4613      	movlt	r3, r2
 800800e:	f8c9 3000 	str.w	r3, [r9]
 8008012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008016:	4606      	mov	r6, r0
 8008018:	460c      	mov	r4, r1
 800801a:	b112      	cbz	r2, 8008022 <_printf_common+0x2a>
 800801c:	3301      	adds	r3, #1
 800801e:	f8c9 3000 	str.w	r3, [r9]
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	0699      	lsls	r1, r3, #26
 8008026:	bf42      	ittt	mi
 8008028:	f8d9 3000 	ldrmi.w	r3, [r9]
 800802c:	3302      	addmi	r3, #2
 800802e:	f8c9 3000 	strmi.w	r3, [r9]
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	f015 0506 	ands.w	r5, r5, #6
 8008038:	d107      	bne.n	800804a <_printf_common+0x52>
 800803a:	f104 0a19 	add.w	sl, r4, #25
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	f8d9 2000 	ldr.w	r2, [r9]
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	42ab      	cmp	r3, r5
 8008048:	dc28      	bgt.n	800809c <_printf_common+0xa4>
 800804a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	3300      	adds	r3, #0
 8008052:	bf18      	it	ne
 8008054:	2301      	movne	r3, #1
 8008056:	0692      	lsls	r2, r2, #26
 8008058:	d42d      	bmi.n	80080b6 <_printf_common+0xbe>
 800805a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800805e:	4639      	mov	r1, r7
 8008060:	4630      	mov	r0, r6
 8008062:	47c0      	blx	r8
 8008064:	3001      	adds	r0, #1
 8008066:	d020      	beq.n	80080aa <_printf_common+0xb2>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	68e5      	ldr	r5, [r4, #12]
 800806c:	f8d9 2000 	ldr.w	r2, [r9]
 8008070:	f003 0306 	and.w	r3, r3, #6
 8008074:	2b04      	cmp	r3, #4
 8008076:	bf08      	it	eq
 8008078:	1aad      	subeq	r5, r5, r2
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	6922      	ldr	r2, [r4, #16]
 800807e:	bf0c      	ite	eq
 8008080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008084:	2500      	movne	r5, #0
 8008086:	4293      	cmp	r3, r2
 8008088:	bfc4      	itt	gt
 800808a:	1a9b      	subgt	r3, r3, r2
 800808c:	18ed      	addgt	r5, r5, r3
 800808e:	f04f 0900 	mov.w	r9, #0
 8008092:	341a      	adds	r4, #26
 8008094:	454d      	cmp	r5, r9
 8008096:	d11a      	bne.n	80080ce <_printf_common+0xd6>
 8008098:	2000      	movs	r0, #0
 800809a:	e008      	b.n	80080ae <_printf_common+0xb6>
 800809c:	2301      	movs	r3, #1
 800809e:	4652      	mov	r2, sl
 80080a0:	4639      	mov	r1, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	47c0      	blx	r8
 80080a6:	3001      	adds	r0, #1
 80080a8:	d103      	bne.n	80080b2 <_printf_common+0xba>
 80080aa:	f04f 30ff 	mov.w	r0, #4294967295
 80080ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b2:	3501      	adds	r5, #1
 80080b4:	e7c3      	b.n	800803e <_printf_common+0x46>
 80080b6:	18e1      	adds	r1, r4, r3
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	2030      	movs	r0, #48	; 0x30
 80080bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080c0:	4422      	add	r2, r4
 80080c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080ca:	3302      	adds	r3, #2
 80080cc:	e7c5      	b.n	800805a <_printf_common+0x62>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4622      	mov	r2, r4
 80080d2:	4639      	mov	r1, r7
 80080d4:	4630      	mov	r0, r6
 80080d6:	47c0      	blx	r8
 80080d8:	3001      	adds	r0, #1
 80080da:	d0e6      	beq.n	80080aa <_printf_common+0xb2>
 80080dc:	f109 0901 	add.w	r9, r9, #1
 80080e0:	e7d8      	b.n	8008094 <_printf_common+0x9c>
	...

080080e4 <_printf_i>:
 80080e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080ec:	460c      	mov	r4, r1
 80080ee:	7e09      	ldrb	r1, [r1, #24]
 80080f0:	b085      	sub	sp, #20
 80080f2:	296e      	cmp	r1, #110	; 0x6e
 80080f4:	4617      	mov	r7, r2
 80080f6:	4606      	mov	r6, r0
 80080f8:	4698      	mov	r8, r3
 80080fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080fc:	f000 80b3 	beq.w	8008266 <_printf_i+0x182>
 8008100:	d822      	bhi.n	8008148 <_printf_i+0x64>
 8008102:	2963      	cmp	r1, #99	; 0x63
 8008104:	d036      	beq.n	8008174 <_printf_i+0x90>
 8008106:	d80a      	bhi.n	800811e <_printf_i+0x3a>
 8008108:	2900      	cmp	r1, #0
 800810a:	f000 80b9 	beq.w	8008280 <_printf_i+0x19c>
 800810e:	2958      	cmp	r1, #88	; 0x58
 8008110:	f000 8083 	beq.w	800821a <_printf_i+0x136>
 8008114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008118:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800811c:	e032      	b.n	8008184 <_printf_i+0xa0>
 800811e:	2964      	cmp	r1, #100	; 0x64
 8008120:	d001      	beq.n	8008126 <_printf_i+0x42>
 8008122:	2969      	cmp	r1, #105	; 0x69
 8008124:	d1f6      	bne.n	8008114 <_printf_i+0x30>
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	0605      	lsls	r5, r0, #24
 800812c:	f103 0104 	add.w	r1, r3, #4
 8008130:	d52a      	bpl.n	8008188 <_printf_i+0xa4>
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da03      	bge.n	8008142 <_printf_i+0x5e>
 800813a:	222d      	movs	r2, #45	; 0x2d
 800813c:	425b      	negs	r3, r3
 800813e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008142:	486f      	ldr	r0, [pc, #444]	; (8008300 <_printf_i+0x21c>)
 8008144:	220a      	movs	r2, #10
 8008146:	e039      	b.n	80081bc <_printf_i+0xd8>
 8008148:	2973      	cmp	r1, #115	; 0x73
 800814a:	f000 809d 	beq.w	8008288 <_printf_i+0x1a4>
 800814e:	d808      	bhi.n	8008162 <_printf_i+0x7e>
 8008150:	296f      	cmp	r1, #111	; 0x6f
 8008152:	d020      	beq.n	8008196 <_printf_i+0xb2>
 8008154:	2970      	cmp	r1, #112	; 0x70
 8008156:	d1dd      	bne.n	8008114 <_printf_i+0x30>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	f043 0320 	orr.w	r3, r3, #32
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	e003      	b.n	800816a <_printf_i+0x86>
 8008162:	2975      	cmp	r1, #117	; 0x75
 8008164:	d017      	beq.n	8008196 <_printf_i+0xb2>
 8008166:	2978      	cmp	r1, #120	; 0x78
 8008168:	d1d4      	bne.n	8008114 <_printf_i+0x30>
 800816a:	2378      	movs	r3, #120	; 0x78
 800816c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008170:	4864      	ldr	r0, [pc, #400]	; (8008304 <_printf_i+0x220>)
 8008172:	e055      	b.n	8008220 <_printf_i+0x13c>
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	1d19      	adds	r1, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6011      	str	r1, [r2, #0]
 800817c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008184:	2301      	movs	r3, #1
 8008186:	e08c      	b.n	80082a2 <_printf_i+0x1be>
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6011      	str	r1, [r2, #0]
 800818c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008190:	bf18      	it	ne
 8008192:	b21b      	sxthne	r3, r3
 8008194:	e7cf      	b.n	8008136 <_printf_i+0x52>
 8008196:	6813      	ldr	r3, [r2, #0]
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1d18      	adds	r0, r3, #4
 800819c:	6010      	str	r0, [r2, #0]
 800819e:	0628      	lsls	r0, r5, #24
 80081a0:	d501      	bpl.n	80081a6 <_printf_i+0xc2>
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	e002      	b.n	80081ac <_printf_i+0xc8>
 80081a6:	0668      	lsls	r0, r5, #25
 80081a8:	d5fb      	bpl.n	80081a2 <_printf_i+0xbe>
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	4854      	ldr	r0, [pc, #336]	; (8008300 <_printf_i+0x21c>)
 80081ae:	296f      	cmp	r1, #111	; 0x6f
 80081b0:	bf14      	ite	ne
 80081b2:	220a      	movne	r2, #10
 80081b4:	2208      	moveq	r2, #8
 80081b6:	2100      	movs	r1, #0
 80081b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081bc:	6865      	ldr	r5, [r4, #4]
 80081be:	60a5      	str	r5, [r4, #8]
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	f2c0 8095 	blt.w	80082f0 <_printf_i+0x20c>
 80081c6:	6821      	ldr	r1, [r4, #0]
 80081c8:	f021 0104 	bic.w	r1, r1, #4
 80081cc:	6021      	str	r1, [r4, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d13d      	bne.n	800824e <_printf_i+0x16a>
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	f040 808e 	bne.w	80082f4 <_printf_i+0x210>
 80081d8:	4665      	mov	r5, ip
 80081da:	2a08      	cmp	r2, #8
 80081dc:	d10b      	bne.n	80081f6 <_printf_i+0x112>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	07db      	lsls	r3, r3, #31
 80081e2:	d508      	bpl.n	80081f6 <_printf_i+0x112>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	bfde      	ittt	le
 80081ec:	2330      	movle	r3, #48	; 0x30
 80081ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081f6:	ebac 0305 	sub.w	r3, ip, r5
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	f8cd 8000 	str.w	r8, [sp]
 8008200:	463b      	mov	r3, r7
 8008202:	aa03      	add	r2, sp, #12
 8008204:	4621      	mov	r1, r4
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff fef6 	bl	8007ff8 <_printf_common>
 800820c:	3001      	adds	r0, #1
 800820e:	d14d      	bne.n	80082ac <_printf_i+0x1c8>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	b005      	add	sp, #20
 8008216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821a:	4839      	ldr	r0, [pc, #228]	; (8008300 <_printf_i+0x21c>)
 800821c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008220:	6813      	ldr	r3, [r2, #0]
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	1d1d      	adds	r5, r3, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6015      	str	r5, [r2, #0]
 800822a:	060a      	lsls	r2, r1, #24
 800822c:	d50b      	bpl.n	8008246 <_printf_i+0x162>
 800822e:	07ca      	lsls	r2, r1, #31
 8008230:	bf44      	itt	mi
 8008232:	f041 0120 	orrmi.w	r1, r1, #32
 8008236:	6021      	strmi	r1, [r4, #0]
 8008238:	b91b      	cbnz	r3, 8008242 <_printf_i+0x15e>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	f022 0220 	bic.w	r2, r2, #32
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	2210      	movs	r2, #16
 8008244:	e7b7      	b.n	80081b6 <_printf_i+0xd2>
 8008246:	064d      	lsls	r5, r1, #25
 8008248:	bf48      	it	mi
 800824a:	b29b      	uxthmi	r3, r3
 800824c:	e7ef      	b.n	800822e <_printf_i+0x14a>
 800824e:	4665      	mov	r5, ip
 8008250:	fbb3 f1f2 	udiv	r1, r3, r2
 8008254:	fb02 3311 	mls	r3, r2, r1, r3
 8008258:	5cc3      	ldrb	r3, [r0, r3]
 800825a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800825e:	460b      	mov	r3, r1
 8008260:	2900      	cmp	r1, #0
 8008262:	d1f5      	bne.n	8008250 <_printf_i+0x16c>
 8008264:	e7b9      	b.n	80081da <_printf_i+0xf6>
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	6961      	ldr	r1, [r4, #20]
 800826c:	1d18      	adds	r0, r3, #4
 800826e:	6010      	str	r0, [r2, #0]
 8008270:	0628      	lsls	r0, r5, #24
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	d501      	bpl.n	800827a <_printf_i+0x196>
 8008276:	6019      	str	r1, [r3, #0]
 8008278:	e002      	b.n	8008280 <_printf_i+0x19c>
 800827a:	066a      	lsls	r2, r5, #25
 800827c:	d5fb      	bpl.n	8008276 <_printf_i+0x192>
 800827e:	8019      	strh	r1, [r3, #0]
 8008280:	2300      	movs	r3, #0
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	4665      	mov	r5, ip
 8008286:	e7b9      	b.n	80081fc <_printf_i+0x118>
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	681d      	ldr	r5, [r3, #0]
 8008290:	6862      	ldr	r2, [r4, #4]
 8008292:	2100      	movs	r1, #0
 8008294:	4628      	mov	r0, r5
 8008296:	f7f7 ffc3 	bl	8000220 <memchr>
 800829a:	b108      	cbz	r0, 80082a0 <_printf_i+0x1bc>
 800829c:	1b40      	subs	r0, r0, r5
 800829e:	6060      	str	r0, [r4, #4]
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	2300      	movs	r3, #0
 80082a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082aa:	e7a7      	b.n	80081fc <_printf_i+0x118>
 80082ac:	6923      	ldr	r3, [r4, #16]
 80082ae:	462a      	mov	r2, r5
 80082b0:	4639      	mov	r1, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	47c0      	blx	r8
 80082b6:	3001      	adds	r0, #1
 80082b8:	d0aa      	beq.n	8008210 <_printf_i+0x12c>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	079b      	lsls	r3, r3, #30
 80082be:	d413      	bmi.n	80082e8 <_printf_i+0x204>
 80082c0:	68e0      	ldr	r0, [r4, #12]
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	4298      	cmp	r0, r3
 80082c6:	bfb8      	it	lt
 80082c8:	4618      	movlt	r0, r3
 80082ca:	e7a3      	b.n	8008214 <_printf_i+0x130>
 80082cc:	2301      	movs	r3, #1
 80082ce:	464a      	mov	r2, r9
 80082d0:	4639      	mov	r1, r7
 80082d2:	4630      	mov	r0, r6
 80082d4:	47c0      	blx	r8
 80082d6:	3001      	adds	r0, #1
 80082d8:	d09a      	beq.n	8008210 <_printf_i+0x12c>
 80082da:	3501      	adds	r5, #1
 80082dc:	68e3      	ldr	r3, [r4, #12]
 80082de:	9a03      	ldr	r2, [sp, #12]
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	42ab      	cmp	r3, r5
 80082e4:	dcf2      	bgt.n	80082cc <_printf_i+0x1e8>
 80082e6:	e7eb      	b.n	80082c0 <_printf_i+0x1dc>
 80082e8:	2500      	movs	r5, #0
 80082ea:	f104 0919 	add.w	r9, r4, #25
 80082ee:	e7f5      	b.n	80082dc <_printf_i+0x1f8>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ac      	bne.n	800824e <_printf_i+0x16a>
 80082f4:	7803      	ldrb	r3, [r0, #0]
 80082f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fe:	e76c      	b.n	80081da <_printf_i+0xf6>
 8008300:	08008bcd 	.word	0x08008bcd
 8008304:	08008bde 	.word	0x08008bde

08008308 <_scanf_chars>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	4615      	mov	r5, r2
 800830e:	688a      	ldr	r2, [r1, #8]
 8008310:	4680      	mov	r8, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b932      	cbnz	r2, 8008324 <_scanf_chars+0x1c>
 8008316:	698a      	ldr	r2, [r1, #24]
 8008318:	2a00      	cmp	r2, #0
 800831a:	bf14      	ite	ne
 800831c:	f04f 32ff 	movne.w	r2, #4294967295
 8008320:	2201      	moveq	r2, #1
 8008322:	608a      	str	r2, [r1, #8]
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	06d1      	lsls	r1, r2, #27
 8008328:	bf5f      	itttt	pl
 800832a:	681a      	ldrpl	r2, [r3, #0]
 800832c:	1d11      	addpl	r1, r2, #4
 800832e:	6019      	strpl	r1, [r3, #0]
 8008330:	6817      	ldrpl	r7, [r2, #0]
 8008332:	2600      	movs	r6, #0
 8008334:	69a3      	ldr	r3, [r4, #24]
 8008336:	b1db      	cbz	r3, 8008370 <_scanf_chars+0x68>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <_scanf_chars+0x44>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	6962      	ldr	r2, [r4, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	5cd3      	ldrb	r3, [r2, r3]
 8008344:	b9a3      	cbnz	r3, 8008370 <_scanf_chars+0x68>
 8008346:	2e00      	cmp	r6, #0
 8008348:	d132      	bne.n	80083b0 <_scanf_chars+0xa8>
 800834a:	e006      	b.n	800835a <_scanf_chars+0x52>
 800834c:	2b02      	cmp	r3, #2
 800834e:	d007      	beq.n	8008360 <_scanf_chars+0x58>
 8008350:	2e00      	cmp	r6, #0
 8008352:	d12d      	bne.n	80083b0 <_scanf_chars+0xa8>
 8008354:	69a3      	ldr	r3, [r4, #24]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d12a      	bne.n	80083b0 <_scanf_chars+0xa8>
 800835a:	2001      	movs	r0, #1
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	f000 fab4 	bl	80088cc <__locale_ctype_ptr>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	4418      	add	r0, r3
 800836a:	7843      	ldrb	r3, [r0, #1]
 800836c:	071b      	lsls	r3, r3, #28
 800836e:	d4ef      	bmi.n	8008350 <_scanf_chars+0x48>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	06da      	lsls	r2, r3, #27
 8008374:	bf5e      	ittt	pl
 8008376:	682b      	ldrpl	r3, [r5, #0]
 8008378:	781b      	ldrbpl	r3, [r3, #0]
 800837a:	703b      	strbpl	r3, [r7, #0]
 800837c:	682a      	ldr	r2, [r5, #0]
 800837e:	686b      	ldr	r3, [r5, #4]
 8008380:	f102 0201 	add.w	r2, r2, #1
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	68a2      	ldr	r2, [r4, #8]
 8008388:	f103 33ff 	add.w	r3, r3, #4294967295
 800838c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008390:	606b      	str	r3, [r5, #4]
 8008392:	f106 0601 	add.w	r6, r6, #1
 8008396:	bf58      	it	pl
 8008398:	3701      	addpl	r7, #1
 800839a:	60a2      	str	r2, [r4, #8]
 800839c:	b142      	cbz	r2, 80083b0 <_scanf_chars+0xa8>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dcc8      	bgt.n	8008334 <_scanf_chars+0x2c>
 80083a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083a6:	4629      	mov	r1, r5
 80083a8:	4640      	mov	r0, r8
 80083aa:	4798      	blx	r3
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d0c1      	beq.n	8008334 <_scanf_chars+0x2c>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	f013 0310 	ands.w	r3, r3, #16
 80083b6:	d105      	bne.n	80083c4 <_scanf_chars+0xbc>
 80083b8:	68e2      	ldr	r2, [r4, #12]
 80083ba:	3201      	adds	r2, #1
 80083bc:	60e2      	str	r2, [r4, #12]
 80083be:	69a2      	ldr	r2, [r4, #24]
 80083c0:	b102      	cbz	r2, 80083c4 <_scanf_chars+0xbc>
 80083c2:	703b      	strb	r3, [r7, #0]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	441e      	add	r6, r3
 80083c8:	6126      	str	r6, [r4, #16]
 80083ca:	2000      	movs	r0, #0
 80083cc:	e7c6      	b.n	800835c <_scanf_chars+0x54>
	...

080083d0 <_scanf_i>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	469a      	mov	sl, r3
 80083d6:	4b74      	ldr	r3, [pc, #464]	; (80085a8 <_scanf_i+0x1d8>)
 80083d8:	460c      	mov	r4, r1
 80083da:	4683      	mov	fp, r0
 80083dc:	4616      	mov	r6, r2
 80083de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083e2:	b087      	sub	sp, #28
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	68a7      	ldr	r7, [r4, #8]
 80083e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083ec:	4b6f      	ldr	r3, [pc, #444]	; (80085ac <_scanf_i+0x1dc>)
 80083ee:	69a1      	ldr	r1, [r4, #24]
 80083f0:	4a6f      	ldr	r2, [pc, #444]	; (80085b0 <_scanf_i+0x1e0>)
 80083f2:	2903      	cmp	r1, #3
 80083f4:	bf08      	it	eq
 80083f6:	461a      	moveq	r2, r3
 80083f8:	1e7b      	subs	r3, r7, #1
 80083fa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80083fe:	bf84      	itt	hi
 8008400:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008404:	60a3      	strhi	r3, [r4, #8]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	9200      	str	r2, [sp, #0]
 800840a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800840e:	bf88      	it	hi
 8008410:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008414:	f104 091c 	add.w	r9, r4, #28
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bf8c      	ite	hi
 800841c:	197f      	addhi	r7, r7, r5
 800841e:	2700      	movls	r7, #0
 8008420:	464b      	mov	r3, r9
 8008422:	f04f 0800 	mov.w	r8, #0
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	6831      	ldr	r1, [r6, #0]
 800842a:	ab03      	add	r3, sp, #12
 800842c:	2202      	movs	r2, #2
 800842e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008432:	7809      	ldrb	r1, [r1, #0]
 8008434:	f7f7 fef4 	bl	8000220 <memchr>
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	b330      	cbz	r0, 800848a <_scanf_i+0xba>
 800843c:	f1b8 0f01 	cmp.w	r8, #1
 8008440:	d15a      	bne.n	80084f8 <_scanf_i+0x128>
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	b92a      	cbnz	r2, 8008452 <_scanf_i+0x82>
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	2108      	movs	r1, #8
 800844a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844e:	6061      	str	r1, [r4, #4]
 8008450:	6022      	str	r2, [r4, #0]
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	68a2      	ldr	r2, [r4, #8]
 800845c:	1e51      	subs	r1, r2, #1
 800845e:	60a1      	str	r1, [r4, #8]
 8008460:	b19a      	cbz	r2, 800848a <_scanf_i+0xba>
 8008462:	6832      	ldr	r2, [r6, #0]
 8008464:	1c51      	adds	r1, r2, #1
 8008466:	6031      	str	r1, [r6, #0]
 8008468:	7812      	ldrb	r2, [r2, #0]
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	1c5d      	adds	r5, r3, #1
 800846e:	6873      	ldr	r3, [r6, #4]
 8008470:	3b01      	subs	r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	6073      	str	r3, [r6, #4]
 8008476:	dc07      	bgt.n	8008488 <_scanf_i+0xb8>
 8008478:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800847c:	4631      	mov	r1, r6
 800847e:	4658      	mov	r0, fp
 8008480:	4798      	blx	r3
 8008482:	2800      	cmp	r0, #0
 8008484:	f040 8086 	bne.w	8008594 <_scanf_i+0x1c4>
 8008488:	462b      	mov	r3, r5
 800848a:	f108 0801 	add.w	r8, r8, #1
 800848e:	f1b8 0f03 	cmp.w	r8, #3
 8008492:	d1c8      	bne.n	8008426 <_scanf_i+0x56>
 8008494:	6862      	ldr	r2, [r4, #4]
 8008496:	b90a      	cbnz	r2, 800849c <_scanf_i+0xcc>
 8008498:	220a      	movs	r2, #10
 800849a:	6062      	str	r2, [r4, #4]
 800849c:	6862      	ldr	r2, [r4, #4]
 800849e:	4945      	ldr	r1, [pc, #276]	; (80085b4 <_scanf_i+0x1e4>)
 80084a0:	6960      	ldr	r0, [r4, #20]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	1a89      	subs	r1, r1, r2
 80084a6:	f000 f887 	bl	80085b8 <__sccl>
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	461d      	mov	r5, r3
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d03a      	beq.n	8008530 <_scanf_i+0x160>
 80084ba:	6831      	ldr	r1, [r6, #0]
 80084bc:	6960      	ldr	r0, [r4, #20]
 80084be:	f891 c000 	ldrb.w	ip, [r1]
 80084c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d032      	beq.n	8008530 <_scanf_i+0x160>
 80084ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80084ce:	d121      	bne.n	8008514 <_scanf_i+0x144>
 80084d0:	0510      	lsls	r0, r2, #20
 80084d2:	d51f      	bpl.n	8008514 <_scanf_i+0x144>
 80084d4:	f108 0801 	add.w	r8, r8, #1
 80084d8:	b117      	cbz	r7, 80084e0 <_scanf_i+0x110>
 80084da:	3301      	adds	r3, #1
 80084dc:	3f01      	subs	r7, #1
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	6873      	ldr	r3, [r6, #4]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	6073      	str	r3, [r6, #4]
 80084e8:	dd1b      	ble.n	8008522 <_scanf_i+0x152>
 80084ea:	6833      	ldr	r3, [r6, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	60a3      	str	r3, [r4, #8]
 80084f6:	e7dc      	b.n	80084b2 <_scanf_i+0xe2>
 80084f8:	f1b8 0f02 	cmp.w	r8, #2
 80084fc:	d1ad      	bne.n	800845a <_scanf_i+0x8a>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008504:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008508:	d1bf      	bne.n	800848a <_scanf_i+0xba>
 800850a:	2110      	movs	r1, #16
 800850c:	6061      	str	r1, [r4, #4]
 800850e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008512:	e7a1      	b.n	8008458 <_scanf_i+0x88>
 8008514:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008518:	6022      	str	r2, [r4, #0]
 800851a:	780b      	ldrb	r3, [r1, #0]
 800851c:	702b      	strb	r3, [r5, #0]
 800851e:	3501      	adds	r5, #1
 8008520:	e7de      	b.n	80084e0 <_scanf_i+0x110>
 8008522:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008526:	4631      	mov	r1, r6
 8008528:	4658      	mov	r0, fp
 800852a:	4798      	blx	r3
 800852c:	2800      	cmp	r0, #0
 800852e:	d0df      	beq.n	80084f0 <_scanf_i+0x120>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	05d9      	lsls	r1, r3, #23
 8008534:	d50c      	bpl.n	8008550 <_scanf_i+0x180>
 8008536:	454d      	cmp	r5, r9
 8008538:	d908      	bls.n	800854c <_scanf_i+0x17c>
 800853a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800853e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008542:	4632      	mov	r2, r6
 8008544:	4658      	mov	r0, fp
 8008546:	4798      	blx	r3
 8008548:	1e6f      	subs	r7, r5, #1
 800854a:	463d      	mov	r5, r7
 800854c:	454d      	cmp	r5, r9
 800854e:	d029      	beq.n	80085a4 <_scanf_i+0x1d4>
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	f012 0210 	ands.w	r2, r2, #16
 8008556:	d113      	bne.n	8008580 <_scanf_i+0x1b0>
 8008558:	702a      	strb	r2, [r5, #0]
 800855a:	6863      	ldr	r3, [r4, #4]
 800855c:	9e00      	ldr	r6, [sp, #0]
 800855e:	4649      	mov	r1, r9
 8008560:	4658      	mov	r0, fp
 8008562:	47b0      	blx	r6
 8008564:	f8da 3000 	ldr.w	r3, [sl]
 8008568:	6821      	ldr	r1, [r4, #0]
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	f8ca 2000 	str.w	r2, [sl]
 8008570:	f011 0f20 	tst.w	r1, #32
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	d010      	beq.n	800859a <_scanf_i+0x1ca>
 8008578:	6018      	str	r0, [r3, #0]
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	60e3      	str	r3, [r4, #12]
 8008580:	eba5 0509 	sub.w	r5, r5, r9
 8008584:	44a8      	add	r8, r5
 8008586:	6925      	ldr	r5, [r4, #16]
 8008588:	4445      	add	r5, r8
 800858a:	6125      	str	r5, [r4, #16]
 800858c:	2000      	movs	r0, #0
 800858e:	b007      	add	sp, #28
 8008590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008594:	f04f 0800 	mov.w	r8, #0
 8008598:	e7ca      	b.n	8008530 <_scanf_i+0x160>
 800859a:	07ca      	lsls	r2, r1, #31
 800859c:	bf4c      	ite	mi
 800859e:	8018      	strhmi	r0, [r3, #0]
 80085a0:	6018      	strpl	r0, [r3, #0]
 80085a2:	e7ea      	b.n	800857a <_scanf_i+0x1aa>
 80085a4:	2001      	movs	r0, #1
 80085a6:	e7f2      	b.n	800858e <_scanf_i+0x1be>
 80085a8:	08008b94 	.word	0x08008b94
 80085ac:	08008715 	.word	0x08008715
 80085b0:	0800882d 	.word	0x0800882d
 80085b4:	08008bff 	.word	0x08008bff

080085b8 <__sccl>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	780b      	ldrb	r3, [r1, #0]
 80085bc:	2b5e      	cmp	r3, #94	; 0x5e
 80085be:	bf13      	iteet	ne
 80085c0:	1c4a      	addne	r2, r1, #1
 80085c2:	1c8a      	addeq	r2, r1, #2
 80085c4:	784b      	ldrbeq	r3, [r1, #1]
 80085c6:	2100      	movne	r1, #0
 80085c8:	bf08      	it	eq
 80085ca:	2101      	moveq	r1, #1
 80085cc:	1e44      	subs	r4, r0, #1
 80085ce:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80085d2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80085d6:	42ac      	cmp	r4, r5
 80085d8:	d1fb      	bne.n	80085d2 <__sccl+0x1a>
 80085da:	b913      	cbnz	r3, 80085e2 <__sccl+0x2a>
 80085dc:	3a01      	subs	r2, #1
 80085de:	4610      	mov	r0, r2
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	f081 0401 	eor.w	r4, r1, #1
 80085e6:	54c4      	strb	r4, [r0, r3]
 80085e8:	1c51      	adds	r1, r2, #1
 80085ea:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80085ee:	2d2d      	cmp	r5, #45	; 0x2d
 80085f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80085f4:	460a      	mov	r2, r1
 80085f6:	d006      	beq.n	8008606 <__sccl+0x4e>
 80085f8:	2d5d      	cmp	r5, #93	; 0x5d
 80085fa:	d0f0      	beq.n	80085de <__sccl+0x26>
 80085fc:	b90d      	cbnz	r5, 8008602 <__sccl+0x4a>
 80085fe:	4632      	mov	r2, r6
 8008600:	e7ed      	b.n	80085de <__sccl+0x26>
 8008602:	462b      	mov	r3, r5
 8008604:	e7ef      	b.n	80085e6 <__sccl+0x2e>
 8008606:	780e      	ldrb	r6, [r1, #0]
 8008608:	2e5d      	cmp	r6, #93	; 0x5d
 800860a:	d0fa      	beq.n	8008602 <__sccl+0x4a>
 800860c:	42b3      	cmp	r3, r6
 800860e:	dcf8      	bgt.n	8008602 <__sccl+0x4a>
 8008610:	3301      	adds	r3, #1
 8008612:	429e      	cmp	r6, r3
 8008614:	54c4      	strb	r4, [r0, r3]
 8008616:	dcfb      	bgt.n	8008610 <__sccl+0x58>
 8008618:	3102      	adds	r1, #2
 800861a:	e7e6      	b.n	80085ea <__sccl+0x32>

0800861c <_strtol_l.isra.0>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	4680      	mov	r8, r0
 8008622:	4689      	mov	r9, r1
 8008624:	4692      	mov	sl, r2
 8008626:	461e      	mov	r6, r3
 8008628:	460f      	mov	r7, r1
 800862a:	463d      	mov	r5, r7
 800862c:	9808      	ldr	r0, [sp, #32]
 800862e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008632:	f000 f947 	bl	80088c4 <__locale_ctype_ptr_l>
 8008636:	4420      	add	r0, r4
 8008638:	7843      	ldrb	r3, [r0, #1]
 800863a:	f013 0308 	ands.w	r3, r3, #8
 800863e:	d132      	bne.n	80086a6 <_strtol_l.isra.0+0x8a>
 8008640:	2c2d      	cmp	r4, #45	; 0x2d
 8008642:	d132      	bne.n	80086aa <_strtol_l.isra.0+0x8e>
 8008644:	787c      	ldrb	r4, [r7, #1]
 8008646:	1cbd      	adds	r5, r7, #2
 8008648:	2201      	movs	r2, #1
 800864a:	2e00      	cmp	r6, #0
 800864c:	d05d      	beq.n	800870a <_strtol_l.isra.0+0xee>
 800864e:	2e10      	cmp	r6, #16
 8008650:	d109      	bne.n	8008666 <_strtol_l.isra.0+0x4a>
 8008652:	2c30      	cmp	r4, #48	; 0x30
 8008654:	d107      	bne.n	8008666 <_strtol_l.isra.0+0x4a>
 8008656:	782b      	ldrb	r3, [r5, #0]
 8008658:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800865c:	2b58      	cmp	r3, #88	; 0x58
 800865e:	d14f      	bne.n	8008700 <_strtol_l.isra.0+0xe4>
 8008660:	786c      	ldrb	r4, [r5, #1]
 8008662:	2610      	movs	r6, #16
 8008664:	3502      	adds	r5, #2
 8008666:	2a00      	cmp	r2, #0
 8008668:	bf14      	ite	ne
 800866a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800866e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008672:	2700      	movs	r7, #0
 8008674:	fbb1 fcf6 	udiv	ip, r1, r6
 8008678:	4638      	mov	r0, r7
 800867a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800867e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008682:	2b09      	cmp	r3, #9
 8008684:	d817      	bhi.n	80086b6 <_strtol_l.isra.0+0x9a>
 8008686:	461c      	mov	r4, r3
 8008688:	42a6      	cmp	r6, r4
 800868a:	dd23      	ble.n	80086d4 <_strtol_l.isra.0+0xb8>
 800868c:	1c7b      	adds	r3, r7, #1
 800868e:	d007      	beq.n	80086a0 <_strtol_l.isra.0+0x84>
 8008690:	4584      	cmp	ip, r0
 8008692:	d31c      	bcc.n	80086ce <_strtol_l.isra.0+0xb2>
 8008694:	d101      	bne.n	800869a <_strtol_l.isra.0+0x7e>
 8008696:	45a6      	cmp	lr, r4
 8008698:	db19      	blt.n	80086ce <_strtol_l.isra.0+0xb2>
 800869a:	fb00 4006 	mla	r0, r0, r6, r4
 800869e:	2701      	movs	r7, #1
 80086a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a4:	e7eb      	b.n	800867e <_strtol_l.isra.0+0x62>
 80086a6:	462f      	mov	r7, r5
 80086a8:	e7bf      	b.n	800862a <_strtol_l.isra.0+0xe>
 80086aa:	2c2b      	cmp	r4, #43	; 0x2b
 80086ac:	bf04      	itt	eq
 80086ae:	1cbd      	addeq	r5, r7, #2
 80086b0:	787c      	ldrbeq	r4, [r7, #1]
 80086b2:	461a      	mov	r2, r3
 80086b4:	e7c9      	b.n	800864a <_strtol_l.isra.0+0x2e>
 80086b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80086ba:	2b19      	cmp	r3, #25
 80086bc:	d801      	bhi.n	80086c2 <_strtol_l.isra.0+0xa6>
 80086be:	3c37      	subs	r4, #55	; 0x37
 80086c0:	e7e2      	b.n	8008688 <_strtol_l.isra.0+0x6c>
 80086c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80086c6:	2b19      	cmp	r3, #25
 80086c8:	d804      	bhi.n	80086d4 <_strtol_l.isra.0+0xb8>
 80086ca:	3c57      	subs	r4, #87	; 0x57
 80086cc:	e7dc      	b.n	8008688 <_strtol_l.isra.0+0x6c>
 80086ce:	f04f 37ff 	mov.w	r7, #4294967295
 80086d2:	e7e5      	b.n	80086a0 <_strtol_l.isra.0+0x84>
 80086d4:	1c7b      	adds	r3, r7, #1
 80086d6:	d108      	bne.n	80086ea <_strtol_l.isra.0+0xce>
 80086d8:	2322      	movs	r3, #34	; 0x22
 80086da:	f8c8 3000 	str.w	r3, [r8]
 80086de:	4608      	mov	r0, r1
 80086e0:	f1ba 0f00 	cmp.w	sl, #0
 80086e4:	d107      	bne.n	80086f6 <_strtol_l.isra.0+0xda>
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	b102      	cbz	r2, 80086ee <_strtol_l.isra.0+0xd2>
 80086ec:	4240      	negs	r0, r0
 80086ee:	f1ba 0f00 	cmp.w	sl, #0
 80086f2:	d0f8      	beq.n	80086e6 <_strtol_l.isra.0+0xca>
 80086f4:	b10f      	cbz	r7, 80086fa <_strtol_l.isra.0+0xde>
 80086f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80086fa:	f8ca 9000 	str.w	r9, [sl]
 80086fe:	e7f2      	b.n	80086e6 <_strtol_l.isra.0+0xca>
 8008700:	2430      	movs	r4, #48	; 0x30
 8008702:	2e00      	cmp	r6, #0
 8008704:	d1af      	bne.n	8008666 <_strtol_l.isra.0+0x4a>
 8008706:	2608      	movs	r6, #8
 8008708:	e7ad      	b.n	8008666 <_strtol_l.isra.0+0x4a>
 800870a:	2c30      	cmp	r4, #48	; 0x30
 800870c:	d0a3      	beq.n	8008656 <_strtol_l.isra.0+0x3a>
 800870e:	260a      	movs	r6, #10
 8008710:	e7a9      	b.n	8008666 <_strtol_l.isra.0+0x4a>
	...

08008714 <_strtol_r>:
 8008714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008716:	4c06      	ldr	r4, [pc, #24]	; (8008730 <_strtol_r+0x1c>)
 8008718:	4d06      	ldr	r5, [pc, #24]	; (8008734 <_strtol_r+0x20>)
 800871a:	6824      	ldr	r4, [r4, #0]
 800871c:	6a24      	ldr	r4, [r4, #32]
 800871e:	2c00      	cmp	r4, #0
 8008720:	bf08      	it	eq
 8008722:	462c      	moveq	r4, r5
 8008724:	9400      	str	r4, [sp, #0]
 8008726:	f7ff ff79 	bl	800861c <_strtol_l.isra.0>
 800872a:	b003      	add	sp, #12
 800872c:	bd30      	pop	{r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	2000009c 	.word	0x2000009c
 8008734:	20000100 	.word	0x20000100

08008738 <_strtoul_l.isra.0>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	4692      	mov	sl, r2
 8008742:	461e      	mov	r6, r3
 8008744:	460f      	mov	r7, r1
 8008746:	463d      	mov	r5, r7
 8008748:	9808      	ldr	r0, [sp, #32]
 800874a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800874e:	f000 f8b9 	bl	80088c4 <__locale_ctype_ptr_l>
 8008752:	4420      	add	r0, r4
 8008754:	7843      	ldrb	r3, [r0, #1]
 8008756:	f013 0308 	ands.w	r3, r3, #8
 800875a:	d130      	bne.n	80087be <_strtoul_l.isra.0+0x86>
 800875c:	2c2d      	cmp	r4, #45	; 0x2d
 800875e:	d130      	bne.n	80087c2 <_strtoul_l.isra.0+0x8a>
 8008760:	787c      	ldrb	r4, [r7, #1]
 8008762:	1cbd      	adds	r5, r7, #2
 8008764:	2101      	movs	r1, #1
 8008766:	2e00      	cmp	r6, #0
 8008768:	d05c      	beq.n	8008824 <_strtoul_l.isra.0+0xec>
 800876a:	2e10      	cmp	r6, #16
 800876c:	d109      	bne.n	8008782 <_strtoul_l.isra.0+0x4a>
 800876e:	2c30      	cmp	r4, #48	; 0x30
 8008770:	d107      	bne.n	8008782 <_strtoul_l.isra.0+0x4a>
 8008772:	782b      	ldrb	r3, [r5, #0]
 8008774:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008778:	2b58      	cmp	r3, #88	; 0x58
 800877a:	d14e      	bne.n	800881a <_strtoul_l.isra.0+0xe2>
 800877c:	786c      	ldrb	r4, [r5, #1]
 800877e:	2610      	movs	r6, #16
 8008780:	3502      	adds	r5, #2
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	2300      	movs	r3, #0
 8008788:	fbb2 f2f6 	udiv	r2, r2, r6
 800878c:	fb06 fc02 	mul.w	ip, r6, r2
 8008790:	ea6f 0c0c 	mvn.w	ip, ip
 8008794:	4618      	mov	r0, r3
 8008796:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800879a:	2f09      	cmp	r7, #9
 800879c:	d817      	bhi.n	80087ce <_strtoul_l.isra.0+0x96>
 800879e:	463c      	mov	r4, r7
 80087a0:	42a6      	cmp	r6, r4
 80087a2:	dd23      	ble.n	80087ec <_strtoul_l.isra.0+0xb4>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	db1e      	blt.n	80087e6 <_strtoul_l.isra.0+0xae>
 80087a8:	4282      	cmp	r2, r0
 80087aa:	d31c      	bcc.n	80087e6 <_strtoul_l.isra.0+0xae>
 80087ac:	d101      	bne.n	80087b2 <_strtoul_l.isra.0+0x7a>
 80087ae:	45a4      	cmp	ip, r4
 80087b0:	db19      	blt.n	80087e6 <_strtoul_l.isra.0+0xae>
 80087b2:	fb00 4006 	mla	r0, r0, r6, r4
 80087b6:	2301      	movs	r3, #1
 80087b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087bc:	e7eb      	b.n	8008796 <_strtoul_l.isra.0+0x5e>
 80087be:	462f      	mov	r7, r5
 80087c0:	e7c1      	b.n	8008746 <_strtoul_l.isra.0+0xe>
 80087c2:	2c2b      	cmp	r4, #43	; 0x2b
 80087c4:	bf04      	itt	eq
 80087c6:	1cbd      	addeq	r5, r7, #2
 80087c8:	787c      	ldrbeq	r4, [r7, #1]
 80087ca:	4619      	mov	r1, r3
 80087cc:	e7cb      	b.n	8008766 <_strtoul_l.isra.0+0x2e>
 80087ce:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80087d2:	2f19      	cmp	r7, #25
 80087d4:	d801      	bhi.n	80087da <_strtoul_l.isra.0+0xa2>
 80087d6:	3c37      	subs	r4, #55	; 0x37
 80087d8:	e7e2      	b.n	80087a0 <_strtoul_l.isra.0+0x68>
 80087da:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80087de:	2f19      	cmp	r7, #25
 80087e0:	d804      	bhi.n	80087ec <_strtoul_l.isra.0+0xb4>
 80087e2:	3c57      	subs	r4, #87	; 0x57
 80087e4:	e7dc      	b.n	80087a0 <_strtoul_l.isra.0+0x68>
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ea:	e7e5      	b.n	80087b8 <_strtoul_l.isra.0+0x80>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da09      	bge.n	8008804 <_strtoul_l.isra.0+0xcc>
 80087f0:	2322      	movs	r3, #34	; 0x22
 80087f2:	f8c8 3000 	str.w	r3, [r8]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	f1ba 0f00 	cmp.w	sl, #0
 80087fe:	d107      	bne.n	8008810 <_strtoul_l.isra.0+0xd8>
 8008800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008804:	b101      	cbz	r1, 8008808 <_strtoul_l.isra.0+0xd0>
 8008806:	4240      	negs	r0, r0
 8008808:	f1ba 0f00 	cmp.w	sl, #0
 800880c:	d0f8      	beq.n	8008800 <_strtoul_l.isra.0+0xc8>
 800880e:	b10b      	cbz	r3, 8008814 <_strtoul_l.isra.0+0xdc>
 8008810:	f105 39ff 	add.w	r9, r5, #4294967295
 8008814:	f8ca 9000 	str.w	r9, [sl]
 8008818:	e7f2      	b.n	8008800 <_strtoul_l.isra.0+0xc8>
 800881a:	2430      	movs	r4, #48	; 0x30
 800881c:	2e00      	cmp	r6, #0
 800881e:	d1b0      	bne.n	8008782 <_strtoul_l.isra.0+0x4a>
 8008820:	2608      	movs	r6, #8
 8008822:	e7ae      	b.n	8008782 <_strtoul_l.isra.0+0x4a>
 8008824:	2c30      	cmp	r4, #48	; 0x30
 8008826:	d0a4      	beq.n	8008772 <_strtoul_l.isra.0+0x3a>
 8008828:	260a      	movs	r6, #10
 800882a:	e7aa      	b.n	8008782 <_strtoul_l.isra.0+0x4a>

0800882c <_strtoul_r>:
 800882c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800882e:	4c06      	ldr	r4, [pc, #24]	; (8008848 <_strtoul_r+0x1c>)
 8008830:	4d06      	ldr	r5, [pc, #24]	; (800884c <_strtoul_r+0x20>)
 8008832:	6824      	ldr	r4, [r4, #0]
 8008834:	6a24      	ldr	r4, [r4, #32]
 8008836:	2c00      	cmp	r4, #0
 8008838:	bf08      	it	eq
 800883a:	462c      	moveq	r4, r5
 800883c:	9400      	str	r4, [sp, #0]
 800883e:	f7ff ff7b 	bl	8008738 <_strtoul_l.isra.0>
 8008842:	b003      	add	sp, #12
 8008844:	bd30      	pop	{r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	2000009c 	.word	0x2000009c
 800884c:	20000100 	.word	0x20000100

08008850 <__submore>:
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d11d      	bne.n	800889c <__submore+0x4c>
 8008860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008864:	f000 f8c4 	bl	80089f0 <_malloc_r>
 8008868:	b918      	cbnz	r0, 8008872 <__submore+0x22>
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008876:	63a3      	str	r3, [r4, #56]	; 0x38
 8008878:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800887c:	6360      	str	r0, [r4, #52]	; 0x34
 800887e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008886:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800888a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800888e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008892:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008896:	6020      	str	r0, [r4, #0]
 8008898:	2000      	movs	r0, #0
 800889a:	e7e8      	b.n	800886e <__submore+0x1e>
 800889c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800889e:	0077      	lsls	r7, r6, #1
 80088a0:	463a      	mov	r2, r7
 80088a2:	f000 f8ff 	bl	8008aa4 <_realloc_r>
 80088a6:	4605      	mov	r5, r0
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d0de      	beq.n	800886a <__submore+0x1a>
 80088ac:	eb00 0806 	add.w	r8, r0, r6
 80088b0:	4601      	mov	r1, r0
 80088b2:	4632      	mov	r2, r6
 80088b4:	4640      	mov	r0, r8
 80088b6:	f000 f829 	bl	800890c <memcpy>
 80088ba:	f8c4 8000 	str.w	r8, [r4]
 80088be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80088c2:	e7e9      	b.n	8008898 <__submore+0x48>

080088c4 <__locale_ctype_ptr_l>:
 80088c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80088c8:	4770      	bx	lr
	...

080088cc <__locale_ctype_ptr>:
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <__locale_ctype_ptr+0x14>)
 80088ce:	4a05      	ldr	r2, [pc, #20]	; (80088e4 <__locale_ctype_ptr+0x18>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bf08      	it	eq
 80088d8:	4613      	moveq	r3, r2
 80088da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80088de:	4770      	bx	lr
 80088e0:	2000009c 	.word	0x2000009c
 80088e4:	20000100 	.word	0x20000100

080088e8 <__ascii_mbtowc>:
 80088e8:	b082      	sub	sp, #8
 80088ea:	b901      	cbnz	r1, 80088ee <__ascii_mbtowc+0x6>
 80088ec:	a901      	add	r1, sp, #4
 80088ee:	b142      	cbz	r2, 8008902 <__ascii_mbtowc+0x1a>
 80088f0:	b14b      	cbz	r3, 8008906 <__ascii_mbtowc+0x1e>
 80088f2:	7813      	ldrb	r3, [r2, #0]
 80088f4:	600b      	str	r3, [r1, #0]
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	1c10      	adds	r0, r2, #0
 80088fa:	bf18      	it	ne
 80088fc:	2001      	movne	r0, #1
 80088fe:	b002      	add	sp, #8
 8008900:	4770      	bx	lr
 8008902:	4610      	mov	r0, r2
 8008904:	e7fb      	b.n	80088fe <__ascii_mbtowc+0x16>
 8008906:	f06f 0001 	mvn.w	r0, #1
 800890a:	e7f8      	b.n	80088fe <__ascii_mbtowc+0x16>

0800890c <memcpy>:
 800890c:	b510      	push	{r4, lr}
 800890e:	1e43      	subs	r3, r0, #1
 8008910:	440a      	add	r2, r1
 8008912:	4291      	cmp	r1, r2
 8008914:	d100      	bne.n	8008918 <memcpy+0xc>
 8008916:	bd10      	pop	{r4, pc}
 8008918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008920:	e7f7      	b.n	8008912 <memcpy+0x6>

08008922 <memmove>:
 8008922:	4288      	cmp	r0, r1
 8008924:	b510      	push	{r4, lr}
 8008926:	eb01 0302 	add.w	r3, r1, r2
 800892a:	d807      	bhi.n	800893c <memmove+0x1a>
 800892c:	1e42      	subs	r2, r0, #1
 800892e:	4299      	cmp	r1, r3
 8008930:	d00a      	beq.n	8008948 <memmove+0x26>
 8008932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008936:	f802 4f01 	strb.w	r4, [r2, #1]!
 800893a:	e7f8      	b.n	800892e <memmove+0xc>
 800893c:	4283      	cmp	r3, r0
 800893e:	d9f5      	bls.n	800892c <memmove+0xa>
 8008940:	1881      	adds	r1, r0, r2
 8008942:	1ad2      	subs	r2, r2, r3
 8008944:	42d3      	cmn	r3, r2
 8008946:	d100      	bne.n	800894a <memmove+0x28>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800894e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008952:	e7f7      	b.n	8008944 <memmove+0x22>

08008954 <_free_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	2900      	cmp	r1, #0
 800895a:	d045      	beq.n	80089e8 <_free_r+0x94>
 800895c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008960:	1f0c      	subs	r4, r1, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfb8      	it	lt
 8008966:	18e4      	addlt	r4, r4, r3
 8008968:	f000 f8df 	bl	8008b2a <__malloc_lock>
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <_free_r+0x98>)
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	4610      	mov	r0, r2
 8008972:	b933      	cbnz	r3, 8008982 <_free_r+0x2e>
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	6014      	str	r4, [r2, #0]
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800897e:	f000 b8d5 	b.w	8008b2c <__malloc_unlock>
 8008982:	42a3      	cmp	r3, r4
 8008984:	d90c      	bls.n	80089a0 <_free_r+0x4c>
 8008986:	6821      	ldr	r1, [r4, #0]
 8008988:	1862      	adds	r2, r4, r1
 800898a:	4293      	cmp	r3, r2
 800898c:	bf04      	itt	eq
 800898e:	681a      	ldreq	r2, [r3, #0]
 8008990:	685b      	ldreq	r3, [r3, #4]
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	bf04      	itt	eq
 8008996:	1852      	addeq	r2, r2, r1
 8008998:	6022      	streq	r2, [r4, #0]
 800899a:	6004      	str	r4, [r0, #0]
 800899c:	e7ec      	b.n	8008978 <_free_r+0x24>
 800899e:	4613      	mov	r3, r2
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	b10a      	cbz	r2, 80089a8 <_free_r+0x54>
 80089a4:	42a2      	cmp	r2, r4
 80089a6:	d9fa      	bls.n	800899e <_free_r+0x4a>
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	1858      	adds	r0, r3, r1
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d10b      	bne.n	80089c8 <_free_r+0x74>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	4401      	add	r1, r0
 80089b4:	1858      	adds	r0, r3, r1
 80089b6:	4282      	cmp	r2, r0
 80089b8:	6019      	str	r1, [r3, #0]
 80089ba:	d1dd      	bne.n	8008978 <_free_r+0x24>
 80089bc:	6810      	ldr	r0, [r2, #0]
 80089be:	6852      	ldr	r2, [r2, #4]
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	4401      	add	r1, r0
 80089c4:	6019      	str	r1, [r3, #0]
 80089c6:	e7d7      	b.n	8008978 <_free_r+0x24>
 80089c8:	d902      	bls.n	80089d0 <_free_r+0x7c>
 80089ca:	230c      	movs	r3, #12
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	e7d3      	b.n	8008978 <_free_r+0x24>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	1821      	adds	r1, r4, r0
 80089d4:	428a      	cmp	r2, r1
 80089d6:	bf04      	itt	eq
 80089d8:	6811      	ldreq	r1, [r2, #0]
 80089da:	6852      	ldreq	r2, [r2, #4]
 80089dc:	6062      	str	r2, [r4, #4]
 80089de:	bf04      	itt	eq
 80089e0:	1809      	addeq	r1, r1, r0
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	605c      	str	r4, [r3, #4]
 80089e6:	e7c7      	b.n	8008978 <_free_r+0x24>
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	bf00      	nop
 80089ec:	20000290 	.word	0x20000290

080089f0 <_malloc_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	1ccd      	adds	r5, r1, #3
 80089f4:	f025 0503 	bic.w	r5, r5, #3
 80089f8:	3508      	adds	r5, #8
 80089fa:	2d0c      	cmp	r5, #12
 80089fc:	bf38      	it	cc
 80089fe:	250c      	movcc	r5, #12
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	db01      	blt.n	8008a0a <_malloc_r+0x1a>
 8008a06:	42a9      	cmp	r1, r5
 8008a08:	d903      	bls.n	8008a12 <_malloc_r+0x22>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	f000 f88a 	bl	8008b2a <__malloc_lock>
 8008a16:	4a21      	ldr	r2, [pc, #132]	; (8008a9c <_malloc_r+0xac>)
 8008a18:	6814      	ldr	r4, [r2, #0]
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	b991      	cbnz	r1, 8008a44 <_malloc_r+0x54>
 8008a1e:	4c20      	ldr	r4, [pc, #128]	; (8008aa0 <_malloc_r+0xb0>)
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	b91b      	cbnz	r3, 8008a2c <_malloc_r+0x3c>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 f863 	bl	8008af0 <_sbrk_r>
 8008a2a:	6020      	str	r0, [r4, #0]
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 f85e 	bl	8008af0 <_sbrk_r>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d124      	bne.n	8008a82 <_malloc_r+0x92>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f000 f875 	bl	8008b2c <__malloc_unlock>
 8008a42:	e7e4      	b.n	8008a0e <_malloc_r+0x1e>
 8008a44:	680b      	ldr	r3, [r1, #0]
 8008a46:	1b5b      	subs	r3, r3, r5
 8008a48:	d418      	bmi.n	8008a7c <_malloc_r+0x8c>
 8008a4a:	2b0b      	cmp	r3, #11
 8008a4c:	d90f      	bls.n	8008a6e <_malloc_r+0x7e>
 8008a4e:	600b      	str	r3, [r1, #0]
 8008a50:	50cd      	str	r5, [r1, r3]
 8008a52:	18cc      	adds	r4, r1, r3
 8008a54:	4630      	mov	r0, r6
 8008a56:	f000 f869 	bl	8008b2c <__malloc_unlock>
 8008a5a:	f104 000b 	add.w	r0, r4, #11
 8008a5e:	1d23      	adds	r3, r4, #4
 8008a60:	f020 0007 	bic.w	r0, r0, #7
 8008a64:	1ac3      	subs	r3, r0, r3
 8008a66:	d0d3      	beq.n	8008a10 <_malloc_r+0x20>
 8008a68:	425a      	negs	r2, r3
 8008a6a:	50e2      	str	r2, [r4, r3]
 8008a6c:	e7d0      	b.n	8008a10 <_malloc_r+0x20>
 8008a6e:	428c      	cmp	r4, r1
 8008a70:	684b      	ldr	r3, [r1, #4]
 8008a72:	bf16      	itet	ne
 8008a74:	6063      	strne	r3, [r4, #4]
 8008a76:	6013      	streq	r3, [r2, #0]
 8008a78:	460c      	movne	r4, r1
 8008a7a:	e7eb      	b.n	8008a54 <_malloc_r+0x64>
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	6849      	ldr	r1, [r1, #4]
 8008a80:	e7cc      	b.n	8008a1c <_malloc_r+0x2c>
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d005      	beq.n	8008a98 <_malloc_r+0xa8>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 f82e 	bl	8008af0 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d0cf      	beq.n	8008a38 <_malloc_r+0x48>
 8008a98:	6025      	str	r5, [r4, #0]
 8008a9a:	e7db      	b.n	8008a54 <_malloc_r+0x64>
 8008a9c:	20000290 	.word	0x20000290
 8008aa0:	20000294 	.word	0x20000294

08008aa4 <_realloc_r>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	460e      	mov	r6, r1
 8008aac:	b921      	cbnz	r1, 8008ab8 <_realloc_r+0x14>
 8008aae:	4611      	mov	r1, r2
 8008ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ab4:	f7ff bf9c 	b.w	80089f0 <_malloc_r>
 8008ab8:	b922      	cbnz	r2, 8008ac4 <_realloc_r+0x20>
 8008aba:	f7ff ff4b 	bl	8008954 <_free_r>
 8008abe:	4625      	mov	r5, r4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac4:	f000 f833 	bl	8008b2e <_malloc_usable_size_r>
 8008ac8:	42a0      	cmp	r0, r4
 8008aca:	d20f      	bcs.n	8008aec <_realloc_r+0x48>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7ff ff8e 	bl	80089f0 <_malloc_r>
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d0f2      	beq.n	8008ac0 <_realloc_r+0x1c>
 8008ada:	4631      	mov	r1, r6
 8008adc:	4622      	mov	r2, r4
 8008ade:	f7ff ff15 	bl	800890c <memcpy>
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ff35 	bl	8008954 <_free_r>
 8008aea:	e7e9      	b.n	8008ac0 <_realloc_r+0x1c>
 8008aec:	4635      	mov	r5, r6
 8008aee:	e7e7      	b.n	8008ac0 <_realloc_r+0x1c>

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4c06      	ldr	r4, [pc, #24]	; (8008b0c <_sbrk_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4605      	mov	r5, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	f7f9 fe1c 	bl	8002738 <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000500 	.word	0x20000500

08008b10 <__ascii_wctomb>:
 8008b10:	b149      	cbz	r1, 8008b26 <__ascii_wctomb+0x16>
 8008b12:	2aff      	cmp	r2, #255	; 0xff
 8008b14:	bf85      	ittet	hi
 8008b16:	238a      	movhi	r3, #138	; 0x8a
 8008b18:	6003      	strhi	r3, [r0, #0]
 8008b1a:	700a      	strbls	r2, [r1, #0]
 8008b1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b20:	bf98      	it	ls
 8008b22:	2001      	movls	r0, #1
 8008b24:	4770      	bx	lr
 8008b26:	4608      	mov	r0, r1
 8008b28:	4770      	bx	lr

08008b2a <__malloc_lock>:
 8008b2a:	4770      	bx	lr

08008b2c <__malloc_unlock>:
 8008b2c:	4770      	bx	lr

08008b2e <_malloc_usable_size_r>:
 8008b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b32:	1f18      	subs	r0, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfbc      	itt	lt
 8008b38:	580b      	ldrlt	r3, [r1, r0]
 8008b3a:	18c0      	addlt	r0, r0, r3
 8008b3c:	4770      	bx	lr
	...

08008b40 <_init>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	bf00      	nop
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr

08008b4c <_fini>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr
