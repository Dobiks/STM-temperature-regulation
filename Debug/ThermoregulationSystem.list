
ThermoregulationSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e0  080084e0  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084e8  080084e8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  080084f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000268  08008758  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008758  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0a3  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003abc  00000000  00000000  0003b33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  0003edf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00040388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029ad7  00000000  00000000  000416f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015391  00000000  00000000  0006b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f578b  00000000  00000000  00080558  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175ce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000609c  00000000  00000000  00175d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000268 	.word	0x20000268
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082b0 	.word	0x080082b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000026c 	.word	0x2000026c
 800020c:	080082b0 	.word	0x080082b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	4613      	mov	r3, r2
 80005d0:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fa5e 	bl	8000a94 <null_ptr_check>
 80005d8:	4603      	mov	r3, r0
 80005da:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80005dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d11c      	bne.n	800061e <bmp280_get_regs+0x5e>
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d019      	beq.n	800061e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685c      	ldr	r4, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7858      	ldrb	r0, [r3, #1]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	b29b      	uxth	r3, r3
 8000606:	7bf9      	ldrb	r1, [r7, #15]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	47a0      	blx	r4
 800060c:	4603      	mov	r3, r0
 800060e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d004      	beq.n	8000622 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000618:	23fc      	movs	r3, #252	; 0xfc
 800061a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800061c:	e001      	b.n	8000622 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}

0800062e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b089      	sub	sp, #36	; 0x24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4613      	mov	r3, r2
 800063c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d901      	bls.n	8000648 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f000 fa23 	bl	8000a94 <null_ptr_check>
 800064e:	4603      	mov	r3, r0
 8000650:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d14d      	bne.n	80006f6 <bmp280_set_regs+0xc8>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d04a      	beq.n	80006f6 <bmp280_set_regs+0xc8>
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d047      	beq.n	80006f6 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d041      	beq.n	80006f0 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d114      	bne.n	80006a4 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800067a:	2300      	movs	r3, #0
 800067c:	76fb      	strb	r3, [r7, #27]
 800067e:	e00d      	b.n	800069c <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	7efb      	ldrb	r3, [r7, #27]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	440b      	add	r3, r1
 800068e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	3301      	adds	r3, #1
 800069a:	76fb      	strb	r3, [r7, #27]
 800069c:	7efa      	ldrb	r2, [r7, #27]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d3ed      	bcc.n	8000680 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d90d      	bls.n	80006c6 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f107 0110 	add.w	r1, r7, #16
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 fa0e 	bl	8000ad4 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3b01      	subs	r3, #1
 80006c2:	83bb      	strh	r3, [r7, #28]
 80006c4:	e001      	b.n	80006ca <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	689c      	ldr	r4, [r3, #8]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	7858      	ldrb	r0, [r3, #1]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	8bbb      	ldrh	r3, [r7, #28]
 80006d8:	f107 0210 	add.w	r2, r7, #16
 80006dc:	47a0      	blx	r4
 80006de:	4603      	mov	r3, r0
 80006e0:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80006e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80006ea:	23fc      	movs	r3, #252	; 0xfc
 80006ec:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006ee:	e005      	b.n	80006fc <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80006f0:	23fd      	movs	r3, #253	; 0xfd
 80006f2:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006f4:	e002      	b.n	80006fc <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	77fb      	strb	r3, [r7, #31]
 80006fa:	e000      	b.n	80006fe <bmp280_set_regs+0xd0>
        if (len != 0)
 80006fc:	bf00      	nop
    }

    return rslt;
 80006fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}

0800070a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000712:	23e0      	movs	r3, #224	; 0xe0
 8000714:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000716:	23b6      	movs	r3, #182	; 0xb6
 8000718:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f9ba 	bl	8000a94 <null_ptr_check>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10d      	bne.n	8000748 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800072c:	f107 010d 	add.w	r1, r7, #13
 8000730:	f107 000e 	add.w	r0, r7, #14
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	f7ff ff79 	bl	800062e <bmp280_set_regs>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2002      	movs	r0, #2
 8000746:	4798      	blx	r3
    }

    return rslt;
 8000748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800075c:	2305      	movs	r3, #5
 800075e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f997 	bl	8000a94 <null_ptr_check>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d150      	bne.n	8000814 <bmp280_init+0xc0>
    {
        while (try_count)
 8000772:	e02d      	b.n	80007d0 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	20d0      	movs	r0, #208	; 0xd0
 800077c:	f7ff ff20 	bl	80005c0 <bmp280_get_regs>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d11a      	bne.n	80007c2 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000790:	2b56      	cmp	r3, #86	; 0x56
 8000792:	d007      	beq.n	80007a4 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b57      	cmp	r3, #87	; 0x57
 800079a:	d003      	beq.n	80007a4 <bmp280_init+0x50>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b58      	cmp	r3, #88	; 0x58
 80007a2:	d10e      	bne.n	80007c2 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffb0 	bl	800070a <bmp280_soft_reset>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d110      	bne.n	80007d8 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f9b7 	bl	8000b2a <get_calib_param>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007c0:	e00a      	b.n	80007d8 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	200a      	movs	r0, #10
 80007c8:	4798      	blx	r3
            --try_count;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1ce      	bne.n	8000774 <bmp280_init+0x20>
 80007d6:	e000      	b.n	80007da <bmp280_init+0x86>
                break;
 80007d8:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80007e0:	23fe      	movs	r3, #254	; 0xfe
 80007e2:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80007e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d113      	bne.n	8000814 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800082a:	2300      	movs	r3, #0
 800082c:	733b      	strb	r3, [r7, #12]
 800082e:	2300      	movs	r3, #0
 8000830:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000832:	6838      	ldr	r0, [r7, #0]
 8000834:	f000 f92e 	bl	8000a94 <null_ptr_check>
 8000838:	4603      	mov	r3, r0
 800083a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d137      	bne.n	80008b4 <bmp280_get_config+0x94>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d034      	beq.n	80008b4 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2202      	movs	r2, #2
 8000852:	20f4      	movs	r0, #244	; 0xf4
 8000854:	f7ff feb4 	bl	80005c0 <bmp280_get_regs>
 8000858:	4603      	mov	r3, r0
 800085a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d129      	bne.n	80008b8 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000864:	7b3b      	ldrb	r3, [r7, #12]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800086e:	7b3b      	ldrb	r3, [r7, #12]
 8000870:	109b      	asrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	b2da      	uxtb	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	b2da      	uxtb	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	109b      	asrs	r3, r3, #2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	b2da      	uxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8000898:	7b7b      	ldrb	r3, [r7, #13]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	332c      	adds	r3, #44	; 0x2c
 80008aa:	6810      	ldr	r0, [r2, #0]
 80008ac:	6018      	str	r0, [r3, #0]
 80008ae:	7912      	ldrb	r2, [r2, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008b2:	e001      	b.n	80008b8 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008b4:	23ff      	movs	r3, #255	; 0xff
 80008b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f9c6 	bl	8000c64 <conf_sensor>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	6039      	str	r1, [r7, #0]
 80008ec:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f000 f8d0 	bl	8000a94 <null_ptr_check>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80008f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f9aa 	bl	8000c64 <conf_sensor>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f000 f8ad 	bl	8000a94 <null_ptr_check>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d133      	bne.n	80009ae <bmp280_get_uncomp_data+0x8e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d030      	beq.n	80009ae <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2206      	movs	r2, #6
 8000954:	20f7      	movs	r0, #247	; 0xf7
 8000956:	f7ff fe33 	bl	80005c0 <bmp280_get_regs>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d120      	bne.n	80009a8 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	031a      	lsls	r2, r3, #12
 800096a:	7a7b      	ldrb	r3, [r7, #9]
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	4313      	orrs	r3, r2
 8000970:	7aba      	ldrb	r2, [r7, #10]
 8000972:	0912      	lsrs	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	031a      	lsls	r2, r3, #12
 8000980:	7b3b      	ldrb	r3, [r7, #12]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	4313      	orrs	r3, r2
 8000986:	7b7a      	ldrb	r2, [r7, #13]
 8000988:	0912      	lsrs	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f000 fa1b 	bl	8000dd8 <st_check_boundaries>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009a6:	e004      	b.n	80009b2 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009a8:	23f3      	movs	r3, #243	; 0xf3
 80009aa:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009ac:	e001      	b.n	80009b2 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b088      	sub	sp, #32
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f862 	bl	8000a94 <null_ptr_check>
 80009d0:	4603      	mov	r3, r0
 80009d2:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80009d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d150      	bne.n	8000a7e <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da00      	bge.n	80009e4 <bmp280_get_comp_temp_32bit+0x26>
 80009e2:	3307      	adds	r3, #7
 80009e4:	10db      	asrs	r3, r3, #3
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	8a1b      	ldrh	r3, [r3, #16]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da01      	bge.n	8000a02 <bmp280_get_comp_temp_32bit+0x44>
 80009fe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a02:	12db      	asrs	r3, r3, #11
 8000a04:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	da00      	bge.n	8000a0e <bmp280_get_comp_temp_32bit+0x50>
 8000a0c:	330f      	adds	r3, #15
 8000a0e:	111b      	asrs	r3, r3, #4
 8000a10:	461a      	mov	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
 8000a16:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da00      	bge.n	8000a20 <bmp280_get_comp_temp_32bit+0x62>
 8000a1e:	330f      	adds	r3, #15
 8000a20:	111b      	asrs	r3, r3, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	8a1b      	ldrh	r3, [r3, #16]
 8000a28:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a2a:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da01      	bge.n	8000a36 <bmp280_get_comp_temp_32bit+0x78>
 8000a32:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a36:	131b      	asrs	r3, r3, #12
 8000a38:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a40:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da03      	bge.n	8000a50 <bmp280_get_comp_temp_32bit+0x92>
 8000a48:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000a4c:	441a      	add	r2, r3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	139b      	asrs	r3, r3, #14
 8000a52:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	441a      	add	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	3380      	adds	r3, #128	; 0x80
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da00      	bge.n	8000a70 <bmp280_get_comp_temp_32bit+0xb2>
 8000a6e:	33ff      	adds	r3, #255	; 0xff
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	77fb      	strb	r3, [r7, #31]
 8000a7c:	e004      	b.n	8000a88 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8000a84:	23f2      	movs	r3, #242	; 0xf2
 8000a86:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <null_ptr_check+0x26>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <null_ptr_check+0x26>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <null_ptr_check+0x26>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000aba:	23ff      	movs	r3, #255	; 0xff
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	e016      	b.n	8000b16 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	441a      	add	r2, r3
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	3b01      	subs	r3, #1
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	440b      	add	r3, r1
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	441a      	add	r2, r3
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	3301      	adds	r3, #1
 8000b14:	75fb      	strb	r3, [r7, #23]
 8000b16:	7dfa      	ldrb	r2, [r7, #23]
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3e4      	bcc.n	8000ae8 <interleave_data+0x14>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b08a      	sub	sp, #40	; 0x28
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffa5 	bl	8000a94 <null_ptr_check>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d17f      	bne.n	8000c58 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000b58:	f107 010c 	add.w	r1, r7, #12
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2218      	movs	r2, #24
 8000b60:	2088      	movs	r0, #136	; 0x88
 8000b62:	f7ff fd2d 	bl	80005c0 <bmp280_get_regs>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d171      	bne.n	8000c58 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000b9a:	7c7b      	ldrb	r3, [r7, #17]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	7c3b      	ldrb	r3, [r7, #16]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000bac:	7cfb      	ldrb	r3, [r7, #19]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	7cbb      	ldrb	r3, [r7, #18]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000bc0:	7d7b      	ldrb	r3, [r7, #21]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	7d3b      	ldrb	r3, [r7, #20]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7dbb      	ldrb	r3, [r7, #22]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000be4:	7e7b      	ldrb	r3, [r7, #25]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	7e3b      	ldrb	r3, [r7, #24]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000bf6:	7efb      	ldrb	r3, [r7, #27]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	7ebb      	ldrb	r3, [r7, #26]
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000c08:	7f7b      	ldrb	r3, [r7, #29]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	7f3b      	ldrb	r3, [r7, #28]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000c1a:	7ffb      	ldrb	r3, [r7, #31]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	7fbb      	ldrb	r3, [r7, #30]
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000c2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000c72:	2300      	movs	r3, #0
 8000c74:	753b      	strb	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000c7a:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <conf_sensor+0x170>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff07 	bl	8000a94 <null_ptr_check>
 8000c86:	4603      	mov	r3, r0
 8000c88:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8095 	bne.w	8000dbe <conf_sensor+0x15a>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8091 	beq.w	8000dbe <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000c9c:	f107 0114 	add.w	r1, r7, #20
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	20f4      	movs	r0, #244	; 0xf4
 8000ca6:	f7ff fc8b 	bl	80005c0 <bmp280_get_regs>
 8000caa:	4603      	mov	r3, r0
 8000cac:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8086 	bne.w	8000dc4 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fd26 	bl	800070a <bmp280_soft_reset>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d17c      	bne.n	8000dc4 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000cca:	7d3b      	ldrb	r3, [r7, #20]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000ce4:	7d3b      	ldrb	r3, [r7, #20]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f023 031c 	bic.w	r3, r3, #28
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f003 031c 	and.w	r3, r3, #28
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000d04:	7d7b      	ldrb	r3, [r7, #21]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	015b      	lsls	r3, r3, #5
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000d1e:	7d7b      	ldrb	r3, [r7, #21]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	f023 031c 	bic.w	r3, r3, #28
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000d5c:	f107 0114 	add.w	r1, r7, #20
 8000d60:	f107 0010 	add.w	r0, r7, #16
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2202      	movs	r2, #2
 8000d68:	f7ff fc61 	bl	800062e <bmp280_set_regs>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d125      	bne.n	8000dc4 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	332c      	adds	r3, #44	; 0x2c
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	7912      	ldrb	r2, [r2, #4]
 8000d84:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d01b      	beq.n	8000dc4 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000d8c:	7d3b      	ldrb	r3, [r7, #20]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000da8:	f107 0114 	add.w	r1, r7, #20
 8000dac:	f107 0010 	add.w	r0, r7, #16
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f7ff fc3b 	bl	800062e <bmp280_set_regs>
 8000db8:	4603      	mov	r3, r0
 8000dba:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000dbc:	e002      	b.n	8000dc4 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	75fb      	strb	r3, [r7, #23]
 8000dc2:	e000      	b.n	8000dc6 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8000dc4:	bf00      	nop
    }

    return rslt;
 8000dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080082c8 	.word	0x080082c8

08000dd8 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd03      	ble.n	8000df4 <st_check_boundaries+0x1c>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <st_check_boundaries+0x6c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	dd09      	ble.n	8000e08 <st_check_boundaries+0x30>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dd03      	ble.n	8000e02 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <st_check_boundaries+0x6c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	dd02      	ble.n	8000e08 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000e02:	23f4      	movs	r3, #244	; 0xf4
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e015      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	dd03      	ble.n	8000e16 <st_check_boundaries+0x3e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <st_check_boundaries+0x6c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	dd02      	ble.n	8000e1c <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000e16:	23f6      	movs	r3, #246	; 0xf6
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e00b      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dd03      	ble.n	8000e2a <st_check_boundaries+0x52>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <st_check_boundaries+0x6c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	dd02      	ble.n	8000e30 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000e2a:	23f5      	movs	r3, #245	; 0xf5
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e001      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	000fffef 	.word	0x000fffef

08000e48 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fc7f 	bl	8000754 <bmp280_init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fcdd 	bl	8000820 <bmp280_get_config>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 8000e72:	2301      	movs	r3, #1
 8000e74:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 8000e76:	2303      	movs	r3, #3
 8000e78:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fd1f 	bl	80008c4 <bmp280_set_config>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fd28 	bl	80008e2 <bmp280_set_power_mode>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++) 
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ece:	e011      	b.n	8000ef4 <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 8000ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000edc:	3301      	adds	r3, #1
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ee4:	440b      	add	r3, r1
 8000ee6:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++) 
 8000eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8e7      	bhi.n	8000ed0 <bmp280_spi_reg_write+0x2c>
  }
  
  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <bmp280_spi_reg_write+0xdc>)
 8000f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <bmp280_spi_reg_write+0xe0>)
 8000f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f001 fffa 	bl	8002f0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 010c 	add.w	r1, r7, #12
 8000f22:	2305      	movs	r3, #5
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <bmp280_spi_reg_write+0xe4>)
 8000f26:	f003 fad3 	bl	80044d0 <HAL_SPI_Transmit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f36:	e012      	b.n	8000f5e <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8000f38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <bmp280_spi_reg_write+0xdc>)
 8000f3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <bmp280_spi_reg_write+0xe0>)
 8000f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f001 ffdc 	bl	8002f0c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d9e8      	bls.n	8000f38 <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 8000f66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
    
  return (int8_t)iError;
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	b25b      	sxtb	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000314 	.word	0x20000314

08000f8c <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	603a      	str	r2, [r7, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <bmp280_spi_reg_read+0x110>)
 8000fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <bmp280_spi_reg_read+0x114>)
 8000fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	f001 ff8d 	bl	8002f0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	f107 0208 	add.w	r2, r7, #8
 8000ffc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001000:	2305      	movs	r3, #5
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4603      	mov	r3, r0
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <bmp280_spi_reg_read+0x118>)
 8001008:	f003 fbc8 	bl	800479c <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001018:	e012      	b.n	8001040 <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 800101a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <bmp280_spi_reg_read+0x110>)
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <bmp280_spi_reg_read+0x114>)
 800102a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 ff6b 	bl	8002f0c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800103a:	3301      	adds	r3, #1
 800103c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001044:	2b01      	cmp	r3, #1
 8001046:	d9e8      	bls.n	800101a <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800104e:	e011      	b.n	8001074 <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 8001050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	440b      	add	r3, r1
 800105e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001062:	440a      	add	r2, r1
 8001064:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001068:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 800106a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800106e:	3301      	adds	r3, #1
 8001070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001074:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001078:	b29b      	uxth	r3, r3
 800107a:	88ba      	ldrh	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8e7      	bhi.n	8001050 <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 8001080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  return (int8_t)iError;
 800108e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001090:	b25b      	sxtb	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	3748      	adds	r7, #72	; 0x48
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000314 	.word	0x20000314

080010a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <MX_CRC_Init+0x40>)
 80010b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_CRC_Init+0x3c>)
 80010d2:	f001 fc65 	bl	80029a0 <HAL_CRC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010dc:	f000 fddc 	bl	8001c98 <Error_Handler>
  }

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000294 	.word	0x20000294
 80010e8:	40023000 	.word	0x40023000

080010ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_CRC_MspInit+0x38>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10b      	bne.n	8001116 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_CRC_MspInit+0x3c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_CRC_MspInit+0x3c>)
 8001104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_CRC_MspInit+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023000 	.word	0x40023000
 8001128:	40023800 	.word	0x40023800

0800112c <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] hbtn Encoder handler
 * @return None
 */
void ENC_Init(ENC_HandleTypeDef* henc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	213c      	movs	r1, #60	; 0x3c
 800113a:	4618      	mov	r0, r3
 800113c:	f003 ffea 	bl	8005114 <HAL_TIM_Encoder_Start>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] hbtn Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_HandleTypeDef* henc)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	60fb      	str	r3, [r7, #12]
  henc->Counter = henc->Timer->Instance->CNT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	bf34      	ite	cc
 800116c:	2301      	movcc	r3, #1
 800116e:	2300      	movcs	r3, #0
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	bf8c      	ite	hi
 8001180:	2301      	movhi	r3, #1
 8001182:	2300      	movls	r3, #0
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	745a      	strb	r2, [r3, #17]
  return henc->Counter;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	4bb3      	ldr	r3, [pc, #716]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4ab2      	ldr	r2, [pc, #712]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4bb0      	ldr	r3, [pc, #704]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4bad      	ldr	r3, [pc, #692]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4aac      	ldr	r2, [pc, #688]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4baa      	ldr	r3, [pc, #680]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4aa6      	ldr	r2, [pc, #664]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4ba4      	ldr	r3, [pc, #656]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4ba1      	ldr	r3, [pc, #644]	; (8001480 <MX_GPIO_Init+0x2e4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4aa0      	ldr	r2, [pc, #640]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b9b      	ldr	r3, [pc, #620]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a9a      	ldr	r2, [pc, #616]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b98      	ldr	r3, [pc, #608]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b95      	ldr	r3, [pc, #596]	; (8001480 <MX_GPIO_Init+0x2e4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a94      	ldr	r2, [pc, #592]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001242:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a8e      	ldr	r2, [pc, #568]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <MX_GPIO_Init+0x2e4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2118      	movs	r1, #24
 800125e:	4889      	ldr	r0, [pc, #548]	; (8001484 <MX_GPIO_Init+0x2e8>)
 8001260:	f001 fe54 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2149      	movs	r1, #73	; 0x49
 8001268:	4887      	ldr	r0, [pc, #540]	; (8001488 <MX_GPIO_Init+0x2ec>)
 800126a:	f001 fe4f 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4886      	ldr	r0, [pc, #536]	; (800148c <MX_GPIO_Init+0x2f0>)
 8001274:	f001 fe4a 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001278:	2200      	movs	r2, #0
 800127a:	f644 4181 	movw	r1, #19585	; 0x4c81
 800127e:	4884      	ldr	r0, [pc, #528]	; (8001490 <MX_GPIO_Init+0x2f4>)
 8001280:	f001 fe44 	bl	8002f0c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	487e      	ldr	r0, [pc, #504]	; (8001484 <MX_GPIO_Init+0x2e8>)
 800128c:	f001 fe3e 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	487f      	ldr	r0, [pc, #508]	; (8001494 <MX_GPIO_Init+0x2f8>)
 8001296:	f001 fe39 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	21f0      	movs	r1, #240	; 0xf0
 800129e:	487e      	ldr	r0, [pc, #504]	; (8001498 <MX_GPIO_Init+0x2fc>)
 80012a0:	f001 fe34 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 80012a4:	2318      	movs	r3, #24
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4872      	ldr	r0, [pc, #456]	; (8001484 <MX_GPIO_Init+0x2e8>)
 80012bc:	f001 fc7c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c6:	4b75      	ldr	r3, [pc, #468]	; (800149c <MX_GPIO_Init+0x300>)
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	486c      	ldr	r0, [pc, #432]	; (8001488 <MX_GPIO_Init+0x2ec>)
 80012d6:	f001 fc6f 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 80012da:	2309      	movs	r3, #9
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4865      	ldr	r0, [pc, #404]	; (8001488 <MX_GPIO_Init+0x2ec>)
 80012f2:	f001 fc61 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012f6:	2332      	movs	r3, #50	; 0x32
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001306:	230b      	movs	r3, #11
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	485d      	ldr	r0, [pc, #372]	; (8001488 <MX_GPIO_Init+0x2ec>)
 8001312:	f001 fc51 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001316:	2306      	movs	r3, #6
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001326:	230b      	movs	r3, #11
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4856      	ldr	r0, [pc, #344]	; (800148c <MX_GPIO_Init+0x2f0>)
 8001332:	f001 fc41 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <MX_GPIO_Init+0x2f0>)
 800134e:	f001 fc33 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001352:	2320      	movs	r3, #32
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <MX_GPIO_Init+0x304>)
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4849      	ldr	r0, [pc, #292]	; (800148c <MX_GPIO_Init+0x2f0>)
 8001366:	f001 fc27 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <MX_GPIO_Init+0x300>)
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4843      	ldr	r0, [pc, #268]	; (800148c <MX_GPIO_Init+0x2f0>)
 800137e:	f001 fc1b 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001382:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001386:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	483d      	ldr	r0, [pc, #244]	; (8001490 <MX_GPIO_Init+0x2f4>)
 800139c:	f001 fc0c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 80013a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4832      	ldr	r0, [pc, #200]	; (8001484 <MX_GPIO_Init+0x2e8>)
 80013ba:	f001 fbfd 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	482d      	ldr	r0, [pc, #180]	; (8001490 <MX_GPIO_Init+0x2f4>)
 80013dc:	f001 fbec 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80013e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <MX_GPIO_Init+0x300>)
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4826      	ldr	r0, [pc, #152]	; (8001490 <MX_GPIO_Init+0x2f4>)
 80013f6:	f001 fbdf 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80013fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_GPIO_Init+0x304>)
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4822      	ldr	r0, [pc, #136]	; (8001498 <MX_GPIO_Init+0x2fc>)
 8001410:	f001 fbd2 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481b      	ldr	r0, [pc, #108]	; (8001498 <MX_GPIO_Init+0x2fc>)
 800142a:	f001 fbc5 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_GPIO_Init+0x2f8>)
 8001446:	f001 fbb7 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_GPIO_Init+0x2f8>)
 800145e:	f001 fbab 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_GPIO_Init+0x2ec>)
 800147a:	f001 fb9d 	bl	8002bb8 <HAL_GPIO_Init>
 800147e:	e011      	b.n	80014a4 <MX_GPIO_Init+0x308>
 8001480:	40023800 	.word	0x40023800
 8001484:	40021000 	.word	0x40021000
 8001488:	40020800 	.word	0x40020800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40021800 	.word	0x40021800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	10110000 	.word	0x10110000
 80014a0:	10210000 	.word	0x10210000

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014b6:	230a      	movs	r3, #10
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4821      	ldr	r0, [pc, #132]	; (8001548 <MX_GPIO_Init+0x3ac>)
 80014c2:	f001 fb79 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	481b      	ldr	r0, [pc, #108]	; (8001548 <MX_GPIO_Init+0x3ac>)
 80014dc:	f001 fb6c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80014e0:	23f0      	movs	r3, #240	; 0xf0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_GPIO_Init+0x3b0>)
 80014f8:	f001 fb5e 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_GPIO_Init+0x3b4>)
 800151a:	f001 fb4d 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2017      	movs	r0, #23
 8001524:	f001 fa05 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001528:	2017      	movs	r0, #23
 800152a:	f001 fa1e 	bl	800296a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2028      	movs	r0, #40	; 0x28
 8001534:	f001 f9fd 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f001 fa16 	bl	800296a <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	; 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020000 	.word	0x40020000
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021800 	.word	0x40021800

08001554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_I2C1_Init+0x74>)
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <MX_I2C1_Init+0x78>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x7c>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_I2C1_Init+0x74>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001590:	f001 fcfa 	bl	8002f88 <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 fb7d 	bl	8001c98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015a2:	f001 fd81 	bl	80030a8 <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 fb74 	bl	8001c98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015b4:	f001 fdc3 	bl	800313e <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fb6b 	bl	8001c98 <Error_Handler>
  }

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200002b8 	.word	0x200002b8
 80015cc:	40005400 	.word	0x40005400
 80015d0:	20404768 	.word	0x20404768

080015d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d128      	bne.n	8001648 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800160e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001614:	2312      	movs	r3, #18
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001620:	2304      	movs	r3, #4
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_I2C_MspInit+0x84>)
 800162c:	f001 fac4 	bl	8002bb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_I2C_MspInit+0x80>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40005400 	.word	0x40005400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400

0800165c <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	899b      	ldrh	r3, [r3, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	f001 fc4a 	bl	8002f0c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7d9b      	ldrb	r3, [r3, #22]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <lcd_write_command+0x50>
  {
	if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f1b      	ldrb	r3, [r3, #28]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <lcd_write_command+0x3c>
	{
	  lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2204      	movs	r2, #4
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f842 	bl	800171c <lcd_write>
	}
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f839 	bl	800171c <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 80016aa:	e005      	b.n	80016b8 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	2208      	movs	r2, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f832 	bl	800171c <lcd_write>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	899b      	ldrh	r3, [r3, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	f001 fc18 	bl	8002f0c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7d9b      	ldrb	r3, [r3, #22]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d111      	bne.n	8001708 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2204      	movs	r2, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f814 	bl	800171c <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2204      	movs	r2, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f80b 	bl	800171c <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001706:	e005      	b.n	8001714 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2208      	movs	r2, #8
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f804 	bl	800171c <lcd_write>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	4613      	mov	r3, r2
 800172a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6918      	ldr	r0, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	8a9b      	ldrh	r3, [r3, #20]
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f001 fbe8 	bl	8002f0c <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e019      	b.n	8001776 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	8819      	ldrh	r1, [r3, #0]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	fa42 f303 	asr.w	r3, r2, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	f001 fbce 	bl	8002f0c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	429a      	cmp	r2, r3
 800177c:	d3e1      	bcc.n	8001742 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6918      	ldr	r0, [r3, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	8a9b      	ldrh	r3, [r3, #20]
 8001786:	2200      	movs	r2, #0
 8001788:	4619      	mov	r1, r3
 800178a:	f001 fbbf 	bl	8002f0c <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 800178e:	2132      	movs	r1, #50	; 0x32
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f804 	bl	800179e <lcd_delay_us>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fb4c 	bl	8004e54 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 80017bc:	bf00      	nop
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f8      	bhi.n	80017be <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fb69 	bl	8004ea8 <HAL_TIM_Base_Stop>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 80017ec:	f643 315f 	movw	r1, #15199	; 0x3b5f
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffd4 	bl	800179e <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7d9b      	ldrb	r3, [r3, #22]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d120      	bne.n	8001840 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 80017fe:	2103      	movs	r1, #3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff2b 	bl	800165c <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001806:	f241 0167 	movw	r1, #4199	; 0x1067
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffc7 	bl	800179e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001810:	2103      	movs	r1, #3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ff22 	bl	800165c <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001818:	21c8      	movs	r1, #200	; 0xc8
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffbf 	bl	800179e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001820:	2103      	movs	r1, #3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff1a 	bl	800165c <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001828:	2102      	movs	r1, #2
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff16 	bl	800165c <lcd_write_command>

    hlcd->IsInitialized = 1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8001836:	2128      	movs	r1, #40	; 0x28
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff0f 	bl	800165c <lcd_write_command>
 800183e:	e01f      	b.n	8001880 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7d9b      	ldrb	r3, [r3, #22]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d11b      	bne.n	8001880 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001848:	2130      	movs	r1, #48	; 0x30
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ff06 	bl	800165c <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001850:	f241 0167 	movw	r1, #4199	; 0x1067
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffa2 	bl	800179e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800185a:	2130      	movs	r1, #48	; 0x30
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fefd 	bl	800165c <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001862:	21c8      	movs	r1, #200	; 0xc8
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff9a 	bl	800179e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800186a:	2130      	movs	r1, #48	; 0x30
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fef5 	bl	800165c <lcd_write_command>

	hlcd->IsInitialized = 1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001878:	2138      	movs	r1, #56	; 0x38
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff feee 	bl	800165c <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001880:	2101      	movs	r1, #1
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff feea 	bl	800165c <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001888:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff86 	bl	800179e <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001892:	210c      	movs	r1, #12
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fee1 	bl	800165c <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800189a:	2106      	movs	r1, #6
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fedd 	bl	800165c <lcd_write_command>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e00a      	b.n	80018d0 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fefb 	bl	80016c0 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfc      	ldrb	r4, [r7, #15]
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f7fe fc9c 	bl	8000210 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	429c      	cmp	r4, r3
 80018dc:	d3ed      	bcc.n	80018ba <LCD_printStr+0x10>
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
	...

080018e8 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
 80018f4:	4613      	mov	r3, r2
 80018f6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <LCD_SetCursor+0x30>)
 80018fc:	5cd2      	ldrb	r2, [r2, r3]
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	4413      	add	r3, r2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3b80      	subs	r3, #128	; 0x80
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fea6 	bl	800165c <lcd_write_command>
  #endif
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08008308 	.word	0x08008308

0800191c <_LCD_Show>:
 * @param[in] act_temp  Null-terminated string
 * @param[in] dest_temp  Null-terminated string
 * @param[in] fan  Null-terminated string
 * @return None
 */
void _LCD_Show(LCD_HandleTypeDef* hlcd, char* act_temp, char* dest_temp,char* fan){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
	LCD_SetCursor(hlcd, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff ffda 	bl	80018e8 <LCD_SetCursor>
    LCD_printf(hlcd,"Tz: %4d", act_temp);
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	4925      	ldr	r1, [pc, #148]	; (80019cc <_LCD_Show+0xb0>)
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f853 	bl	80019e4 <LCD_printf>

    if(fan_blink<=4){
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <_LCD_Show+0xb4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d80f      	bhi.n	8001966 <_LCD_Show+0x4a>
    	LCD_SetCursor(hlcd, 0, 14);
 8001946:	220e      	movs	r2, #14
 8001948:	2100      	movs	r1, #0
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ffcc 	bl	80018e8 <LCD_SetCursor>
    	LCD_printf(hlcd,"*");
 8001950:	4920      	ldr	r1, [pc, #128]	; (80019d4 <_LCD_Show+0xb8>)
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f846 	bl	80019e4 <LCD_printf>
    	fan_blink++;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <_LCD_Show+0xb4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <_LCD_Show+0xb4>)
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e01a      	b.n	800199c <_LCD_Show+0x80>
    }
    else if(fan_blink>4 && fan_blink<=8){
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <_LCD_Show+0xb4>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d913      	bls.n	8001996 <_LCD_Show+0x7a>
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <_LCD_Show+0xb4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b08      	cmp	r3, #8
 8001974:	d80f      	bhi.n	8001996 <_LCD_Show+0x7a>
    	LCD_SetCursor(hlcd, 0, 14);
 8001976:	220e      	movs	r2, #14
 8001978:	2100      	movs	r1, #0
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff ffb4 	bl	80018e8 <LCD_SetCursor>
    	LCD_printf(hlcd," ");
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <_LCD_Show+0xbc>)
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f82e 	bl	80019e4 <LCD_printf>
    	fan_blink++;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_LCD_Show+0xb4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <_LCD_Show+0xb4>)
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e002      	b.n	800199c <_LCD_Show+0x80>
    }
    else{

    	fan_blink=0;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <_LCD_Show+0xb4>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    }

    LCD_SetCursor(hlcd, 1, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff ffa1 	bl	80018e8 <LCD_SetCursor>
	LCD_printf(hlcd,"To: %4d", dest_temp );
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <_LCD_Show+0xc0>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f81a 	bl	80019e4 <LCD_printf>
	LCD_SetCursor(hlcd, 1, 14);
 80019b0:	220e      	movs	r2, #14
 80019b2:	2101      	movs	r1, #1
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff ff97 	bl	80018e8 <LCD_SetCursor>
    LCD_printf(hlcd,"%d", fan);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4908      	ldr	r1, [pc, #32]	; (80019e0 <_LCD_Show+0xc4>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f810 	bl	80019e4 <LCD_printf>

}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	080082d4 	.word	0x080082d4
 80019d0:	20000284 	.word	0x20000284
 80019d4:	080082dc 	.word	0x080082dc
 80019d8:	080082e0 	.word	0x080082e0
 80019dc:	080082e4 	.word	0x080082e4
 80019e0:	080082cc 	.word	0x080082cc

080019e4 <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 80019e4:	b40e      	push	{r1, r2, r3}
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b095      	sub	sp, #84	; 0x54
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 80019ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019f2:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fbad 	bl	800715c <vsiprintf>
  LCD_printStr(hlcd, buffer);
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff4e 	bl	80018aa <LCD_printStr>
  va_end(args);
}
 8001a0e:	bf00      	nop
 8001a10:	3754      	adds	r7, #84	; 0x54
 8001a12:	46bd      	mov	sp, r7
 8001a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a18:	b003      	add	sp, #12
 8001a1a:	4770      	bx	lr

08001a1c <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
if(huart->Instance==USART3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_UART_RxCpltCallback+0x3c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10a      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x28>
 {
	int i;
	sscanf(rx_buffer, "%d", &i);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	461a      	mov	r2, r3
 8001a34:	4909      	ldr	r1, [pc, #36]	; (8001a5c <HAL_UART_RxCpltCallback+0x40>)
 8001a36:	480a      	ldr	r0, [pc, #40]	; (8001a60 <HAL_UART_RxCpltCallback+0x44>)
 8001a38:	f005 fb36 	bl	80070a8 <siscanf>
	new_value = i;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_UART_RxCpltCallback+0x48>)
 8001a42:	601a      	str	r2, [r3, #0]
 }
HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8001a44:	2204      	movs	r2, #4
 8001a46:	4906      	ldr	r1, [pc, #24]	; (8001a60 <HAL_UART_RxCpltCallback+0x44>)
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_UART_RxCpltCallback+0x4c>)
 8001a4a:	f004 fc07 	bl	800625c <HAL_UART_Receive_IT>
 }
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40004800 	.word	0x40004800
 8001a5c:	080082ec 	.word	0x080082ec
 8001a60:	20000304 	.word	0x20000304
 8001a64:	20000308 	.word	0x20000308
 8001a68:	20000478 	.word	0x20000478

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a72:	f000 fe04 	bl	800267e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a76:	f000 f87b 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7a:	f7ff fb8f 	bl	800119c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a7e:	f000 fcfd 	bl	800247c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001a82:	f000 fa5f 	bl	8001f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a86:	f000 faab 	bl	8001fe0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a8a:	f000 fb2b 	bl	80020e4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001a8e:	f7ff fd61 	bl	8001554 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001a92:	f000 f909 	bl	8001ca8 <MX_SPI4_Init>
  MX_TIM5_Init();
 8001a96:	f000 fb79 	bl	800218c <MX_TIM5_Init>
  MX_CRC_Init();
 8001a9a:	f7ff fb05 	bl	80010a8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&bmp280_1);
 8001a9e:	482b      	ldr	r0, [pc, #172]	; (8001b4c <main+0xe0>)
 8001aa0:	f7ff f9d2 	bl	8000e48 <BMP280_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	482a      	ldr	r0, [pc, #168]	; (8001b50 <main+0xe4>)
 8001aa8:	f003 fa5e 	bl	8004f68 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <main+0xe4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	; 0x3c
 8001ab6:	4827      	ldr	r0, [pc, #156]	; (8001b54 <main+0xe8>)
 8001ab8:	f003 fb2c 	bl	8005114 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001abc:	2104      	movs	r1, #4
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <main+0xe4>)
 8001ac0:	f003 fa52 	bl	8004f68 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <main+0xe4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8001acc:	2204      	movs	r2, #4
 8001ace:	4922      	ldr	r1, [pc, #136]	; (8001b58 <main+0xec>)
 8001ad0:	4822      	ldr	r0, [pc, #136]	; (8001b5c <main+0xf0>)
 8001ad2:	f004 fbc3 	bl	800625c <HAL_UART_Receive_IT>

  /** LCD with user menu initialization **************************************************/
   LCD_Init(&hlcd1);
 8001ad6:	4822      	ldr	r0, [pc, #136]	; (8001b60 <main+0xf4>)
 8001ad8:	f7ff fe81 	bl	80017de <LCD_Init>

  /** Rotary quadrature encoder initialization *******************************************/
   ENC_Init(&henc1);
 8001adc:	4821      	ldr	r0, [pc, #132]	; (8001b64 <main+0xf8>)
 8001ade:	f7ff fb25 	bl	800112c <ENC_Init>
  while (1)
  {


	  // Read rotary encoder counter
	   ENC_GetCounter(&henc1);
 8001ae2:	4820      	ldr	r0, [pc, #128]	; (8001b64 <main+0xf8>)
 8001ae4:	f7ff fb30 	bl	8001148 <ENC_GetCounter>
	  /* Reading the raw data from sensor */
	  bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4917      	ldr	r1, [pc, #92]	; (8001b4c <main+0xe0>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe ff16 	bl	8000920 <bmp280_get_uncomp_data>
	  /* Getting the 32 bit compensated temperature */
	  bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 8001af4:	69b9      	ldr	r1, [r7, #24]
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <main+0xe0>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ff5e 	bl	80009be <bmp280_get_comp_temp_32bit>

	  fan_percent=60;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <main+0xfc>)
 8001b04:	223c      	movs	r2, #60	; 0x3c
 8001b06:	601a      	str	r2, [r3, #0]

	  // temp destination, temp actual, fan speed percentage
	  _LCD_Show(&hlcd1, new_value,temp32 ,fan_percent);
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <main+0x100>)
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <main+0xfc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4812      	ldr	r0, [pc, #72]	; (8001b60 <main+0xf4>)
 8001b16:	f7ff ff01 	bl	800191c <_LCD_Show>
//		strcat( message, "," );
//		sprintf(text,"%d", fan_percent);
//		strcat( message, text );
//		strcat( message, "\r\n" );

	   _Message_Generate(&message,temp32, new_value, fan_percent);
 8001b1a:	6979      	ldr	r1, [r7, #20]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <main+0x100>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <main+0xfc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4638      	mov	r0, r7
 8001b28:	f000 fd24 	bl	8002574 <_Message_Generate>

		HAL_UART_Transmit(&huart3, (uint8_t*)message,  strlen(message), 1000);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb6e 	bl	8000210 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4639      	mov	r1, r7
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <main+0xf0>)
 8001b40:	f004 fafa 	bl	8006138 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8001b44:	2064      	movs	r0, #100	; 0x64
 8001b46:	f000 fdf7 	bl	8002738 <HAL_Delay>
	   ENC_GetCounter(&henc1);
 8001b4a:	e7ca      	b.n	8001ae2 <main+0x76>
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	200003f8 	.word	0x200003f8
 8001b54:	20000378 	.word	0x20000378
 8001b58:	20000304 	.word	0x20000304
 8001b5c:	20000478 	.word	0x20000478
 8001b60:	2000006c 	.word	0x2000006c
 8001b64:	20000040 	.word	0x20000040
 8001b68:	2000030c 	.word	0x2000030c
 8001b6c:	20000308 	.word	0x20000308

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b4      	sub	sp, #208	; 0xd0
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b7a:	2230      	movs	r2, #48	; 0x30
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fa6a 	bl	8007058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	2284      	movs	r2, #132	; 0x84
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fa5b 	bl	8007058 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba2:	f001 fb19 	bl	80031d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <SystemClock_Config+0x120>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <SystemClock_Config+0x120>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <SystemClock_Config+0x120>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <SystemClock_Config+0x124>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <SystemClock_Config+0x124>)
 8001bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <SystemClock_Config+0x124>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001bf8:	23d8      	movs	r3, #216	; 0xd8
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fb42 	bl	8003298 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c1a:	f000 f83d 	bl	8001c98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c1e:	f001 faeb 	bl	80031f8 <HAL_PWREx_EnableOverDrive>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c28:	f000 f836 	bl	8001c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c52:	2107      	movs	r1, #7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fdc3 	bl	80037e0 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c60:	f000 f81a 	bl	8001c98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001c64:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001c68:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 ffaa 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001c82:	f000 f809 	bl	8001c98 <Error_Handler>
  }
}
 8001c86:	bf00      	nop
 8001c88:	37d0      	adds	r7, #208	; 0xd0
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <MX_SPI4_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cc6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cca:	2202      	movs	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cde:	2218      	movs	r2, #24
 8001ce0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_SPI4_Init+0x74>)
 8001d08:	f002 fb50 	bl	80043ac <HAL_SPI_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f7ff ffc1 	bl	8001c98 <Error_Handler>
  }

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000314 	.word	0x20000314
 8001d20:	40013400 	.word	0x40013400

08001d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_SPI_MspInit+0x7c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d127      	bne.n	8001d96 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_SPI_MspInit+0x80>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d86:	2305      	movs	r3, #5
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_SPI_MspInit+0x84>)
 8001d92:	f000 ff11 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40013400 	.word	0x40013400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_MspInit+0x44>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_MspInit+0x44>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_MspInit+0x44>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_MspInit+0x44>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_MspInit+0x44>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_MspInit+0x44>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 fc56 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e54:	2020      	movs	r0, #32
 8001e56:	f001 f873 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e5a:	2040      	movs	r0, #64	; 0x40
 8001e5c:	f001 f870 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM2_IRQHandler+0x10>)
 8001e6a:	f003 f98a 	bl	8005182 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000438 	.word	0x20000438

08001e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART3_IRQHandler+0x10>)
 8001e7e:	f004 fa8f 	bl	80063a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000478 	.word	0x20000478

08001e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e94:	f001 f854 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e9c:	f001 f850 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ea0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ea4:	f001 f84c 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f005 f892 	bl	8007004 <__errno>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20050000 	.word	0x20050000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000288 	.word	0x20000288
 8001f14:	20000500 	.word	0x20000500

08001f18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <SystemInit+0x28>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <SystemInit+0x28>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SystemInit+0x28>)
 8001f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f32:	609a      	str	r2, [r3, #8]
#endif
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f6c:	226b      	movs	r2, #107	; 0x6b
 8001f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f78:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001f8c:	f002 ff36 	bl	8004dfc <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f96:	f7ff fe7f 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001fa8:	f003 fb22 	bl	80055f0 <HAL_TIM_ConfigClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fb2:	f7ff fe71 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_TIM2_Init+0x98>)
 8001fc4:	f003 ffbe 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fce:	f7ff fe63 	bl	8001c98 <Error_Handler>
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000438 	.word	0x20000438

08001fe0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	615a      	str	r2, [r3, #20]
 8002010:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002014:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <MX_TIM3_Init+0x100>)
 8002016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002018:	4b30      	ldr	r3, [pc, #192]	; (80020dc <MX_TIM3_Init+0xfc>)
 800201a:	226b      	movs	r2, #107	; 0x6b
 800201c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <MX_TIM3_Init+0xfc>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002038:	4828      	ldr	r0, [pc, #160]	; (80020dc <MX_TIM3_Init+0xfc>)
 800203a:	f002 fedf 	bl	8004dfc <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002044:	f7ff fe28 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	4619      	mov	r1, r3
 8002054:	4821      	ldr	r0, [pc, #132]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002056:	f003 facb 	bl	80055f0 <HAL_TIM_ConfigClockSource>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002060:	f7ff fe1a 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002064:	481d      	ldr	r0, [pc, #116]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002066:	f002 ff4a 	bl	8004efe <HAL_TIM_PWM_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002070:	f7ff fe12 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	4816      	ldr	r0, [pc, #88]	; (80020dc <MX_TIM3_Init+0xfc>)
 8002084:	f003 ff5e 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800208e:	f7ff fe03 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002092:	2360      	movs	r3, #96	; 0x60
 8002094:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <MX_TIM3_Init+0xfc>)
 80020aa:	f003 f989 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80020b4:	f7ff fdf0 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	2204      	movs	r2, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM3_Init+0xfc>)
 80020c0:	f003 f97e 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80020ca:	f7ff fde5 	bl	8001c98 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM3_Init+0xfc>)
 80020d0:	f000 f97e 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200003f8 	.word	0x200003f8
 80020e0:	40000400 	.word	0x40000400

080020e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2224      	movs	r2, #36	; 0x24
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 ffb0 	bl	8007058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MX_TIM4_Init+0xa0>)
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <MX_TIM4_Init+0xa4>)
 8002106:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_TIM4_Init+0xa0>)
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_TIM4_Init+0xa0>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_TIM4_Init+0xa0>)
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_TIM4_Init+0xa0>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_TIM4_Init+0xa0>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002126:	2303      	movs	r3, #3
 8002128:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800212a:	2302      	movs	r3, #2
 800212c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800213a:	2302      	movs	r3, #2
 800213c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800213e:	2301      	movs	r3, #1
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4619      	mov	r1, r3
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <MX_TIM4_Init+0xa0>)
 8002152:	f002 ff4d 	bl	8004ff0 <HAL_TIM_Encoder_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800215c:	f7ff fd9c 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_TIM4_Init+0xa0>)
 800216e:	f003 fee9 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002178:	f7ff fd8e 	bl	8001c98 <Error_Handler>
  }

}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000378 	.word	0x20000378
 8002188:	40000800 	.word	0x40000800

0800218c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <MX_TIM5_Init+0x94>)
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <MX_TIM5_Init+0x98>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_TIM5_Init+0x94>)
 80021b2:	226b      	movs	r2, #107	; 0x6b
 80021b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM5_Init+0x94>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_TIM5_Init+0x94>)
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_TIM5_Init+0x94>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_TIM5_Init+0x94>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <MX_TIM5_Init+0x94>)
 80021d2:	f002 fe13 	bl	8004dfc <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021dc:	f7ff fd5c 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <MX_TIM5_Init+0x94>)
 80021ee:	f003 f9ff 	bl	80055f0 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021f8:	f7ff fd4e 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_TIM5_Init+0x94>)
 800220a:	f003 fe9b 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002214:	f7ff fd40 	bl	8001c98 <Error_Handler>
  }

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200003b8 	.word	0x200003b8
 8002224:	40000c00 	.word	0x40000c00

08002228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002248:	d114      	bne.n	8002274 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a39      	ldr	r2, [pc, #228]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	201c      	movs	r0, #28
 8002268:	f000 fb63 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800226c:	201c      	movs	r0, #28
 800226e:	f000 fb7c 	bl	800296a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002272:	e05b      	b.n	800232c <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_TIM_Base_MspInit+0x110>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d145      	bne.n	800230a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d6:	2302      	movs	r3, #2
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4816      	ldr	r0, [pc, #88]	; (800233c <HAL_TIM_Base_MspInit+0x114>)
 80022e2:	f000 fc69 	bl	8002bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_B_Pin;
 80022e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022f8:	2302      	movs	r3, #2
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_CH_B_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	480f      	ldr	r0, [pc, #60]	; (8002340 <HAL_TIM_Base_MspInit+0x118>)
 8002304:	f000 fc58 	bl	8002bb8 <HAL_GPIO_Init>
}
 8002308:	e010      	b.n	800232c <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_TIM_Base_MspInit+0x11c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d10b      	bne.n	800232c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_TIM_Base_MspInit+0x10c>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
}
 800232c:	bf00      	nop
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40000400 	.word	0x40000400
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40000c00 	.word	0x40000c00

08002348 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d128      	bne.n	80023bc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 800239a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023ac:	2302      	movs	r3, #2
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_TIM_Encoder_MspInit+0x84>)
 80023b8:	f000 fbfe 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020c00 	.word	0x40020c00

080023d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_TIM_MspPostInit+0x9c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d137      	bne.n	8002462 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_TIM_MspPostInit+0xa0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin;
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002432:	2302      	movs	r3, #2
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_G_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <HAL_TIM_MspPostInit+0xa4>)
 800243e:	f000 fbbb 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_R_Pin;
 8002442:	2310      	movs	r3, #16
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002452:	2302      	movs	r3, #2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_R_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <HAL_TIM_MspPostInit+0xa8>)
 800245e:	f000 fbab 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40000400 	.word	0x40000400
 8002470:	40023800 	.word	0x40023800
 8002474:	40020800 	.word	0x40020800
 8002478:	40020400 	.word	0x40020400

0800247c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <MX_USART3_UART_Init+0x5c>)
 8002484:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 8002488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800248c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024a2:	220c      	movs	r2, #12
 80024a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_USART3_UART_Init+0x58>)
 80024c0:	f003 fdec 	bl	800609c <HAL_UART_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024ca:	f7ff fbe5 	bl	8001c98 <Error_Handler>
  }

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000478 	.word	0x20000478
 80024d8:	40004800 	.word	0x40004800

080024dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_UART_MspInit+0x8c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d130      	bne.n	8002560 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_UART_MspInit+0x90>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_UART_MspInit+0x90>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_UART_MspInit+0x90>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_UART_MspInit+0x90>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_UART_MspInit+0x90>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_UART_MspInit+0x90>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800252e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002540:	2307      	movs	r3, #7
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <HAL_UART_MspInit+0x94>)
 800254c:	f000 fb34 	bl	8002bb8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2027      	movs	r0, #39	; 0x27
 8002556:	f000 f9ec 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800255a:	2027      	movs	r0, #39	; 0x27
 800255c:	f000 fa05 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40004800 	.word	0x40004800
 800256c:	40023800 	.word	0x40023800
 8002570:	40020c00 	.word	0x40020c00

08002574 <_Message_Generate>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void _Message_Generate(char* message,int32_t temp32,int32_t new_value,int32_t fan_percent){
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
	char text[5];
	sprintf(text,"%d", new_value);
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4925      	ldr	r1, [pc, #148]	; (8002620 <_Message_Generate+0xac>)
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fd6c 	bl	8007068 <siprintf>
	strcpy( message, text );
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f004 fdc1 	bl	800711e <strcpy>
	strcat( message, "," );
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7fd fe37 	bl	8000210 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	491e      	ldr	r1, [pc, #120]	; (8002624 <_Message_Generate+0xb0>)
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	8013      	strh	r3, [r2, #0]
	sprintf(text,"%d", temp32);
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4919      	ldr	r1, [pc, #100]	; (8002620 <_Message_Generate+0xac>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 fd53 	bl	8007068 <siprintf>
	strcat( message, text );
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4619      	mov	r1, r3
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f004 fd99 	bl	8007100 <strcat>
	strcat( message, "," );
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7fd fe1e 	bl	8000210 <strlen>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	4911      	ldr	r1, [pc, #68]	; (8002624 <_Message_Generate+0xb0>)
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	8013      	strh	r3, [r2, #0]
	sprintf(text,"%d", fan_percent);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <_Message_Generate+0xac>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 fd3a 	bl	8007068 <siprintf>
	strcat( message, text );
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4619      	mov	r1, r3
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f004 fd80 	bl	8007100 <strcat>
	strcat( message, "\r\n" );
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fd fe05 	bl	8000210 <strlen>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <_Message_Generate+0xb4>)
 8002610:	8811      	ldrh	r1, [r2, #0]
 8002612:	7892      	ldrb	r2, [r2, #2]
 8002614:	8019      	strh	r1, [r3, #0]
 8002616:	709a      	strb	r2, [r3, #2]
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	080082f0 	.word	0x080082f0
 8002624:	080082f4 	.word	0x080082f4
 8002628:	080082f8 	.word	0x080082f8

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002632:	e003      	b.n	800263c <LoopCopyDataInit>

08002634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800263a:	3104      	adds	r1, #4

0800263c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002644:	d3f6      	bcc.n	8002634 <CopyDataInit>
  ldr  r2, =_sbss
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002648:	e002      	b.n	8002650 <LoopFillZerobss>

0800264a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800264a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800264c:	f842 3b04 	str.w	r3, [r2], #4

08002650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002654:	d3f9      	bcc.n	800264a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002656:	f7ff fc5f 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f004 fcd9 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265e:	f7ff fa05 	bl	8001a6c <main>
  bx  lr    
 8002662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002668:	080084f0 	.word	0x080084f0
  ldr  r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002670:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 8002674:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8002678:	20000500 	.word	0x20000500

0800267c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>

0800267e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002682:	2003      	movs	r0, #3
 8002684:	f000 f94a 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002688:	2000      	movs	r0, #0
 800268a:	f000 f805 	bl	8002698 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800268e:	f7ff fb8d 	bl	8001dac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f965 	bl	8002986 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f92d 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000008c 	.word	0x2000008c
 80026f0:	20000094 	.word	0x20000094
 80026f4:	20000090 	.word	0x20000090

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000094 	.word	0x20000094
 800271c:	200004f8 	.word	0x200004f8

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200004f8 	.word	0x200004f8

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_Delay+0x40>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000094 	.word	0x20000094

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <__NVIC_SetPriorityGrouping+0x40>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x40>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00
 80027c0:	05fa0000 	.word	0x05fa0000

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e054      	b.n	8002a5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7f5b      	ldrb	r3, [r3, #29]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fb92 	bl	80010ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	791b      	ldrb	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_CRC_Init+0xc4>)
 80029dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0218 	bic.w	r2, r2, #24
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	e00c      	b.n	8002a0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f834 	bl	8002a68 <HAL_CRCEx_Polynomial_Set>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e028      	b.n	8002a5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	795b      	ldrb	r3, [r3, #5]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	e004      	b.n	8002a28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6912      	ldr	r2, [r2, #16]
 8002a26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	04c11db7 	.word	0x04c11db7

08002a68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a78:	231f      	movs	r3, #31
 8002a7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a7c:	bf00      	nop
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	613a      	str	r2, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <HAL_CRCEx_Polynomial_Set+0x34>
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b18      	cmp	r3, #24
 8002aa0:	d846      	bhi.n	8002b30 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002b37 	.word	0x08002b37
 8002aac:	08002b31 	.word	0x08002b31
 8002ab0:	08002b31 	.word	0x08002b31
 8002ab4:	08002b31 	.word	0x08002b31
 8002ab8:	08002b31 	.word	0x08002b31
 8002abc:	08002b31 	.word	0x08002b31
 8002ac0:	08002b31 	.word	0x08002b31
 8002ac4:	08002b31 	.word	0x08002b31
 8002ac8:	08002b25 	.word	0x08002b25
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002b31 	.word	0x08002b31
 8002ad4:	08002b31 	.word	0x08002b31
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b31 	.word	0x08002b31
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b31 	.word	0x08002b31
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b31 	.word	0x08002b31
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002b31 	.word	0x08002b31
 8002b04:	08002b31 	.word	0x08002b31
 8002b08:	08002b0d 	.word	0x08002b0d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d913      	bls.n	8002b3a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b16:	e010      	b.n	8002b3a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b07      	cmp	r3, #7
 8002b1c:	d90f      	bls.n	8002b3e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b22:	e00c      	b.n	8002b3e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	d90b      	bls.n	8002b42 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b2e:	e008      	b.n	8002b42 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e006      	b.n	8002b44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b36:	bf00      	nop
 8002b38:	e004      	b.n	8002b44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e002      	b.n	8002b44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b42:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 0118 	bic.w	r1, r3, #24
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00c      	b.n	8002bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e175      	b.n	8002ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 8164 	bne.w	8002ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00b      	beq.n	8002c16 <HAL_GPIO_Init+0x5e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c0a:	2b11      	cmp	r3, #17
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d130      	bne.n	8002c78 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x100>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b12      	cmp	r3, #18
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80be 	beq.w	8002ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a64      	ldr	r2, [pc, #400]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d5a:	4a60      	ldr	r2, [pc, #384]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a57      	ldr	r2, [pc, #348]	; (8002ee0 <HAL_GPIO_Init+0x328>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d037      	beq.n	8002df6 <HAL_GPIO_Init+0x23e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_GPIO_Init+0x32c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d031      	beq.n	8002df2 <HAL_GPIO_Init+0x23a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02b      	beq.n	8002dee <HAL_GPIO_Init+0x236>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x232>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_GPIO_Init+0x338>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x22e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_GPIO_Init+0x33c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x22a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_GPIO_Init+0x340>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x226>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_GPIO_Init+0x344>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x222>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_GPIO_Init+0x348>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x21e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_GPIO_Init+0x34c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x21a>
 8002dce:	2309      	movs	r3, #9
 8002dd0:	e012      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	e010      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	e00e      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e00c      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00a      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e008      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e004      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df6:	2300      	movs	r3, #0
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f002 0203 	and.w	r2, r2, #3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4093      	lsls	r3, r2
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e08:	4934      	ldr	r1, [pc, #208]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	f67f ae86 	bls.w	8002bd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3724      	adds	r7, #36	; 0x24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40021c00 	.word	0x40021c00
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40022400 	.word	0x40022400
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f28:	e003      	b.n	8002f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	041a      	lsls	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f806 	bl	8002f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40013c00 	.word	0x40013c00

08002f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07f      	b.n	800309a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe fb10 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e006      	b.n	8003010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800300e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d104      	bne.n	8003022 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_I2C_Init+0x11c>)
 800302e:	430b      	orrs	r3, r1
 8003030:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	021a      	lsls	r2, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	02008000 	.word	0x02008000

080030a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d138      	bne.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e032      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b20      	cmp	r3, #32
 8003152:	d139      	bne.n	80031c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800315e:	2302      	movs	r3, #2
 8003160:	e033      	b.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2224      	movs	r2, #36	; 0x24
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007000 	.word	0x40007000

080031f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_PWREx_EnableOverDrive+0x98>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_PWREx_EnableOverDrive+0x98>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_PWREx_EnableOverDrive+0x98>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003226:	f7ff fa7b 	bl	8002720 <HAL_GetTick>
 800322a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800322c:	e009      	b.n	8003242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800322e:	f7ff fa77 	bl	8002720 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323c:	d901      	bls.n	8003242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e022      	b.n	8003288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d1ee      	bne.n	800322e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800325c:	f7ff fa60 	bl	8002720 <HAL_GetTick>
 8003260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003262:	e009      	b.n	8003278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003264:	f7ff fa5c 	bl	8002720 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003272:	d901      	bls.n	8003278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e007      	b.n	8003288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003284:	d1ee      	bne.n	8003264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000

08003298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e291      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8087 	beq.w	80033ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032bc:	4b96      	ldr	r3, [pc, #600]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d00c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c8:	4b93      	ldr	r3, [pc, #588]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d112      	bne.n	80032fa <HAL_RCC_OscConfig+0x62>
 80032d4:	4b90      	ldr	r3, [pc, #576]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	4b8d      	ldr	r3, [pc, #564]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x130>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d168      	bne.n	80033c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e26b      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x7a>
 8003304:	4b84      	ldr	r3, [pc, #528]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a83      	ldr	r2, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e02e      	b.n	8003370 <HAL_RCC_OscConfig+0xd8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x9c>
 800331a:	4b7f      	ldr	r3, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7e      	ldr	r2, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7b      	ldr	r2, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800332c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xd8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0xc0>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a75      	ldr	r2, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a72      	ldr	r2, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xd8>
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6b      	ldr	r2, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7ff f9d2 	bl	8002720 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7ff f9ce 	bl	8002720 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e21f      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b61      	ldr	r3, [pc, #388]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xe8>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7ff f9be 	bl	8002720 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7ff f9ba 	bl	8002720 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e20b      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x110>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d069      	beq.n	80034aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x190>
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x17a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1df      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	493d      	ldr	r1, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e040      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a38      	ldr	r2, [pc, #224]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7ff f970 	bl	8002720 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003444:	f7ff f96c 	bl	8002720 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e1bd      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4929      	ldr	r1, [pc, #164]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
 8003476:	e018      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7ff f94c 	bl	8002720 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348c:	f7ff f948 	bl	8002720 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e199      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d038      	beq.n	8003528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d019      	beq.n	80034f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7ff f929 	bl	8002720 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d2:	f7ff f925 	bl	8002720 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e176      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x23a>
 80034f0:	e01a      	b.n	8003528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7ff f90f 	bl	8002720 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003506:	f7ff f90b 	bl	8002720 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d903      	bls.n	800351c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e15c      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
 8003518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	4b91      	ldr	r3, [pc, #580]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ee      	bne.n	8003506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80a4 	beq.w	800367e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a87      	ldr	r2, [pc, #540]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355e:	4b82      	ldr	r3, [pc, #520]	; (8003768 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800356a:	4b7f      	ldr	r3, [pc, #508]	; (8003768 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7e      	ldr	r2, [pc, #504]	; (8003768 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7ff f8d3 	bl	8002720 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7ff f8cf 	bl	8002720 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e120      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4b75      	ldr	r3, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x4d0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x31a>
 80035a4:	4b6f      	ldr	r3, [pc, #444]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	e02d      	b.n	800360e <HAL_RCC_OscConfig+0x376>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x33c>
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a69      	ldr	r2, [pc, #420]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a66      	ldr	r2, [pc, #408]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	e01c      	b.n	800360e <HAL_RCC_OscConfig+0x376>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x35e>
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a60      	ldr	r2, [pc, #384]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0x376>
 80035f6:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a5a      	ldr	r2, [pc, #360]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b58      	ldr	r3, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a57      	ldr	r2, [pc, #348]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7ff f883 	bl	8002720 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7ff f87f 	bl	8002720 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ce      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ee      	beq.n	800361e <HAL_RCC_OscConfig+0x386>
 8003640:	e014      	b.n	800366c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7ff f86d 	bl	8002720 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7ff f869 	bl	8002720 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a4 	beq.w	80037d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d06b      	beq.n	800376c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d149      	bne.n	8003730 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a30      	ldr	r2, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7ff f83a 	bl	8002720 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7ff f836 	bl	8002720 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e087      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4313      	orrs	r3, r2
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80036f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7ff f80a 	bl	8002720 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7ff f806 	bl	8002720 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e057      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x478>
 800372e:	e04f      	b.n	80037d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fff0 	bl	8002720 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe ffec 	bl	8002720 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e03d      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCC_OscConfig+0x4cc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x4ac>
 8003762:	e035      	b.n	80037d0 <HAL_RCC_OscConfig+0x538>
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x544>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d028      	beq.n	80037cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d121      	bne.n	80037cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d11a      	bne.n	80037cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d111      	bne.n	80037cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0d0      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	4965      	ldr	r1, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d040      	beq.n	8003904 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d115      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e073      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fe ff24 	bl	8002720 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fe ff20 	bl	8002720 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e053      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d210      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 020f 	bic.w	r2, r3, #15
 800391a:	4922      	ldr	r1, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f821 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003976:	4601      	mov	r1, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1cc>)
 8003984:	5cd3      	ldrb	r3, [r2, r3]
 8003986:	fa21 f303 	lsr.w	r3, r1, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1d0>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1d4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fe80 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800830c 	.word	0x0800830c
 80039b0:	2000008c 	.word	0x2000008c
 80039b4:	20000090 	.word	0x20000090

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ce:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d007      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x32>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d008      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x38>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 80b4 	bne.w	8003b4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039e6:	60bb      	str	r3, [r7, #8]
      break;
 80039e8:	e0b3      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ea:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039ec:	60bb      	str	r3, [r7, #8]
      break;
 80039ee:	e0b0      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b5a      	ldr	r3, [pc, #360]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039fa:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04a      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	ea03 0501 	and.w	r5, r3, r1
 8003a1c:	ea04 0602 	and.w	r6, r4, r2
 8003a20:	4629      	mov	r1, r5
 8003a22:	4632      	mov	r2, r6
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	0154      	lsls	r4, r2, #5
 8003a2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a32:	014b      	lsls	r3, r1, #5
 8003a34:	4619      	mov	r1, r3
 8003a36:	4622      	mov	r2, r4
 8003a38:	1b49      	subs	r1, r1, r5
 8003a3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f04f 0400 	mov.w	r4, #0
 8003a46:	0194      	lsls	r4, r2, #6
 8003a48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a4c:	018b      	lsls	r3, r1, #6
 8003a4e:	1a5b      	subs	r3, r3, r1
 8003a50:	eb64 0402 	sbc.w	r4, r4, r2
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	00e2      	lsls	r2, r4, #3
 8003a5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	460b      	mov	r3, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	195b      	adds	r3, r3, r5
 8003a6a:	eb44 0406 	adc.w	r4, r4, r6
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	0262      	lsls	r2, r4, #9
 8003a78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a7c:	0259      	lsls	r1, r3, #9
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4614      	mov	r4, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	4621      	mov	r1, r4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f04f 0400 	mov.w	r4, #0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	f7fc fc16 	bl	80002c0 <__aeabi_uldivmod>
 8003a94:	4603      	mov	r3, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e049      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	ea03 0501 	and.w	r5, r3, r1
 8003ab2:	ea04 0602 	and.w	r6, r4, r2
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4632      	mov	r2, r6
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	0154      	lsls	r4, r2, #5
 8003ac4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac8:	014b      	lsls	r3, r1, #5
 8003aca:	4619      	mov	r1, r3
 8003acc:	4622      	mov	r2, r4
 8003ace:	1b49      	subs	r1, r1, r5
 8003ad0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	0194      	lsls	r4, r2, #6
 8003ade:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae2:	018b      	lsls	r3, r1, #6
 8003ae4:	1a5b      	subs	r3, r3, r1
 8003ae6:	eb64 0402 	sbc.w	r4, r4, r2
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af8:	00d9      	lsls	r1, r3, #3
 8003afa:	460b      	mov	r3, r1
 8003afc:	4614      	mov	r4, r2
 8003afe:	195b      	adds	r3, r3, r5
 8003b00:	eb44 0406 	adc.w	r4, r4, r6
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	02a2      	lsls	r2, r4, #10
 8003b0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b12:	0299      	lsls	r1, r3, #10
 8003b14:	460b      	mov	r3, r1
 8003b16:	4614      	mov	r4, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	f7fc fbcb 	bl	80002c0 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b4e:	60bb      	str	r3, [r7, #8]
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	68bb      	ldr	r3, [r7, #8]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	2000008c 	.word	0x2000008c

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800831c 	.word	0x0800831c

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4a03      	ldr	r2, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	0800831c 	.word	0x0800831c

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d012      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bf8:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a68      	ldr	r2, [pc, #416]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c02:	6093      	str	r3, [r2, #8]
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	4964      	ldr	r1, [pc, #400]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	4959      	ldr	r1, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	494a      	ldr	r1, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808b 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a39      	ldr	r2, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fe fd22 	bl	8002720 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fe fd1e 	bl	8002720 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e355      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfe:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d035      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d02e      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d114      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fce6 	bl	8002720 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe fce2 	bl	8002720 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e317      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d111      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000
 8003da8:	0ffffcff 	.word	0x0ffffcff
 8003dac:	4bb0      	ldr	r3, [pc, #704]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4aaf      	ldr	r2, [pc, #700]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003db2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	4bad      	ldr	r3, [pc, #692]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	49aa      	ldr	r1, [pc, #680]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd6:	4ba6      	ldr	r3, [pc, #664]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	4aa4      	ldr	r2, [pc, #656]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003de6:	4ba2      	ldr	r3, [pc, #648]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	499f      	ldr	r1, [pc, #636]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e04:	4b9a      	ldr	r3, [pc, #616]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e12:	4997      	ldr	r1, [pc, #604]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e26:	4b92      	ldr	r3, [pc, #584]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	498e      	ldr	r1, [pc, #568]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e48:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e56:	4986      	ldr	r1, [pc, #536]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e6a:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	497d      	ldr	r1, [pc, #500]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8c:	4b78      	ldr	r3, [pc, #480]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4975      	ldr	r1, [pc, #468]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eae:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f023 020c 	bic.w	r2, r3, #12
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	496c      	ldr	r1, [pc, #432]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed0:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	4964      	ldr	r1, [pc, #400]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef2:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	495b      	ldr	r1, [pc, #364]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f14:	4b56      	ldr	r3, [pc, #344]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	4953      	ldr	r1, [pc, #332]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f36:	4b4e      	ldr	r3, [pc, #312]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	494a      	ldr	r1, [pc, #296]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f58:	4b45      	ldr	r3, [pc, #276]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	4942      	ldr	r1, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	4939      	ldr	r1, [pc, #228]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f9c:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	4931      	ldr	r1, [pc, #196]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fbe:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	4928      	ldr	r1, [pc, #160]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	4918      	ldr	r1, [pc, #96]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004030:	490f      	ldr	r1, [pc, #60]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004046:	f040 80d8 	bne.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004050:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004056:	f7fe fb63 	bl	8002720 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800405e:	f7fe fb5f 	bl	8002720 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	; 0x64
 800406a:	d903      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e196      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004070:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ee      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d021      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11d      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004094:	4b64      	ldr	r3, [pc, #400]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	0e1b      	lsrs	r3, r3, #24
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	019a      	lsls	r2, r3, #6
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	071b      	lsls	r3, r3, #28
 80040c8:	4957      	ldr	r1, [pc, #348]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02e      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fa:	d129      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040fc:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	0f1b      	lsrs	r3, r3, #28
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	019a      	lsls	r2, r3, #6
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	071b      	lsls	r3, r3, #28
 8004130:	493d      	ldr	r1, [pc, #244]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004138:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800413a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413e:	f023 021f 	bic.w	r2, r3, #31
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	3b01      	subs	r3, #1
 8004148:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01d      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800415c:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800415e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004162:	0e1b      	lsrs	r3, r3, #24
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800416c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004170:	0f1b      	lsrs	r3, r3, #28
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	019a      	lsls	r2, r3, #6
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	431a      	orrs	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	071b      	lsls	r3, r3, #28
 8004190:	4925      	ldr	r1, [pc, #148]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	019a      	lsls	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	071b      	lsls	r3, r3, #28
 80041c0:	4919      	ldr	r1, [pc, #100]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe faa4 	bl	8002720 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041dc:	f7fe faa0 	bl	8002720 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0d7      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 80cd 	bne.w	800439c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fe fa87 	bl	8002720 <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004216:	f7fe fa83 	bl	8002720 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b64      	cmp	r3, #100	; 0x64
 8004222:	d903      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0ba      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004228:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800422c:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004238:	d0ed      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02e      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d12a      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004270:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	0f1b      	lsrs	r3, r3, #28
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	019a      	lsls	r2, r3, #6
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	4944      	ldr	r1, [pc, #272]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800429e:	4b42      	ldr	r3, [pc, #264]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	493d      	ldr	r1, [pc, #244]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d022      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042cc:	d11d      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ce:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	0f1b      	lsrs	r3, r3, #28
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	4929      	ldr	r1, [pc, #164]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d028      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	0e1b      	lsrs	r3, r3, #24
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	019a      	lsls	r2, r3, #6
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	071b      	lsls	r3, r3, #28
 800434a:	4917      	ldr	r1, [pc, #92]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4911      	ldr	r1, [pc, #68]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fe f9d4 	bl	8002720 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800437c:	f7fe f9d0 	bl	8002720 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e007      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439a:	d1ef      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e084      	b.n	80044c8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fd fca3 	bl	8001d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043fe:	d902      	bls.n	8004406 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e002      	b.n	800440c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004414:	d007      	beq.n	8004426 <HAL_SPI_Init+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800441e:	d002      	beq.n	8004426 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004436:	d903      	bls.n	8004440 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
 800443e:	e002      	b.n	8004446 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	ea42 0103 	orr.w	r1, r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0204 	and.w	r2, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	ea42 0103 	orr.w	r1, r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_Transmit+0x22>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e150      	b.n	8004794 <HAL_SPI_Transmit+0x2c4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fa:	f7fe f911 	bl	8002720 <HAL_GetTick>
 80044fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004510:	2302      	movs	r3, #2
 8004512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004514:	e135      	b.n	8004782 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit+0x52>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004526:	e12c      	b.n	8004782 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2203      	movs	r2, #3
 800452c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004572:	d107      	bne.n	8004584 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004582:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d007      	beq.n	80045a2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045aa:	d94b      	bls.n	8004644 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_SPI_Transmit+0xea>
 80045b4:	8afb      	ldrh	r3, [r7, #22]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d13e      	bne.n	8004638 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	881a      	ldrh	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045de:	e02b      	b.n	8004638 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d112      	bne.n	8004614 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004612:	e011      	b.n	8004638 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004614:	f7fe f884 	bl	8002720 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d803      	bhi.n	800462c <HAL_SPI_Transmit+0x15c>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d102      	bne.n	8004632 <HAL_SPI_Transmit+0x162>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004636:	e0a4      	b.n	8004782 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ce      	bne.n	80045e0 <HAL_SPI_Transmit+0x110>
 8004642:	e07c      	b.n	800473e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_Transmit+0x182>
 800464c:	8afb      	ldrh	r3, [r7, #22]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d170      	bne.n	8004734 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d912      	bls.n	8004682 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b02      	subs	r3, #2
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004680:	e058      	b.n	8004734 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046a8:	e044      	b.n	8004734 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d12b      	bne.n	8004710 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d912      	bls.n	80046e8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	1c9a      	adds	r2, r3, #2
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b02      	subs	r3, #2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e6:	e025      	b.n	8004734 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470e:	e011      	b.n	8004734 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004710:	f7fe f806 	bl	8002720 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d803      	bhi.n	8004728 <HAL_SPI_Transmit+0x258>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d102      	bne.n	800472e <HAL_SPI_Transmit+0x25e>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004732:	e026      	b.n	8004782 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1b5      	bne.n	80046aa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb14 	bl	8004d70 <SPI_EndRxTxTransaction>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e000      	b.n	8004782 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004792:	7ffb      	ldrb	r3, [r7, #31]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047aa:	2301      	movs	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x26>
 80047be:	2302      	movs	r3, #2
 80047c0:	e1fb      	b.n	8004bba <HAL_SPI_TransmitReceive+0x41e>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ca:	f7fd ffa9 	bl	8002720 <HAL_GetTick>
 80047ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047de:	887b      	ldrh	r3, [r7, #2]
 80047e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047e6:	7efb      	ldrb	r3, [r7, #27]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d00e      	beq.n	800480a <HAL_SPI_TransmitReceive+0x6e>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f2:	d106      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x66>
 80047fc:	7efb      	ldrb	r3, [r7, #27]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d003      	beq.n	800480a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004808:	e1cd      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_SPI_TransmitReceive+0x80>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_TransmitReceive+0x80>
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004822:	e1c0      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b04      	cmp	r3, #4
 800482e:	d003      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2205      	movs	r2, #5
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800487a:	d802      	bhi.n	8004882 <HAL_SPI_TransmitReceive+0xe6>
 800487c:	8a3b      	ldrh	r3, [r7, #16]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d908      	bls.n	8004894 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e007      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d007      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ca:	d97c      	bls.n	80049c6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_SPI_TransmitReceive+0x13e>
 80048d4:	8a7b      	ldrh	r3, [r7, #18]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d169      	bne.n	80049ae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048fe:	e056      	b.n	80049ae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d11b      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x1aa>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d016      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x1aa>
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	2b01      	cmp	r3, #1
 800491c:	d113      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	881a      	ldrh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	1c9a      	adds	r2, r3, #2
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d11c      	bne.n	800498e <HAL_SPI_TransmitReceive+0x1f2>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	b292      	uxth	r2, r2
 800496c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800498a:	2301      	movs	r3, #1
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800498e:	f7fd fec7 	bl	8002720 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	429a      	cmp	r2, r3
 800499c:	d807      	bhi.n	80049ae <HAL_SPI_TransmitReceive+0x212>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d003      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049ac:	e0fb      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1a3      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x164>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d19d      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x164>
 80049c4:	e0df      	b.n	8004b86 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x23a>
 80049ce:	8a7b      	ldrh	r3, [r7, #18]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 80cb 	bne.w	8004b6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d912      	bls.n	8004a06 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b02      	subs	r3, #2
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a04:	e0b2      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a2c:	e09e      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d134      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x30a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02f      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x30a>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d12c      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d912      	bls.n	8004a7c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b02      	subs	r3, #2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a7a:	e012      	b.n	8004aa2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d148      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x3aa>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d042      	beq.n	8004b46 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d923      	bls.n	8004b14 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b02      	subs	r3, #2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d81f      	bhi.n	8004b42 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	e016      	b.n	8004b42 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f103 020c 	add.w	r2, r3, #12
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b46:	f7fd fdeb 	bl	8002720 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d803      	bhi.n	8004b5e <HAL_SPI_TransmitReceive+0x3c2>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d102      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x3c8>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d103      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b6a:	e01c      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f af5b 	bne.w	8004a2e <HAL_SPI_TransmitReceive+0x292>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f af54 	bne.w	8004a2e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f8f0 	bl	8004d70 <SPI_EndRxTxTransaction>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8004ba2:	e000      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd2:	e04c      	b.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d048      	beq.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bdc:	f7fd fda0 	bl	8002720 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d902      	bls.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d13d      	bne.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0a:	d111      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	d004      	beq.n	8004c20 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	d107      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c38:	d10f      	bne.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00f      	b.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1a3      	bne.n	8004bd4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ca4:	e057      	b.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cac:	d106      	bne.n	8004cbc <SPI_WaitFifoStateUntilTimeout+0x26>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d048      	beq.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cc4:	f7fd fd2c 	bl	8002720 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d902      	bls.n	8004cda <SPI_WaitFifoStateUntilTimeout+0x44>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d13d      	bne.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf2:	d111      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d004      	beq.n	8004d08 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d107      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	d10f      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e008      	b.n	8004d68 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d19f      	bne.n	8004ca6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff84 	bl	8004c96 <SPI_WaitFifoStateUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e027      	b.n	8004df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	2180      	movs	r1, #128	; 0x80
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff07 	bl	8004bc2 <SPI_WaitFlagStateUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e014      	b.n	8004df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff ff5d 	bl	8004c96 <SPI_WaitFifoStateUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e000      	b.n	8004df4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e01d      	b.n	8004e4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fa00 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fcc4 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_TIM_Base_Start+0x50>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d00b      	beq.n	8004e8e <HAL_TIM_Base_Start+0x3a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d007      	beq.n	8004e8e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	00010007 	.word	0x00010007

08004ea8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a1a      	ldr	r2, [r3, #32]
 8004ebe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10f      	bne.n	8004ee8 <HAL_TIM_Base_Stop+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	f240 4344 	movw	r3, #1092	; 0x444
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_Base_Stop+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e01d      	b.n	8004f4c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f815 	bl	8004f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 fc43 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	6839      	ldr	r1, [r7, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 ffbc 	bl	8005ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_TIM_PWM_Start+0x7c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIM_PWM_Start+0x2c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a16      	ldr	r2, [pc, #88]	; (8004fe8 <HAL_TIM_PWM_Start+0x80>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <HAL_TIM_PWM_Start+0x30>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_TIM_PWM_Start+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <HAL_TIM_PWM_Start+0x84>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x70>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc6:	d007      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	00010007 	.word	0x00010007

08004ff0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e07b      	b.n	80050fc <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fd f995 	bl	8002348 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b34      	ldr	r3, [pc, #208]	; (8005104 <HAL_TIM_Encoder_Init+0x114>)
 8005032:	400b      	ands	r3, r1
 8005034:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f000 fbc1 	bl	80057c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <HAL_TIM_Encoder_Init+0x118>)
 800506c:	4013      	ands	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	4313      	orrs	r3, r2
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4b21      	ldr	r3, [pc, #132]	; (800510c <HAL_TIM_Encoder_Init+0x11c>)
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_TIM_Encoder_Init+0x120>)
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	4313      	orrs	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	4313      	orrs	r3, r2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4313      	orrs	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fffebff8 	.word	0xfffebff8
 8005108:	fffffcfc 	.word	0xfffffcfc
 800510c:	fffff3f3 	.word	0xfffff3f3
 8005110:	ffff0f0f 	.word	0xffff0f0f

08005114 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_TIM_Encoder_Start+0x16>
 8005124:	2b04      	cmp	r3, #4
 8005126:	d008      	beq.n	800513a <HAL_TIM_Encoder_Start+0x26>
 8005128:	e00f      	b.n	800514a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fee0 	bl	8005ef8 <TIM_CCxChannelCmd>
      break;
 8005138:	e016      	b.n	8005168 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	2104      	movs	r1, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fed8 	bl	8005ef8 <TIM_CCxChannelCmd>
      break;
 8005148:	e00e      	b.n	8005168 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fed0 	bl	8005ef8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2201      	movs	r2, #1
 800515e:	2104      	movs	r1, #4
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fec9 	bl	8005ef8 <TIM_CCxChannelCmd>
      break;
 8005166:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d122      	bne.n	80051de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d11b      	bne.n	80051de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0202 	mvn.w	r2, #2
 80051ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fae1 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80051ca:	e005      	b.n	80051d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fad3 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fae4 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d122      	bne.n	8005232 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d11b      	bne.n	8005232 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f06f 0204 	mvn.w	r2, #4
 8005202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fab7 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 800521e:	e005      	b.n	800522c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 faa9 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 faba 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d122      	bne.n	8005286 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d11b      	bne.n	8005286 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0208 	mvn.w	r2, #8
 8005256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2204      	movs	r2, #4
 800525c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fa8d 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 8005272:	e005      	b.n	8005280 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fa7f 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa90 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d122      	bne.n	80052da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d11b      	bne.n	80052da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0210 	mvn.w	r2, #16
 80052aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2208      	movs	r2, #8
 80052b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa63 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80052c6:	e005      	b.n	80052d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa55 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa66 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10e      	bne.n	8005306 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0201 	mvn.w	r2, #1
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fa2f 	bl	8005764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d10e      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d107      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fea1 	bl	8006074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fe94 	bl	8006088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa14 	bl	80057b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b20      	cmp	r3, #32
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0220 	mvn.w	r2, #32
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fe54 	bl	8006060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e105      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b14      	cmp	r3, #20
 80053ee:	f200 80f0 	bhi.w	80055d2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	080055d3 	.word	0x080055d3
 8005400:	080055d3 	.word	0x080055d3
 8005404:	080055d3 	.word	0x080055d3
 8005408:	0800548d 	.word	0x0800548d
 800540c:	080055d3 	.word	0x080055d3
 8005410:	080055d3 	.word	0x080055d3
 8005414:	080055d3 	.word	0x080055d3
 8005418:	080054cf 	.word	0x080054cf
 800541c:	080055d3 	.word	0x080055d3
 8005420:	080055d3 	.word	0x080055d3
 8005424:	080055d3 	.word	0x080055d3
 8005428:	0800550f 	.word	0x0800550f
 800542c:	080055d3 	.word	0x080055d3
 8005430:	080055d3 	.word	0x080055d3
 8005434:	080055d3 	.word	0x080055d3
 8005438:	08005551 	.word	0x08005551
 800543c:	080055d3 	.word	0x080055d3
 8005440:	080055d3 	.word	0x080055d3
 8005444:	080055d3 	.word	0x080055d3
 8005448:	08005591 	.word	0x08005591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fa58 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6999      	ldr	r1, [r3, #24]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	619a      	str	r2, [r3, #24]
      break;
 800548a:	e0a3      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 faaa 	bl	80059ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
      break;
 80054cc:	e082      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fb01 	bl	8005adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0208 	orr.w	r2, r2, #8
 80054e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0204 	bic.w	r2, r2, #4
 80054f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69d9      	ldr	r1, [r3, #28]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
      break;
 800550c:	e062      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fb57 	bl	8005bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69d9      	ldr	r1, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	021a      	lsls	r2, r3, #8
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	61da      	str	r2, [r3, #28]
      break;
 800554e:	e041      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fb8e 	bl	8005c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0208 	orr.w	r2, r2, #8
 800556a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0204 	bic.w	r2, r2, #4
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800558e:	e021      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fbc0 	bl	8005d1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80055d2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop

080055f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIM_ConfigClockSource+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e0a6      	b.n	8005756 <HAL_TIM_ConfigClockSource+0x166>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4b4f      	ldr	r3, [pc, #316]	; (8005760 <HAL_TIM_ConfigClockSource+0x170>)
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d067      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0x120>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d80b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x6c>
 8005644:	2b10      	cmp	r3, #16
 8005646:	d073      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0x140>
 8005648:	2b10      	cmp	r3, #16
 800564a:	d802      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x62>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d06f      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005650:	e078      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005652:	2b20      	cmp	r3, #32
 8005654:	d06c      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0x140>
 8005656:	2b30      	cmp	r3, #48	; 0x30
 8005658:	d06a      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800565a:	e073      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800565c:	2b70      	cmp	r3, #112	; 0x70
 800565e:	d00d      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x8c>
 8005660:	2b70      	cmp	r3, #112	; 0x70
 8005662:	d804      	bhi.n	800566e <HAL_TIM_ConfigClockSource+0x7e>
 8005664:	2b50      	cmp	r3, #80	; 0x50
 8005666:	d033      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0xe0>
 8005668:	2b60      	cmp	r3, #96	; 0x60
 800566a:	d041      	beq.n	80056f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800566c:	e06a      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005672:	d066      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x152>
 8005674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005678:	d017      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800567a:	e063      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f000 fc14 	bl	8005eb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800569e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]
      break;
 80056a8:	e04c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6899      	ldr	r1, [r3, #8]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f000 fbfd 	bl	8005eb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056cc:	609a      	str	r2, [r3, #8]
      break;
 80056ce:	e039      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6859      	ldr	r1, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	461a      	mov	r2, r3
 80056de:	f000 fb71 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2150      	movs	r1, #80	; 0x50
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fbca 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 80056ee:	e029      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f000 fb90 	bl	8005e22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2160      	movs	r1, #96	; 0x60
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fbba 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 800570e:	e019      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	461a      	mov	r2, r3
 800571e:	f000 fb51 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2140      	movs	r1, #64	; 0x40
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fbaa 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 800572e:	e009      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fba1 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 8005740:	e000      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	fffeff88 	.word	0xfffeff88

08005764 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a40      	ldr	r2, [pc, #256]	; (80058dc <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3d      	ldr	r2, [pc, #244]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3a      	ldr	r2, [pc, #232]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <TIM_Base_SetConfig+0x114>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d027      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d023      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a29      	ldr	r2, [pc, #164]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d017      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <TIM_Base_SetConfig+0x128>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <TIM_Base_SetConfig+0x12c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <TIM_Base_SetConfig+0x130>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <TIM_Base_SetConfig+0x134>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a24      	ldr	r2, [pc, #144]	; (8005900 <TIM_Base_SetConfig+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a23      	ldr	r2, [pc, #140]	; (8005904 <TIM_Base_SetConfig+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0c      	ldr	r2, [pc, #48]	; (80058ec <TIM_Base_SetConfig+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d103      	bne.n	80058c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	615a      	str	r2, [r3, #20]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800
 80058fc:	40001800 	.word	0x40001800
 8005900:	40001c00 	.word	0x40001c00
 8005904:	40002000 	.word	0x40002000

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <TIM_OC1_SetConfig+0xd8>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC1_SetConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <TIM_OC1_SetConfig+0xe0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0308 	bic.w	r3, r3, #8
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <TIM_OC1_SetConfig+0xdc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC1_SetConfig+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <TIM_OC1_SetConfig+0xe0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d111      	bne.n	80059ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	fffeff8f 	.word	0xfffeff8f
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400

080059ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0210 	bic.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <TIM_OC2_SetConfig+0xe4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_OC2_SetConfig+0x68>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <TIM_OC2_SetConfig+0xec>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10d      	bne.n	8005a70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <TIM_OC2_SetConfig+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC2_SetConfig+0x94>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <TIM_OC2_SetConfig+0xec>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d113      	bne.n	8005aa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	feff8fff 	.word	0xfeff8fff
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <TIM_OC3_SetConfig+0xe0>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <TIM_OC3_SetConfig+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC3_SetConfig+0x66>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <TIM_OC3_SetConfig+0xe8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10d      	bne.n	8005b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_OC3_SetConfig+0x92>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC3_SetConfig+0xe8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d113      	bne.n	8005b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <TIM_OC4_SetConfig+0xa4>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <TIM_OC4_SetConfig+0xa8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC4_SetConfig+0x68>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <TIM_OC4_SetConfig+0xac>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d109      	bne.n	8005c44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	019b      	lsls	r3, r3, #6
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	feff8fff 	.word	0xfeff8fff
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400

08005c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <TIM_OC5_SetConfig+0x98>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <TIM_OC5_SetConfig+0x9c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x5e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <TIM_OC5_SetConfig+0xa0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d109      	bne.n	8005cea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	fffeff8f 	.word	0xfffeff8f
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <TIM_OC6_SetConfig+0x9c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	051b      	lsls	r3, r3, #20
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <TIM_OC6_SetConfig+0xa0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC6_SetConfig+0x60>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <TIM_OC6_SetConfig+0xa4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	feff8fff 	.word	0xfeff8fff
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0201 	bic.w	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 030a 	bic.w	r3, r3, #10
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0210 	bic.w	r2, r3, #16
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f043 0307 	orr.w	r3, r3, #7
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	bf00      	nop
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1a      	ldr	r2, [r3, #32]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e06d      	b.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a30      	ldr	r2, [pc, #192]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2f      	ldr	r2, [pc, #188]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d108      	bne.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d022      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d01d      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d018      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d013      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00e      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d009      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a15      	ldr	r2, [pc, #84]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d10c      	bne.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40010000 	.word	0x40010000
 8006048:	40010400 	.word	0x40010400
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40014000 	.word	0x40014000
 800605c:	40001800 	.word	0x40001800

08006060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e040      	b.n	8006130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fc fa0c 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 faa6 	bl	800662c <UART_SetConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e022      	b.n	8006130 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fd44 	bl	8006b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fdcb 	bl	8006cc4 <UART_CheckIdleState>
 800612e:	4603      	mov	r3, r0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614c:	2b20      	cmp	r3, #32
 800614e:	d17f      	bne.n	8006250 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_Transmit+0x24>
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e078      	b.n	8006252 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UART_Transmit+0x36>
 800616a:	2302      	movs	r3, #2
 800616c:	e071      	b.n	8006252 <HAL_UART_Transmit+0x11a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2221      	movs	r2, #33	; 0x21
 8006180:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006182:	f7fc facd 	bl	8002720 <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a0:	d108      	bne.n	80061b4 <HAL_UART_Transmit+0x7c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e003      	b.n	80061bc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80061c4:	e02c      	b.n	8006220 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fda6 	bl	8006d22 <UART_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e038      	b.n	8006252 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	3302      	adds	r3, #2
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e007      	b.n	800620e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	3301      	adds	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1cc      	bne.n	80061c6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2200      	movs	r2, #0
 8006234:	2140      	movs	r1, #64	; 0x40
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fd73 	bl	8006d22 <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e005      	b.n	8006252 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626e:	2b20      	cmp	r3, #32
 8006270:	f040 808a 	bne.w	8006388 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Receive_IT+0x24>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e082      	b.n	800638a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_UART_Receive_IT+0x36>
 800628e:	2302      	movs	r3, #2
 8006290:	e07b      	b.n	800638a <HAL_UART_Receive_IT+0x12e>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d10e      	bne.n	80062de <HAL_UART_Receive_IT+0x82>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <HAL_UART_Receive_IT+0x78>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d2:	e02d      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062dc:	e028      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <HAL_UART_Receive_IT+0xa6>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_UART_Receive_IT+0x9c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f6:	e01b      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	227f      	movs	r2, #127	; 0x7f
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006300:	e016      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630a:	d10d      	bne.n	8006328 <HAL_UART_Receive_IT+0xcc>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_UART_Receive_IT+0xc2>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	227f      	movs	r2, #127	; 0x7f
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631c:	e008      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	223f      	movs	r2, #63	; 0x3f
 8006322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006326:	e003      	b.n	8006330 <HAL_UART_Receive_IT+0xd4>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2222      	movs	r2, #34	; 0x22
 800633a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d107      	bne.n	8006366 <HAL_UART_Receive_IT+0x10a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <HAL_UART_Receive_IT+0x13c>)
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
 8006364:	e002      	b.n	800636c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a0c      	ldr	r2, [pc, #48]	; (800639c <HAL_UART_Receive_IT+0x140>)
 800636a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006382:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	08006f5d 	.word	0x08006f5d
 800639c:	08006eb7 	.word	0x08006eb7

080063a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80063c6:	4013      	ands	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d113      	bne.n	80063f8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00e      	beq.n	80063f8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8100 	beq.w	80065ee <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      }
      return;
 80063f6:	e0fa      	b.n	80065ee <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80d5 	beq.w	80065aa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 80ca 	beq.w	80065aa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <HAL_UART_IRQHandler+0x9e>
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2201      	movs	r2, #1
 8006430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <HAL_UART_IRQHandler+0xc6>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2202      	movs	r2, #2
 8006458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	f043 0204 	orr.w	r2, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <HAL_UART_IRQHandler+0xee>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2204      	movs	r2, #4
 8006480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006486:	f043 0202 	orr.w	r2, r3, #2
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d013      	beq.n	80064c0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2208      	movs	r2, #8
 80064b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b8:	f043 0208 	orr.w	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00f      	beq.n	80064ea <HAL_UART_IRQHandler+0x14a>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d07f      	beq.n	80065f2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d004      	beq.n	8006534 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d031      	beq.n	8006598 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fc6f 	bl	8006e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d123      	bne.n	8006590 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006556:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	4a26      	ldr	r2, [pc, #152]	; (8006600 <HAL_UART_IRQHandler+0x260>)
 8006566:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	4618      	mov	r0, r3
 800656e:	f7fc fb01 	bl	8002b74 <HAL_DMA_Abort_IT>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d016      	beq.n	80065a6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006586:	e00e      	b.n	80065a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f845 	bl	8006618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658e:	e00a      	b.n	80065a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f841 	bl	8006618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006596:	e006      	b.n	80065a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f83d 	bl	8006618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80065a4:	e025      	b.n	80065f2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	bf00      	nop
    return;
 80065a8:	e023      	b.n	80065f2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
    }
    return;
 80065ce:	e012      	b.n	80065f6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00e      	beq.n	80065f8 <HAL_UART_IRQHandler+0x258>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc4d 	bl	8006e84 <UART_EndTransmit_IT>
    return;
 80065ea:	bf00      	nop
 80065ec:	e004      	b.n	80065f8 <HAL_UART_IRQHandler+0x258>
      return;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <HAL_UART_IRQHandler+0x258>
    return;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <HAL_UART_IRQHandler+0x258>
    return;
 80065f6:	bf00      	nop
  }

}
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	08006e59 	.word	0x08006e59

08006604 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4bb1      	ldr	r3, [pc, #708]	; (8006920 <UART_SetConfig+0x2f4>)
 800665c:	4013      	ands	r3, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6939      	ldr	r1, [r7, #16]
 8006664:	430b      	orrs	r3, r1
 8006666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a9f      	ldr	r2, [pc, #636]	; (8006924 <UART_SetConfig+0x2f8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d121      	bne.n	80066f0 <UART_SetConfig+0xc4>
 80066ac:	4b9e      	ldr	r3, [pc, #632]	; (8006928 <UART_SetConfig+0x2fc>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d816      	bhi.n	80066e8 <UART_SetConfig+0xbc>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x94>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	080066d7 	.word	0x080066d7
 80066cc:	080066e3 	.word	0x080066e3
 80066d0:	2301      	movs	r3, #1
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e151      	b.n	800697a <UART_SetConfig+0x34e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e14e      	b.n	800697a <UART_SetConfig+0x34e>
 80066dc:	2304      	movs	r3, #4
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e14b      	b.n	800697a <UART_SetConfig+0x34e>
 80066e2:	2308      	movs	r3, #8
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e148      	b.n	800697a <UART_SetConfig+0x34e>
 80066e8:	2310      	movs	r3, #16
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	bf00      	nop
 80066ee:	e144      	b.n	800697a <UART_SetConfig+0x34e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a8d      	ldr	r2, [pc, #564]	; (800692c <UART_SetConfig+0x300>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d134      	bne.n	8006764 <UART_SetConfig+0x138>
 80066fa:	4b8b      	ldr	r3, [pc, #556]	; (8006928 <UART_SetConfig+0x2fc>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b0c      	cmp	r3, #12
 8006706:	d829      	bhi.n	800675c <UART_SetConfig+0x130>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0xe4>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006745 	.word	0x08006745
 8006714:	0800675d 	.word	0x0800675d
 8006718:	0800675d 	.word	0x0800675d
 800671c:	0800675d 	.word	0x0800675d
 8006720:	08006751 	.word	0x08006751
 8006724:	0800675d 	.word	0x0800675d
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800675d 	.word	0x0800675d
 8006730:	0800674b 	.word	0x0800674b
 8006734:	0800675d 	.word	0x0800675d
 8006738:	0800675d 	.word	0x0800675d
 800673c:	0800675d 	.word	0x0800675d
 8006740:	08006757 	.word	0x08006757
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e117      	b.n	800697a <UART_SetConfig+0x34e>
 800674a:	2302      	movs	r3, #2
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e114      	b.n	800697a <UART_SetConfig+0x34e>
 8006750:	2304      	movs	r3, #4
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e111      	b.n	800697a <UART_SetConfig+0x34e>
 8006756:	2308      	movs	r3, #8
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e10e      	b.n	800697a <UART_SetConfig+0x34e>
 800675c:	2310      	movs	r3, #16
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	bf00      	nop
 8006762:	e10a      	b.n	800697a <UART_SetConfig+0x34e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a71      	ldr	r2, [pc, #452]	; (8006930 <UART_SetConfig+0x304>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d120      	bne.n	80067b0 <UART_SetConfig+0x184>
 800676e:	4b6e      	ldr	r3, [pc, #440]	; (8006928 <UART_SetConfig+0x2fc>)
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006778:	2b10      	cmp	r3, #16
 800677a:	d00f      	beq.n	800679c <UART_SetConfig+0x170>
 800677c:	2b10      	cmp	r3, #16
 800677e:	d802      	bhi.n	8006786 <UART_SetConfig+0x15a>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <UART_SetConfig+0x164>
 8006784:	e010      	b.n	80067a8 <UART_SetConfig+0x17c>
 8006786:	2b20      	cmp	r3, #32
 8006788:	d005      	beq.n	8006796 <UART_SetConfig+0x16a>
 800678a:	2b30      	cmp	r3, #48	; 0x30
 800678c:	d009      	beq.n	80067a2 <UART_SetConfig+0x176>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x17c>
 8006790:	2300      	movs	r3, #0
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e0f1      	b.n	800697a <UART_SetConfig+0x34e>
 8006796:	2302      	movs	r3, #2
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e0ee      	b.n	800697a <UART_SetConfig+0x34e>
 800679c:	2304      	movs	r3, #4
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e0eb      	b.n	800697a <UART_SetConfig+0x34e>
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e0e8      	b.n	800697a <UART_SetConfig+0x34e>
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	bf00      	nop
 80067ae:	e0e4      	b.n	800697a <UART_SetConfig+0x34e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5f      	ldr	r2, [pc, #380]	; (8006934 <UART_SetConfig+0x308>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d120      	bne.n	80067fc <UART_SetConfig+0x1d0>
 80067ba:	4b5b      	ldr	r3, [pc, #364]	; (8006928 <UART_SetConfig+0x2fc>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d00f      	beq.n	80067e8 <UART_SetConfig+0x1bc>
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d802      	bhi.n	80067d2 <UART_SetConfig+0x1a6>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <UART_SetConfig+0x1b0>
 80067d0:	e010      	b.n	80067f4 <UART_SetConfig+0x1c8>
 80067d2:	2b80      	cmp	r3, #128	; 0x80
 80067d4:	d005      	beq.n	80067e2 <UART_SetConfig+0x1b6>
 80067d6:	2bc0      	cmp	r3, #192	; 0xc0
 80067d8:	d009      	beq.n	80067ee <UART_SetConfig+0x1c2>
 80067da:	e00b      	b.n	80067f4 <UART_SetConfig+0x1c8>
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e0cb      	b.n	800697a <UART_SetConfig+0x34e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e0c8      	b.n	800697a <UART_SetConfig+0x34e>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e0c5      	b.n	800697a <UART_SetConfig+0x34e>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e0c2      	b.n	800697a <UART_SetConfig+0x34e>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	bf00      	nop
 80067fa:	e0be      	b.n	800697a <UART_SetConfig+0x34e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a4d      	ldr	r2, [pc, #308]	; (8006938 <UART_SetConfig+0x30c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d124      	bne.n	8006850 <UART_SetConfig+0x224>
 8006806:	4b48      	ldr	r3, [pc, #288]	; (8006928 <UART_SetConfig+0x2fc>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006814:	d012      	beq.n	800683c <UART_SetConfig+0x210>
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d802      	bhi.n	8006822 <UART_SetConfig+0x1f6>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <UART_SetConfig+0x204>
 8006820:	e012      	b.n	8006848 <UART_SetConfig+0x21c>
 8006822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006826:	d006      	beq.n	8006836 <UART_SetConfig+0x20a>
 8006828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800682c:	d009      	beq.n	8006842 <UART_SetConfig+0x216>
 800682e:	e00b      	b.n	8006848 <UART_SetConfig+0x21c>
 8006830:	2300      	movs	r3, #0
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e0a1      	b.n	800697a <UART_SetConfig+0x34e>
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e09e      	b.n	800697a <UART_SetConfig+0x34e>
 800683c:	2304      	movs	r3, #4
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e09b      	b.n	800697a <UART_SetConfig+0x34e>
 8006842:	2308      	movs	r3, #8
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e098      	b.n	800697a <UART_SetConfig+0x34e>
 8006848:	2310      	movs	r3, #16
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	bf00      	nop
 800684e:	e094      	b.n	800697a <UART_SetConfig+0x34e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a39      	ldr	r2, [pc, #228]	; (800693c <UART_SetConfig+0x310>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d124      	bne.n	80068a4 <UART_SetConfig+0x278>
 800685a:	4b33      	ldr	r3, [pc, #204]	; (8006928 <UART_SetConfig+0x2fc>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006868:	d012      	beq.n	8006890 <UART_SetConfig+0x264>
 800686a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686e:	d802      	bhi.n	8006876 <UART_SetConfig+0x24a>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <UART_SetConfig+0x258>
 8006874:	e012      	b.n	800689c <UART_SetConfig+0x270>
 8006876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687a:	d006      	beq.n	800688a <UART_SetConfig+0x25e>
 800687c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006880:	d009      	beq.n	8006896 <UART_SetConfig+0x26a>
 8006882:	e00b      	b.n	800689c <UART_SetConfig+0x270>
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e077      	b.n	800697a <UART_SetConfig+0x34e>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e074      	b.n	800697a <UART_SetConfig+0x34e>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e071      	b.n	800697a <UART_SetConfig+0x34e>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e06e      	b.n	800697a <UART_SetConfig+0x34e>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	bf00      	nop
 80068a2:	e06a      	b.n	800697a <UART_SetConfig+0x34e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a25      	ldr	r2, [pc, #148]	; (8006940 <UART_SetConfig+0x314>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d124      	bne.n	80068f8 <UART_SetConfig+0x2cc>
 80068ae:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <UART_SetConfig+0x2fc>)
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d012      	beq.n	80068e4 <UART_SetConfig+0x2b8>
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d802      	bhi.n	80068ca <UART_SetConfig+0x29e>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <UART_SetConfig+0x2ac>
 80068c8:	e012      	b.n	80068f0 <UART_SetConfig+0x2c4>
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	d006      	beq.n	80068de <UART_SetConfig+0x2b2>
 80068d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d4:	d009      	beq.n	80068ea <UART_SetConfig+0x2be>
 80068d6:	e00b      	b.n	80068f0 <UART_SetConfig+0x2c4>
 80068d8:	2300      	movs	r3, #0
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e04d      	b.n	800697a <UART_SetConfig+0x34e>
 80068de:	2302      	movs	r3, #2
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	e04a      	b.n	800697a <UART_SetConfig+0x34e>
 80068e4:	2304      	movs	r3, #4
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e047      	b.n	800697a <UART_SetConfig+0x34e>
 80068ea:	2308      	movs	r3, #8
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e044      	b.n	800697a <UART_SetConfig+0x34e>
 80068f0:	2310      	movs	r3, #16
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	bf00      	nop
 80068f6:	e040      	b.n	800697a <UART_SetConfig+0x34e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a11      	ldr	r2, [pc, #68]	; (8006944 <UART_SetConfig+0x318>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d139      	bne.n	8006976 <UART_SetConfig+0x34a>
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <UART_SetConfig+0x2fc>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800690c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006910:	d027      	beq.n	8006962 <UART_SetConfig+0x336>
 8006912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006916:	d817      	bhi.n	8006948 <UART_SetConfig+0x31c>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01c      	beq.n	8006956 <UART_SetConfig+0x32a>
 800691c:	e027      	b.n	800696e <UART_SetConfig+0x342>
 800691e:	bf00      	nop
 8006920:	efff69f3 	.word	0xefff69f3
 8006924:	40011000 	.word	0x40011000
 8006928:	40023800 	.word	0x40023800
 800692c:	40004400 	.word	0x40004400
 8006930:	40004800 	.word	0x40004800
 8006934:	40004c00 	.word	0x40004c00
 8006938:	40005000 	.word	0x40005000
 800693c:	40011400 	.word	0x40011400
 8006940:	40007800 	.word	0x40007800
 8006944:	40007c00 	.word	0x40007c00
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694c:	d006      	beq.n	800695c <UART_SetConfig+0x330>
 800694e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006952:	d009      	beq.n	8006968 <UART_SetConfig+0x33c>
 8006954:	e00b      	b.n	800696e <UART_SetConfig+0x342>
 8006956:	2300      	movs	r3, #0
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e00e      	b.n	800697a <UART_SetConfig+0x34e>
 800695c:	2302      	movs	r3, #2
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e00b      	b.n	800697a <UART_SetConfig+0x34e>
 8006962:	2304      	movs	r3, #4
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e008      	b.n	800697a <UART_SetConfig+0x34e>
 8006968:	2308      	movs	r3, #8
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e005      	b.n	800697a <UART_SetConfig+0x34e>
 800696e:	2310      	movs	r3, #16
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	bf00      	nop
 8006974:	e001      	b.n	800697a <UART_SetConfig+0x34e>
 8006976:	2310      	movs	r3, #16
 8006978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006982:	d17f      	bne.n	8006a84 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006984:	7ffb      	ldrb	r3, [r7, #31]
 8006986:	2b08      	cmp	r3, #8
 8006988:	d85c      	bhi.n	8006a44 <UART_SetConfig+0x418>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <UART_SetConfig+0x364>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069f5 	.word	0x080069f5
 800699c:	08006a45 	.word	0x08006a45
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006a45 	.word	0x08006a45
 80069a8:	08006a45 	.word	0x08006a45
 80069ac:	08006a45 	.word	0x08006a45
 80069b0:	08006a2d 	.word	0x08006a2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7fd f8e4 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80069b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	005a      	lsls	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	61bb      	str	r3, [r7, #24]
        break;
 80069d2:	e03a      	b.n	8006a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d4:	f7fd f8e8 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 80069d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	005a      	lsls	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	61bb      	str	r3, [r7, #24]
        break;
 80069f2:	e02a      	b.n	8006a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	085a      	lsrs	r2, r3, #1
 80069fa:	4b5f      	ldr	r3, [pc, #380]	; (8006b78 <UART_SetConfig+0x54c>)
 80069fc:	4413      	add	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6852      	ldr	r2, [r2, #4]
 8006a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	61bb      	str	r3, [r7, #24]
        break;
 8006a0a:	e01e      	b.n	8006a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0c:	f7fc ffd4 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8006a10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	005a      	lsls	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	61bb      	str	r3, [r7, #24]
        break;
 8006a2a:	e00e      	b.n	8006a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	61bb      	str	r3, [r7, #24]
        break;
 8006a42:	e002      	b.n	8006a4a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	75fb      	strb	r3, [r7, #23]
        break;
 8006a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b0f      	cmp	r3, #15
 8006a4e:	d916      	bls.n	8006a7e <UART_SetConfig+0x452>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a56:	d212      	bcs.n	8006a7e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f023 030f 	bic.w	r3, r3, #15
 8006a60:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	897b      	ldrh	r3, [r7, #10]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	897a      	ldrh	r2, [r7, #10]
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e070      	b.n	8006b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
 8006a82:	e06d      	b.n	8006b60 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006a84:	7ffb      	ldrb	r3, [r7, #31]
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d859      	bhi.n	8006b3e <UART_SetConfig+0x512>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <UART_SetConfig+0x464>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006ad3 	.word	0x08006ad3
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006b3f 	.word	0x08006b3f
 8006aa0:	08006b09 	.word	0x08006b09
 8006aa4:	08006b3f 	.word	0x08006b3f
 8006aa8:	08006b3f 	.word	0x08006b3f
 8006aac:	08006b3f 	.word	0x08006b3f
 8006ab0:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab4:	f7fd f864 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8006ab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	085a      	lsrs	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	441a      	add	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	61bb      	str	r3, [r7, #24]
        break;
 8006ad0:	e038      	b.n	8006b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad2:	f7fd f869 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8006ad6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	085a      	lsrs	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	61bb      	str	r3, [r7, #24]
        break;
 8006aee:	e029      	b.n	8006b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	085a      	lsrs	r2, r3, #1
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <UART_SetConfig+0x550>)
 8006af8:	4413      	add	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6852      	ldr	r2, [r2, #4]
 8006afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	61bb      	str	r3, [r7, #24]
        break;
 8006b06:	e01d      	b.n	8006b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b08:	f7fc ff56 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8006b0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	085a      	lsrs	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	441a      	add	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	61bb      	str	r3, [r7, #24]
        break;
 8006b24:	e00e      	b.n	8006b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	61bb      	str	r3, [r7, #24]
        break;
 8006b3c:	e002      	b.n	8006b44 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
        break;
 8006b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d908      	bls.n	8006b5c <UART_SetConfig+0x530>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b50:	d204      	bcs.n	8006b5c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	e001      	b.n	8006b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	01e84800 	.word	0x01e84800
 8006b7c:	00f42400 	.word	0x00f42400

08006b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7e:	d10a      	bne.n	8006c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006cd2:	f7fb fd25 	bl	8002720 <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d10e      	bne.n	8006d04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f814 	bl	8006d22 <UART_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e00a      	b.n	8006d1a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	603b      	str	r3, [r7, #0]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d32:	e05d      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3a:	d059      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3c:	f7fb fcf0 	bl	8002720 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d302      	bcc.n	8006d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11b      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e042      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d02b      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da6:	d123      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006db0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e00f      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d092      	beq.n	8006d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff fbce 	bl	8006618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fbab 	bl	8006604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ec4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eca:	2b22      	cmp	r3, #34	; 0x22
 8006ecc:	d13a      	bne.n	8006f44 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ed6:	89bb      	ldrh	r3, [r7, #12]
 8006ed8:	b2d9      	uxtb	r1, r3
 8006eda:	89fb      	ldrh	r3, [r7, #14]
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d121      	bne.n	8006f54 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f1e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fa fd6d 	bl	8001a1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f42:	e007      	b.n	8006f54 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0208 	orr.w	r2, r2, #8
 8006f52:	619a      	str	r2, [r3, #24]
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f6a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f70:	2b22      	cmp	r3, #34	; 0x22
 8006f72:	d13a      	bne.n	8006fea <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f82:	89ba      	ldrh	r2, [r7, #12]
 8006f84:	89fb      	ldrh	r3, [r7, #14]
 8006f86:	4013      	ands	r3, r2
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	1c9a      	adds	r2, r3, #2
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d121      	bne.n	8006ffa <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa fd1a 	bl	8001a1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe8:	e007      	b.n	8006ffa <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0208 	orr.w	r2, r2, #8
 8006ff8:	619a      	str	r2, [r3, #24]
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <__errno>:
 8007004:	4b01      	ldr	r3, [pc, #4]	; (800700c <__errno+0x8>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000098 	.word	0x20000098

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4e0d      	ldr	r6, [pc, #52]	; (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	; (800704c <__libc_init_array+0x3c>)
 8007016:	1ba4      	subs	r4, r4, r6
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2500      	movs	r5, #0
 800701c:	42a5      	cmp	r5, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4e0b      	ldr	r6, [pc, #44]	; (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	; (8007054 <__libc_init_array+0x44>)
 8007024:	f001 f944 	bl	80082b0 <_init>
 8007028:	1ba4      	subs	r4, r4, r6
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2500      	movs	r5, #0
 800702e:	42a5      	cmp	r5, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007038:	4798      	blx	r3
 800703a:	3501      	adds	r5, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007042:	4798      	blx	r3
 8007044:	3501      	adds	r5, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	080084e8 	.word	0x080084e8
 800704c:	080084e8 	.word	0x080084e8
 8007050:	080084e8 	.word	0x080084e8
 8007054:	080084ec 	.word	0x080084ec

08007058 <memset>:
 8007058:	4402      	add	r2, r0
 800705a:	4603      	mov	r3, r0
 800705c:	4293      	cmp	r3, r2
 800705e:	d100      	bne.n	8007062 <memset+0xa>
 8007060:	4770      	bx	lr
 8007062:	f803 1b01 	strb.w	r1, [r3], #1
 8007066:	e7f9      	b.n	800705c <memset+0x4>

08007068 <siprintf>:
 8007068:	b40e      	push	{r1, r2, r3}
 800706a:	b500      	push	{lr}
 800706c:	b09c      	sub	sp, #112	; 0x70
 800706e:	ab1d      	add	r3, sp, #116	; 0x74
 8007070:	9002      	str	r0, [sp, #8]
 8007072:	9006      	str	r0, [sp, #24]
 8007074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <siprintf+0x38>)
 800707a:	9107      	str	r1, [sp, #28]
 800707c:	9104      	str	r1, [sp, #16]
 800707e:	4909      	ldr	r1, [pc, #36]	; (80070a4 <siprintf+0x3c>)
 8007080:	f853 2b04 	ldr.w	r2, [r3], #4
 8007084:	9105      	str	r1, [sp, #20]
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	a902      	add	r1, sp, #8
 800708c:	f000 f8ca 	bl	8007224 <_svfiprintf_r>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	b01c      	add	sp, #112	; 0x70
 8007098:	f85d eb04 	ldr.w	lr, [sp], #4
 800709c:	b003      	add	sp, #12
 800709e:	4770      	bx	lr
 80070a0:	20000098 	.word	0x20000098
 80070a4:	ffff0208 	.word	0xffff0208

080070a8 <siscanf>:
 80070a8:	b40e      	push	{r1, r2, r3}
 80070aa:	b530      	push	{r4, r5, lr}
 80070ac:	b09c      	sub	sp, #112	; 0x70
 80070ae:	ac1f      	add	r4, sp, #124	; 0x7c
 80070b0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80070b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80070b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80070bc:	9002      	str	r0, [sp, #8]
 80070be:	9006      	str	r0, [sp, #24]
 80070c0:	f7f9 f8a6 	bl	8000210 <strlen>
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <siscanf+0x4c>)
 80070c6:	9003      	str	r0, [sp, #12]
 80070c8:	9007      	str	r0, [sp, #28]
 80070ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80070cc:	480a      	ldr	r0, [pc, #40]	; (80070f8 <siscanf+0x50>)
 80070ce:	9401      	str	r4, [sp, #4]
 80070d0:	2300      	movs	r3, #0
 80070d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d4:	9314      	str	r3, [sp, #80]	; 0x50
 80070d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070de:	462a      	mov	r2, r5
 80070e0:	4623      	mov	r3, r4
 80070e2:	a902      	add	r1, sp, #8
 80070e4:	6800      	ldr	r0, [r0, #0]
 80070e6:	f000 f9ef 	bl	80074c8 <__ssvfiscanf_r>
 80070ea:	b01c      	add	sp, #112	; 0x70
 80070ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	080070fd 	.word	0x080070fd
 80070f8:	20000098 	.word	0x20000098

080070fc <__seofread>:
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <strcat>:
 8007100:	b510      	push	{r4, lr}
 8007102:	4603      	mov	r3, r0
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	1c5c      	adds	r4, r3, #1
 8007108:	b93a      	cbnz	r2, 800711a <strcat+0x1a>
 800710a:	3b01      	subs	r3, #1
 800710c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007110:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1f9      	bne.n	800710c <strcat+0xc>
 8007118:	bd10      	pop	{r4, pc}
 800711a:	4623      	mov	r3, r4
 800711c:	e7f2      	b.n	8007104 <strcat+0x4>

0800711e <strcpy>:
 800711e:	4603      	mov	r3, r0
 8007120:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007124:	f803 2b01 	strb.w	r2, [r3], #1
 8007128:	2a00      	cmp	r2, #0
 800712a:	d1f9      	bne.n	8007120 <strcpy+0x2>
 800712c:	4770      	bx	lr
	...

08007130 <_vsiprintf_r>:
 8007130:	b500      	push	{lr}
 8007132:	b09b      	sub	sp, #108	; 0x6c
 8007134:	9100      	str	r1, [sp, #0]
 8007136:	9104      	str	r1, [sp, #16]
 8007138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800713c:	9105      	str	r1, [sp, #20]
 800713e:	9102      	str	r1, [sp, #8]
 8007140:	4905      	ldr	r1, [pc, #20]	; (8007158 <_vsiprintf_r+0x28>)
 8007142:	9103      	str	r1, [sp, #12]
 8007144:	4669      	mov	r1, sp
 8007146:	f000 f86d 	bl	8007224 <_svfiprintf_r>
 800714a:	9b00      	ldr	r3, [sp, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	b01b      	add	sp, #108	; 0x6c
 8007152:	f85d fb04 	ldr.w	pc, [sp], #4
 8007156:	bf00      	nop
 8007158:	ffff0208 	.word	0xffff0208

0800715c <vsiprintf>:
 800715c:	4613      	mov	r3, r2
 800715e:	460a      	mov	r2, r1
 8007160:	4601      	mov	r1, r0
 8007162:	4802      	ldr	r0, [pc, #8]	; (800716c <vsiprintf+0x10>)
 8007164:	6800      	ldr	r0, [r0, #0]
 8007166:	f7ff bfe3 	b.w	8007130 <_vsiprintf_r>
 800716a:	bf00      	nop
 800716c:	20000098 	.word	0x20000098

08007170 <__ssputs_r>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	688e      	ldr	r6, [r1, #8]
 8007176:	429e      	cmp	r6, r3
 8007178:	4682      	mov	sl, r0
 800717a:	460c      	mov	r4, r1
 800717c:	4690      	mov	r8, r2
 800717e:	4699      	mov	r9, r3
 8007180:	d837      	bhi.n	80071f2 <__ssputs_r+0x82>
 8007182:	898a      	ldrh	r2, [r1, #12]
 8007184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007188:	d031      	beq.n	80071ee <__ssputs_r+0x7e>
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	6909      	ldr	r1, [r1, #16]
 800718e:	1a6f      	subs	r7, r5, r1
 8007190:	6965      	ldr	r5, [r4, #20]
 8007192:	2302      	movs	r3, #2
 8007194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007198:	fb95 f5f3 	sdiv	r5, r5, r3
 800719c:	f109 0301 	add.w	r3, r9, #1
 80071a0:	443b      	add	r3, r7
 80071a2:	429d      	cmp	r5, r3
 80071a4:	bf38      	it	cc
 80071a6:	461d      	movcc	r5, r3
 80071a8:	0553      	lsls	r3, r2, #21
 80071aa:	d530      	bpl.n	800720e <__ssputs_r+0x9e>
 80071ac:	4629      	mov	r1, r5
 80071ae:	f000 ffd7 	bl	8008160 <_malloc_r>
 80071b2:	4606      	mov	r6, r0
 80071b4:	b950      	cbnz	r0, 80071cc <__ssputs_r+0x5c>
 80071b6:	230c      	movs	r3, #12
 80071b8:	f8ca 3000 	str.w	r3, [sl]
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071cc:	463a      	mov	r2, r7
 80071ce:	6921      	ldr	r1, [r4, #16]
 80071d0:	f000 ff54 	bl	800807c <memcpy>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	6126      	str	r6, [r4, #16]
 80071e2:	6165      	str	r5, [r4, #20]
 80071e4:	443e      	add	r6, r7
 80071e6:	1bed      	subs	r5, r5, r7
 80071e8:	6026      	str	r6, [r4, #0]
 80071ea:	60a5      	str	r5, [r4, #8]
 80071ec:	464e      	mov	r6, r9
 80071ee:	454e      	cmp	r6, r9
 80071f0:	d900      	bls.n	80071f4 <__ssputs_r+0x84>
 80071f2:	464e      	mov	r6, r9
 80071f4:	4632      	mov	r2, r6
 80071f6:	4641      	mov	r1, r8
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	f000 ff4a 	bl	8008092 <memmove>
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	441e      	add	r6, r3
 8007208:	6026      	str	r6, [r4, #0]
 800720a:	2000      	movs	r0, #0
 800720c:	e7dc      	b.n	80071c8 <__ssputs_r+0x58>
 800720e:	462a      	mov	r2, r5
 8007210:	f001 f800 	bl	8008214 <_realloc_r>
 8007214:	4606      	mov	r6, r0
 8007216:	2800      	cmp	r0, #0
 8007218:	d1e2      	bne.n	80071e0 <__ssputs_r+0x70>
 800721a:	6921      	ldr	r1, [r4, #16]
 800721c:	4650      	mov	r0, sl
 800721e:	f000 ff51 	bl	80080c4 <_free_r>
 8007222:	e7c8      	b.n	80071b6 <__ssputs_r+0x46>

08007224 <_svfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	461d      	mov	r5, r3
 800722a:	898b      	ldrh	r3, [r1, #12]
 800722c:	061f      	lsls	r7, r3, #24
 800722e:	b09d      	sub	sp, #116	; 0x74
 8007230:	4680      	mov	r8, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4616      	mov	r6, r2
 8007236:	d50f      	bpl.n	8007258 <_svfiprintf_r+0x34>
 8007238:	690b      	ldr	r3, [r1, #16]
 800723a:	b96b      	cbnz	r3, 8007258 <_svfiprintf_r+0x34>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	f000 ff8f 	bl	8008160 <_malloc_r>
 8007242:	6020      	str	r0, [r4, #0]
 8007244:	6120      	str	r0, [r4, #16]
 8007246:	b928      	cbnz	r0, 8007254 <_svfiprintf_r+0x30>
 8007248:	230c      	movs	r3, #12
 800724a:	f8c8 3000 	str.w	r3, [r8]
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	e0c8      	b.n	80073e6 <_svfiprintf_r+0x1c2>
 8007254:	2340      	movs	r3, #64	; 0x40
 8007256:	6163      	str	r3, [r4, #20]
 8007258:	2300      	movs	r3, #0
 800725a:	9309      	str	r3, [sp, #36]	; 0x24
 800725c:	2320      	movs	r3, #32
 800725e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007262:	2330      	movs	r3, #48	; 0x30
 8007264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007268:	9503      	str	r5, [sp, #12]
 800726a:	f04f 0b01 	mov.w	fp, #1
 800726e:	4637      	mov	r7, r6
 8007270:	463d      	mov	r5, r7
 8007272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007276:	b10b      	cbz	r3, 800727c <_svfiprintf_r+0x58>
 8007278:	2b25      	cmp	r3, #37	; 0x25
 800727a:	d13e      	bne.n	80072fa <_svfiprintf_r+0xd6>
 800727c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007280:	d00b      	beq.n	800729a <_svfiprintf_r+0x76>
 8007282:	4653      	mov	r3, sl
 8007284:	4632      	mov	r2, r6
 8007286:	4621      	mov	r1, r4
 8007288:	4640      	mov	r0, r8
 800728a:	f7ff ff71 	bl	8007170 <__ssputs_r>
 800728e:	3001      	adds	r0, #1
 8007290:	f000 80a4 	beq.w	80073dc <_svfiprintf_r+0x1b8>
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	4453      	add	r3, sl
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	783b      	ldrb	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 809d 	beq.w	80073dc <_svfiprintf_r+0x1b8>
 80072a2:	2300      	movs	r3, #0
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295
 80072a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	9307      	str	r3, [sp, #28]
 80072b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072b4:	931a      	str	r3, [sp, #104]	; 0x68
 80072b6:	462f      	mov	r7, r5
 80072b8:	2205      	movs	r2, #5
 80072ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80072be:	4850      	ldr	r0, [pc, #320]	; (8007400 <_svfiprintf_r+0x1dc>)
 80072c0:	f7f8 ffae 	bl	8000220 <memchr>
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	b9d0      	cbnz	r0, 80072fe <_svfiprintf_r+0xda>
 80072c8:	06d9      	lsls	r1, r3, #27
 80072ca:	bf44      	itt	mi
 80072cc:	2220      	movmi	r2, #32
 80072ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072d2:	071a      	lsls	r2, r3, #28
 80072d4:	bf44      	itt	mi
 80072d6:	222b      	movmi	r2, #43	; 0x2b
 80072d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072dc:	782a      	ldrb	r2, [r5, #0]
 80072de:	2a2a      	cmp	r2, #42	; 0x2a
 80072e0:	d015      	beq.n	800730e <_svfiprintf_r+0xea>
 80072e2:	9a07      	ldr	r2, [sp, #28]
 80072e4:	462f      	mov	r7, r5
 80072e6:	2000      	movs	r0, #0
 80072e8:	250a      	movs	r5, #10
 80072ea:	4639      	mov	r1, r7
 80072ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f0:	3b30      	subs	r3, #48	; 0x30
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	d94d      	bls.n	8007392 <_svfiprintf_r+0x16e>
 80072f6:	b1b8      	cbz	r0, 8007328 <_svfiprintf_r+0x104>
 80072f8:	e00f      	b.n	800731a <_svfiprintf_r+0xf6>
 80072fa:	462f      	mov	r7, r5
 80072fc:	e7b8      	b.n	8007270 <_svfiprintf_r+0x4c>
 80072fe:	4a40      	ldr	r2, [pc, #256]	; (8007400 <_svfiprintf_r+0x1dc>)
 8007300:	1a80      	subs	r0, r0, r2
 8007302:	fa0b f000 	lsl.w	r0, fp, r0
 8007306:	4318      	orrs	r0, r3
 8007308:	9004      	str	r0, [sp, #16]
 800730a:	463d      	mov	r5, r7
 800730c:	e7d3      	b.n	80072b6 <_svfiprintf_r+0x92>
 800730e:	9a03      	ldr	r2, [sp, #12]
 8007310:	1d11      	adds	r1, r2, #4
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	2a00      	cmp	r2, #0
 8007318:	db01      	blt.n	800731e <_svfiprintf_r+0xfa>
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	e004      	b.n	8007328 <_svfiprintf_r+0x104>
 800731e:	4252      	negs	r2, r2
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	9207      	str	r2, [sp, #28]
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	783b      	ldrb	r3, [r7, #0]
 800732a:	2b2e      	cmp	r3, #46	; 0x2e
 800732c:	d10c      	bne.n	8007348 <_svfiprintf_r+0x124>
 800732e:	787b      	ldrb	r3, [r7, #1]
 8007330:	2b2a      	cmp	r3, #42	; 0x2a
 8007332:	d133      	bne.n	800739c <_svfiprintf_r+0x178>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9203      	str	r2, [sp, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfb8      	it	lt
 8007340:	f04f 33ff 	movlt.w	r3, #4294967295
 8007344:	3702      	adds	r7, #2
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	4d2e      	ldr	r5, [pc, #184]	; (8007404 <_svfiprintf_r+0x1e0>)
 800734a:	7839      	ldrb	r1, [r7, #0]
 800734c:	2203      	movs	r2, #3
 800734e:	4628      	mov	r0, r5
 8007350:	f7f8 ff66 	bl	8000220 <memchr>
 8007354:	b138      	cbz	r0, 8007366 <_svfiprintf_r+0x142>
 8007356:	2340      	movs	r3, #64	; 0x40
 8007358:	1b40      	subs	r0, r0, r5
 800735a:	fa03 f000 	lsl.w	r0, r3, r0
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	4303      	orrs	r3, r0
 8007362:	3701      	adds	r7, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	7839      	ldrb	r1, [r7, #0]
 8007368:	4827      	ldr	r0, [pc, #156]	; (8007408 <_svfiprintf_r+0x1e4>)
 800736a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800736e:	2206      	movs	r2, #6
 8007370:	1c7e      	adds	r6, r7, #1
 8007372:	f7f8 ff55 	bl	8000220 <memchr>
 8007376:	2800      	cmp	r0, #0
 8007378:	d038      	beq.n	80073ec <_svfiprintf_r+0x1c8>
 800737a:	4b24      	ldr	r3, [pc, #144]	; (800740c <_svfiprintf_r+0x1e8>)
 800737c:	bb13      	cbnz	r3, 80073c4 <_svfiprintf_r+0x1a0>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	3307      	adds	r3, #7
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	3308      	adds	r3, #8
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738c:	444b      	add	r3, r9
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	e76d      	b.n	800726e <_svfiprintf_r+0x4a>
 8007392:	fb05 3202 	mla	r2, r5, r2, r3
 8007396:	2001      	movs	r0, #1
 8007398:	460f      	mov	r7, r1
 800739a:	e7a6      	b.n	80072ea <_svfiprintf_r+0xc6>
 800739c:	2300      	movs	r3, #0
 800739e:	3701      	adds	r7, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	4619      	mov	r1, r3
 80073a4:	250a      	movs	r5, #10
 80073a6:	4638      	mov	r0, r7
 80073a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ac:	3a30      	subs	r2, #48	; 0x30
 80073ae:	2a09      	cmp	r2, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x196>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c8      	beq.n	8007348 <_svfiprintf_r+0x124>
 80073b6:	9105      	str	r1, [sp, #20]
 80073b8:	e7c6      	b.n	8007348 <_svfiprintf_r+0x124>
 80073ba:	fb05 2101 	mla	r1, r5, r1, r2
 80073be:	2301      	movs	r3, #1
 80073c0:	4607      	mov	r7, r0
 80073c2:	e7f0      	b.n	80073a6 <_svfiprintf_r+0x182>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4622      	mov	r2, r4
 80073ca:	4b11      	ldr	r3, [pc, #68]	; (8007410 <_svfiprintf_r+0x1ec>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4640      	mov	r0, r8
 80073d0:	f3af 8000 	nop.w
 80073d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073d8:	4681      	mov	r9, r0
 80073da:	d1d6      	bne.n	800738a <_svfiprintf_r+0x166>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	065b      	lsls	r3, r3, #25
 80073e0:	f53f af35 	bmi.w	800724e <_svfiprintf_r+0x2a>
 80073e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e6:	b01d      	add	sp, #116	; 0x74
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4622      	mov	r2, r4
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <_svfiprintf_r+0x1ec>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4640      	mov	r0, r8
 80073f8:	f000 fa2c 	bl	8007854 <_printf_i>
 80073fc:	e7ea      	b.n	80073d4 <_svfiprintf_r+0x1b0>
 80073fe:	bf00      	nop
 8007400:	08008324 	.word	0x08008324
 8007404:	0800832a 	.word	0x0800832a
 8007408:	0800832e 	.word	0x0800832e
 800740c:	00000000 	.word	0x00000000
 8007410:	08007171 	.word	0x08007171

08007414 <_sungetc_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	1c4b      	adds	r3, r1, #1
 8007418:	4614      	mov	r4, r2
 800741a:	d103      	bne.n	8007424 <_sungetc_r+0x10>
 800741c:	f04f 35ff 	mov.w	r5, #4294967295
 8007420:	4628      	mov	r0, r5
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	8993      	ldrh	r3, [r2, #12]
 8007426:	f023 0320 	bic.w	r3, r3, #32
 800742a:	8193      	strh	r3, [r2, #12]
 800742c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800742e:	6852      	ldr	r2, [r2, #4]
 8007430:	b2cd      	uxtb	r5, r1
 8007432:	b18b      	cbz	r3, 8007458 <_sungetc_r+0x44>
 8007434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007436:	4293      	cmp	r3, r2
 8007438:	dd08      	ble.n	800744c <_sungetc_r+0x38>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	1e5a      	subs	r2, r3, #1
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	e7e9      	b.n	8007420 <_sungetc_r+0xc>
 800744c:	4621      	mov	r1, r4
 800744e:	f000 fdb7 	bl	8007fc0 <__submore>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f1      	beq.n	800743a <_sungetc_r+0x26>
 8007456:	e7e1      	b.n	800741c <_sungetc_r+0x8>
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	b151      	cbz	r1, 8007474 <_sungetc_r+0x60>
 800745e:	4299      	cmp	r1, r3
 8007460:	d208      	bcs.n	8007474 <_sungetc_r+0x60>
 8007462:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007466:	42a9      	cmp	r1, r5
 8007468:	d104      	bne.n	8007474 <_sungetc_r+0x60>
 800746a:	3b01      	subs	r3, #1
 800746c:	3201      	adds	r2, #1
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	6062      	str	r2, [r4, #4]
 8007472:	e7d5      	b.n	8007420 <_sungetc_r+0xc>
 8007474:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747c:	6363      	str	r3, [r4, #52]	; 0x34
 800747e:	2303      	movs	r3, #3
 8007480:	63a3      	str	r3, [r4, #56]	; 0x38
 8007482:	4623      	mov	r3, r4
 8007484:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	2301      	movs	r3, #1
 800748c:	e7dc      	b.n	8007448 <_sungetc_r+0x34>

0800748e <__ssrefill_r>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007494:	b169      	cbz	r1, 80074b2 <__ssrefill_r+0x24>
 8007496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749a:	4299      	cmp	r1, r3
 800749c:	d001      	beq.n	80074a2 <__ssrefill_r+0x14>
 800749e:	f000 fe11 	bl	80080c4 <_free_r>
 80074a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	2000      	movs	r0, #0
 80074a8:	6360      	str	r0, [r4, #52]	; 0x34
 80074aa:	b113      	cbz	r3, 80074b2 <__ssrefill_r+0x24>
 80074ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	e7f3      	b.n	80074b0 <__ssrefill_r+0x22>

080074c8 <__ssvfiscanf_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80074d0:	460c      	mov	r4, r1
 80074d2:	2100      	movs	r1, #0
 80074d4:	9144      	str	r1, [sp, #272]	; 0x110
 80074d6:	9145      	str	r1, [sp, #276]	; 0x114
 80074d8:	499f      	ldr	r1, [pc, #636]	; (8007758 <__ssvfiscanf_r+0x290>)
 80074da:	91a0      	str	r1, [sp, #640]	; 0x280
 80074dc:	f10d 0804 	add.w	r8, sp, #4
 80074e0:	499e      	ldr	r1, [pc, #632]	; (800775c <__ssvfiscanf_r+0x294>)
 80074e2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007760 <__ssvfiscanf_r+0x298>
 80074e6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80074ea:	4606      	mov	r6, r0
 80074ec:	4692      	mov	sl, r2
 80074ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	270a      	movs	r7, #10
 80074f4:	f89a 3000 	ldrb.w	r3, [sl]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 812a 	beq.w	8007752 <__ssvfiscanf_r+0x28a>
 80074fe:	4655      	mov	r5, sl
 8007500:	f000 fd9c 	bl	800803c <__locale_ctype_ptr>
 8007504:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007508:	4458      	add	r0, fp
 800750a:	7843      	ldrb	r3, [r0, #1]
 800750c:	f013 0308 	ands.w	r3, r3, #8
 8007510:	d01c      	beq.n	800754c <__ssvfiscanf_r+0x84>
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd12      	ble.n	800753e <__ssvfiscanf_r+0x76>
 8007518:	f000 fd90 	bl	800803c <__locale_ctype_ptr>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	4410      	add	r0, r2
 8007522:	7842      	ldrb	r2, [r0, #1]
 8007524:	0712      	lsls	r2, r2, #28
 8007526:	d401      	bmi.n	800752c <__ssvfiscanf_r+0x64>
 8007528:	46aa      	mov	sl, r5
 800752a:	e7e3      	b.n	80074f4 <__ssvfiscanf_r+0x2c>
 800752c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800752e:	3201      	adds	r2, #1
 8007530:	9245      	str	r2, [sp, #276]	; 0x114
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	3301      	adds	r3, #1
 8007536:	3a01      	subs	r2, #1
 8007538:	6062      	str	r2, [r4, #4]
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	e7e9      	b.n	8007512 <__ssvfiscanf_r+0x4a>
 800753e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007540:	4621      	mov	r1, r4
 8007542:	4630      	mov	r0, r6
 8007544:	4798      	blx	r3
 8007546:	2800      	cmp	r0, #0
 8007548:	d0e6      	beq.n	8007518 <__ssvfiscanf_r+0x50>
 800754a:	e7ed      	b.n	8007528 <__ssvfiscanf_r+0x60>
 800754c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007550:	f040 8082 	bne.w	8007658 <__ssvfiscanf_r+0x190>
 8007554:	9343      	str	r3, [sp, #268]	; 0x10c
 8007556:	9341      	str	r3, [sp, #260]	; 0x104
 8007558:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800755c:	2b2a      	cmp	r3, #42	; 0x2a
 800755e:	d103      	bne.n	8007568 <__ssvfiscanf_r+0xa0>
 8007560:	2310      	movs	r3, #16
 8007562:	9341      	str	r3, [sp, #260]	; 0x104
 8007564:	f10a 0502 	add.w	r5, sl, #2
 8007568:	46aa      	mov	sl, r5
 800756a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800756e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007572:	2a09      	cmp	r2, #9
 8007574:	d922      	bls.n	80075bc <__ssvfiscanf_r+0xf4>
 8007576:	2203      	movs	r2, #3
 8007578:	4879      	ldr	r0, [pc, #484]	; (8007760 <__ssvfiscanf_r+0x298>)
 800757a:	f7f8 fe51 	bl	8000220 <memchr>
 800757e:	b138      	cbz	r0, 8007590 <__ssvfiscanf_r+0xc8>
 8007580:	eba0 0309 	sub.w	r3, r0, r9
 8007584:	2001      	movs	r0, #1
 8007586:	4098      	lsls	r0, r3
 8007588:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800758a:	4318      	orrs	r0, r3
 800758c:	9041      	str	r0, [sp, #260]	; 0x104
 800758e:	46aa      	mov	sl, r5
 8007590:	f89a 3000 	ldrb.w	r3, [sl]
 8007594:	2b67      	cmp	r3, #103	; 0x67
 8007596:	f10a 0501 	add.w	r5, sl, #1
 800759a:	d82b      	bhi.n	80075f4 <__ssvfiscanf_r+0x12c>
 800759c:	2b65      	cmp	r3, #101	; 0x65
 800759e:	f080 809f 	bcs.w	80076e0 <__ssvfiscanf_r+0x218>
 80075a2:	2b47      	cmp	r3, #71	; 0x47
 80075a4:	d810      	bhi.n	80075c8 <__ssvfiscanf_r+0x100>
 80075a6:	2b45      	cmp	r3, #69	; 0x45
 80075a8:	f080 809a 	bcs.w	80076e0 <__ssvfiscanf_r+0x218>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06c      	beq.n	800768a <__ssvfiscanf_r+0x1c2>
 80075b0:	2b25      	cmp	r3, #37	; 0x25
 80075b2:	d051      	beq.n	8007658 <__ssvfiscanf_r+0x190>
 80075b4:	2303      	movs	r3, #3
 80075b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80075b8:	9742      	str	r7, [sp, #264]	; 0x108
 80075ba:	e027      	b.n	800760c <__ssvfiscanf_r+0x144>
 80075bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80075be:	fb07 1303 	mla	r3, r7, r3, r1
 80075c2:	3b30      	subs	r3, #48	; 0x30
 80075c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80075c6:	e7cf      	b.n	8007568 <__ssvfiscanf_r+0xa0>
 80075c8:	2b5b      	cmp	r3, #91	; 0x5b
 80075ca:	d06a      	beq.n	80076a2 <__ssvfiscanf_r+0x1da>
 80075cc:	d80c      	bhi.n	80075e8 <__ssvfiscanf_r+0x120>
 80075ce:	2b58      	cmp	r3, #88	; 0x58
 80075d0:	d1f0      	bne.n	80075b4 <__ssvfiscanf_r+0xec>
 80075d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80075d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d8:	9241      	str	r2, [sp, #260]	; 0x104
 80075da:	2210      	movs	r2, #16
 80075dc:	9242      	str	r2, [sp, #264]	; 0x108
 80075de:	2b6e      	cmp	r3, #110	; 0x6e
 80075e0:	bf8c      	ite	hi
 80075e2:	2304      	movhi	r3, #4
 80075e4:	2303      	movls	r3, #3
 80075e6:	e010      	b.n	800760a <__ssvfiscanf_r+0x142>
 80075e8:	2b63      	cmp	r3, #99	; 0x63
 80075ea:	d065      	beq.n	80076b8 <__ssvfiscanf_r+0x1f0>
 80075ec:	2b64      	cmp	r3, #100	; 0x64
 80075ee:	d1e1      	bne.n	80075b4 <__ssvfiscanf_r+0xec>
 80075f0:	9742      	str	r7, [sp, #264]	; 0x108
 80075f2:	e7f4      	b.n	80075de <__ssvfiscanf_r+0x116>
 80075f4:	2b70      	cmp	r3, #112	; 0x70
 80075f6:	d04b      	beq.n	8007690 <__ssvfiscanf_r+0x1c8>
 80075f8:	d826      	bhi.n	8007648 <__ssvfiscanf_r+0x180>
 80075fa:	2b6e      	cmp	r3, #110	; 0x6e
 80075fc:	d062      	beq.n	80076c4 <__ssvfiscanf_r+0x1fc>
 80075fe:	d84c      	bhi.n	800769a <__ssvfiscanf_r+0x1d2>
 8007600:	2b69      	cmp	r3, #105	; 0x69
 8007602:	d1d7      	bne.n	80075b4 <__ssvfiscanf_r+0xec>
 8007604:	2300      	movs	r3, #0
 8007606:	9342      	str	r3, [sp, #264]	; 0x108
 8007608:	2303      	movs	r3, #3
 800760a:	9347      	str	r3, [sp, #284]	; 0x11c
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd68      	ble.n	80076e4 <__ssvfiscanf_r+0x21c>
 8007612:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007614:	0659      	lsls	r1, r3, #25
 8007616:	d407      	bmi.n	8007628 <__ssvfiscanf_r+0x160>
 8007618:	f000 fd10 	bl	800803c <__locale_ctype_ptr>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	4410      	add	r0, r2
 8007622:	7842      	ldrb	r2, [r0, #1]
 8007624:	0712      	lsls	r2, r2, #28
 8007626:	d464      	bmi.n	80076f2 <__ssvfiscanf_r+0x22a>
 8007628:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800762a:	2b02      	cmp	r3, #2
 800762c:	dc73      	bgt.n	8007716 <__ssvfiscanf_r+0x24e>
 800762e:	466b      	mov	r3, sp
 8007630:	4622      	mov	r2, r4
 8007632:	a941      	add	r1, sp, #260	; 0x104
 8007634:	4630      	mov	r0, r6
 8007636:	f000 fa1f 	bl	8007a78 <_scanf_chars>
 800763a:	2801      	cmp	r0, #1
 800763c:	f000 8089 	beq.w	8007752 <__ssvfiscanf_r+0x28a>
 8007640:	2802      	cmp	r0, #2
 8007642:	f47f af71 	bne.w	8007528 <__ssvfiscanf_r+0x60>
 8007646:	e01d      	b.n	8007684 <__ssvfiscanf_r+0x1bc>
 8007648:	2b75      	cmp	r3, #117	; 0x75
 800764a:	d0d1      	beq.n	80075f0 <__ssvfiscanf_r+0x128>
 800764c:	2b78      	cmp	r3, #120	; 0x78
 800764e:	d0c0      	beq.n	80075d2 <__ssvfiscanf_r+0x10a>
 8007650:	2b73      	cmp	r3, #115	; 0x73
 8007652:	d1af      	bne.n	80075b4 <__ssvfiscanf_r+0xec>
 8007654:	2302      	movs	r3, #2
 8007656:	e7d8      	b.n	800760a <__ssvfiscanf_r+0x142>
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dd0c      	ble.n	8007678 <__ssvfiscanf_r+0x1b0>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	455a      	cmp	r2, fp
 8007664:	d175      	bne.n	8007752 <__ssvfiscanf_r+0x28a>
 8007666:	3301      	adds	r3, #1
 8007668:	6862      	ldr	r2, [r4, #4]
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800766e:	3a01      	subs	r2, #1
 8007670:	3301      	adds	r3, #1
 8007672:	6062      	str	r2, [r4, #4]
 8007674:	9345      	str	r3, [sp, #276]	; 0x114
 8007676:	e757      	b.n	8007528 <__ssvfiscanf_r+0x60>
 8007678:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800767a:	4621      	mov	r1, r4
 800767c:	4630      	mov	r0, r6
 800767e:	4798      	blx	r3
 8007680:	2800      	cmp	r0, #0
 8007682:	d0ec      	beq.n	800765e <__ssvfiscanf_r+0x196>
 8007684:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007686:	2800      	cmp	r0, #0
 8007688:	d159      	bne.n	800773e <__ssvfiscanf_r+0x276>
 800768a:	f04f 30ff 	mov.w	r0, #4294967295
 800768e:	e05c      	b.n	800774a <__ssvfiscanf_r+0x282>
 8007690:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007692:	f042 0220 	orr.w	r2, r2, #32
 8007696:	9241      	str	r2, [sp, #260]	; 0x104
 8007698:	e79b      	b.n	80075d2 <__ssvfiscanf_r+0x10a>
 800769a:	2308      	movs	r3, #8
 800769c:	9342      	str	r3, [sp, #264]	; 0x108
 800769e:	2304      	movs	r3, #4
 80076a0:	e7b3      	b.n	800760a <__ssvfiscanf_r+0x142>
 80076a2:	4629      	mov	r1, r5
 80076a4:	4640      	mov	r0, r8
 80076a6:	f000 fb3f 	bl	8007d28 <__sccl>
 80076aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	9341      	str	r3, [sp, #260]	; 0x104
 80076b2:	4605      	mov	r5, r0
 80076b4:	2301      	movs	r3, #1
 80076b6:	e7a8      	b.n	800760a <__ssvfiscanf_r+0x142>
 80076b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076be:	9341      	str	r3, [sp, #260]	; 0x104
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7a2      	b.n	800760a <__ssvfiscanf_r+0x142>
 80076c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076c6:	06c3      	lsls	r3, r0, #27
 80076c8:	f53f af2e 	bmi.w	8007528 <__ssvfiscanf_r+0x60>
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076d0:	1d19      	adds	r1, r3, #4
 80076d2:	9100      	str	r1, [sp, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	07c0      	lsls	r0, r0, #31
 80076d8:	bf4c      	ite	mi
 80076da:	801a      	strhmi	r2, [r3, #0]
 80076dc:	601a      	strpl	r2, [r3, #0]
 80076de:	e723      	b.n	8007528 <__ssvfiscanf_r+0x60>
 80076e0:	2305      	movs	r3, #5
 80076e2:	e792      	b.n	800760a <__ssvfiscanf_r+0x142>
 80076e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076e6:	4621      	mov	r1, r4
 80076e8:	4630      	mov	r0, r6
 80076ea:	4798      	blx	r3
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d090      	beq.n	8007612 <__ssvfiscanf_r+0x14a>
 80076f0:	e7c8      	b.n	8007684 <__ssvfiscanf_r+0x1bc>
 80076f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076f4:	3201      	adds	r2, #1
 80076f6:	9245      	str	r2, [sp, #276]	; 0x114
 80076f8:	6862      	ldr	r2, [r4, #4]
 80076fa:	3a01      	subs	r2, #1
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	6062      	str	r2, [r4, #4]
 8007700:	dd02      	ble.n	8007708 <__ssvfiscanf_r+0x240>
 8007702:	3301      	adds	r3, #1
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	e787      	b.n	8007618 <__ssvfiscanf_r+0x150>
 8007708:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800770a:	4621      	mov	r1, r4
 800770c:	4630      	mov	r0, r6
 800770e:	4798      	blx	r3
 8007710:	2800      	cmp	r0, #0
 8007712:	d081      	beq.n	8007618 <__ssvfiscanf_r+0x150>
 8007714:	e7b6      	b.n	8007684 <__ssvfiscanf_r+0x1bc>
 8007716:	2b04      	cmp	r3, #4
 8007718:	dc06      	bgt.n	8007728 <__ssvfiscanf_r+0x260>
 800771a:	466b      	mov	r3, sp
 800771c:	4622      	mov	r2, r4
 800771e:	a941      	add	r1, sp, #260	; 0x104
 8007720:	4630      	mov	r0, r6
 8007722:	f000 fa0d 	bl	8007b40 <_scanf_i>
 8007726:	e788      	b.n	800763a <__ssvfiscanf_r+0x172>
 8007728:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <__ssvfiscanf_r+0x29c>)
 800772a:	2b00      	cmp	r3, #0
 800772c:	f43f aefc 	beq.w	8007528 <__ssvfiscanf_r+0x60>
 8007730:	466b      	mov	r3, sp
 8007732:	4622      	mov	r2, r4
 8007734:	a941      	add	r1, sp, #260	; 0x104
 8007736:	4630      	mov	r0, r6
 8007738:	f3af 8000 	nop.w
 800773c:	e77d      	b.n	800763a <__ssvfiscanf_r+0x172>
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007744:	bf18      	it	ne
 8007746:	f04f 30ff 	movne.w	r0, #4294967295
 800774a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007752:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007754:	e7f9      	b.n	800774a <__ssvfiscanf_r+0x282>
 8007756:	bf00      	nop
 8007758:	08007415 	.word	0x08007415
 800775c:	0800748f 	.word	0x0800748f
 8007760:	0800832a 	.word	0x0800832a
 8007764:	00000000 	.word	0x00000000

08007768 <_printf_common>:
 8007768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	4691      	mov	r9, r2
 800776e:	461f      	mov	r7, r3
 8007770:	688a      	ldr	r2, [r1, #8]
 8007772:	690b      	ldr	r3, [r1, #16]
 8007774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007778:	4293      	cmp	r3, r2
 800777a:	bfb8      	it	lt
 800777c:	4613      	movlt	r3, r2
 800777e:	f8c9 3000 	str.w	r3, [r9]
 8007782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007786:	4606      	mov	r6, r0
 8007788:	460c      	mov	r4, r1
 800778a:	b112      	cbz	r2, 8007792 <_printf_common+0x2a>
 800778c:	3301      	adds	r3, #1
 800778e:	f8c9 3000 	str.w	r3, [r9]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	0699      	lsls	r1, r3, #26
 8007796:	bf42      	ittt	mi
 8007798:	f8d9 3000 	ldrmi.w	r3, [r9]
 800779c:	3302      	addmi	r3, #2
 800779e:	f8c9 3000 	strmi.w	r3, [r9]
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	f015 0506 	ands.w	r5, r5, #6
 80077a8:	d107      	bne.n	80077ba <_printf_common+0x52>
 80077aa:	f104 0a19 	add.w	sl, r4, #25
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	f8d9 2000 	ldr.w	r2, [r9]
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	42ab      	cmp	r3, r5
 80077b8:	dc28      	bgt.n	800780c <_printf_common+0xa4>
 80077ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	3300      	adds	r3, #0
 80077c2:	bf18      	it	ne
 80077c4:	2301      	movne	r3, #1
 80077c6:	0692      	lsls	r2, r2, #26
 80077c8:	d42d      	bmi.n	8007826 <_printf_common+0xbe>
 80077ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ce:	4639      	mov	r1, r7
 80077d0:	4630      	mov	r0, r6
 80077d2:	47c0      	blx	r8
 80077d4:	3001      	adds	r0, #1
 80077d6:	d020      	beq.n	800781a <_printf_common+0xb2>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	68e5      	ldr	r5, [r4, #12]
 80077dc:	f8d9 2000 	ldr.w	r2, [r9]
 80077e0:	f003 0306 	and.w	r3, r3, #6
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	bf08      	it	eq
 80077e8:	1aad      	subeq	r5, r5, r2
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	f04f 0900 	mov.w	r9, #0
 8007802:	341a      	adds	r4, #26
 8007804:	454d      	cmp	r5, r9
 8007806:	d11a      	bne.n	800783e <_printf_common+0xd6>
 8007808:	2000      	movs	r0, #0
 800780a:	e008      	b.n	800781e <_printf_common+0xb6>
 800780c:	2301      	movs	r3, #1
 800780e:	4652      	mov	r2, sl
 8007810:	4639      	mov	r1, r7
 8007812:	4630      	mov	r0, r6
 8007814:	47c0      	blx	r8
 8007816:	3001      	adds	r0, #1
 8007818:	d103      	bne.n	8007822 <_printf_common+0xba>
 800781a:	f04f 30ff 	mov.w	r0, #4294967295
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	3501      	adds	r5, #1
 8007824:	e7c3      	b.n	80077ae <_printf_common+0x46>
 8007826:	18e1      	adds	r1, r4, r3
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	2030      	movs	r0, #48	; 0x30
 800782c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007830:	4422      	add	r2, r4
 8007832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783a:	3302      	adds	r3, #2
 800783c:	e7c5      	b.n	80077ca <_printf_common+0x62>
 800783e:	2301      	movs	r3, #1
 8007840:	4622      	mov	r2, r4
 8007842:	4639      	mov	r1, r7
 8007844:	4630      	mov	r0, r6
 8007846:	47c0      	blx	r8
 8007848:	3001      	adds	r0, #1
 800784a:	d0e6      	beq.n	800781a <_printf_common+0xb2>
 800784c:	f109 0901 	add.w	r9, r9, #1
 8007850:	e7d8      	b.n	8007804 <_printf_common+0x9c>
	...

08007854 <_printf_i>:
 8007854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007858:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800785c:	460c      	mov	r4, r1
 800785e:	7e09      	ldrb	r1, [r1, #24]
 8007860:	b085      	sub	sp, #20
 8007862:	296e      	cmp	r1, #110	; 0x6e
 8007864:	4617      	mov	r7, r2
 8007866:	4606      	mov	r6, r0
 8007868:	4698      	mov	r8, r3
 800786a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786c:	f000 80b3 	beq.w	80079d6 <_printf_i+0x182>
 8007870:	d822      	bhi.n	80078b8 <_printf_i+0x64>
 8007872:	2963      	cmp	r1, #99	; 0x63
 8007874:	d036      	beq.n	80078e4 <_printf_i+0x90>
 8007876:	d80a      	bhi.n	800788e <_printf_i+0x3a>
 8007878:	2900      	cmp	r1, #0
 800787a:	f000 80b9 	beq.w	80079f0 <_printf_i+0x19c>
 800787e:	2958      	cmp	r1, #88	; 0x58
 8007880:	f000 8083 	beq.w	800798a <_printf_i+0x136>
 8007884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007888:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800788c:	e032      	b.n	80078f4 <_printf_i+0xa0>
 800788e:	2964      	cmp	r1, #100	; 0x64
 8007890:	d001      	beq.n	8007896 <_printf_i+0x42>
 8007892:	2969      	cmp	r1, #105	; 0x69
 8007894:	d1f6      	bne.n	8007884 <_printf_i+0x30>
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	6813      	ldr	r3, [r2, #0]
 800789a:	0605      	lsls	r5, r0, #24
 800789c:	f103 0104 	add.w	r1, r3, #4
 80078a0:	d52a      	bpl.n	80078f8 <_printf_i+0xa4>
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da03      	bge.n	80078b2 <_printf_i+0x5e>
 80078aa:	222d      	movs	r2, #45	; 0x2d
 80078ac:	425b      	negs	r3, r3
 80078ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078b2:	486f      	ldr	r0, [pc, #444]	; (8007a70 <_printf_i+0x21c>)
 80078b4:	220a      	movs	r2, #10
 80078b6:	e039      	b.n	800792c <_printf_i+0xd8>
 80078b8:	2973      	cmp	r1, #115	; 0x73
 80078ba:	f000 809d 	beq.w	80079f8 <_printf_i+0x1a4>
 80078be:	d808      	bhi.n	80078d2 <_printf_i+0x7e>
 80078c0:	296f      	cmp	r1, #111	; 0x6f
 80078c2:	d020      	beq.n	8007906 <_printf_i+0xb2>
 80078c4:	2970      	cmp	r1, #112	; 0x70
 80078c6:	d1dd      	bne.n	8007884 <_printf_i+0x30>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	f043 0320 	orr.w	r3, r3, #32
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	e003      	b.n	80078da <_printf_i+0x86>
 80078d2:	2975      	cmp	r1, #117	; 0x75
 80078d4:	d017      	beq.n	8007906 <_printf_i+0xb2>
 80078d6:	2978      	cmp	r1, #120	; 0x78
 80078d8:	d1d4      	bne.n	8007884 <_printf_i+0x30>
 80078da:	2378      	movs	r3, #120	; 0x78
 80078dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078e0:	4864      	ldr	r0, [pc, #400]	; (8007a74 <_printf_i+0x220>)
 80078e2:	e055      	b.n	8007990 <_printf_i+0x13c>
 80078e4:	6813      	ldr	r3, [r2, #0]
 80078e6:	1d19      	adds	r1, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6011      	str	r1, [r2, #0]
 80078ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f4:	2301      	movs	r3, #1
 80078f6:	e08c      	b.n	8007a12 <_printf_i+0x1be>
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6011      	str	r1, [r2, #0]
 80078fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007900:	bf18      	it	ne
 8007902:	b21b      	sxthne	r3, r3
 8007904:	e7cf      	b.n	80078a6 <_printf_i+0x52>
 8007906:	6813      	ldr	r3, [r2, #0]
 8007908:	6825      	ldr	r5, [r4, #0]
 800790a:	1d18      	adds	r0, r3, #4
 800790c:	6010      	str	r0, [r2, #0]
 800790e:	0628      	lsls	r0, r5, #24
 8007910:	d501      	bpl.n	8007916 <_printf_i+0xc2>
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	e002      	b.n	800791c <_printf_i+0xc8>
 8007916:	0668      	lsls	r0, r5, #25
 8007918:	d5fb      	bpl.n	8007912 <_printf_i+0xbe>
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	4854      	ldr	r0, [pc, #336]	; (8007a70 <_printf_i+0x21c>)
 800791e:	296f      	cmp	r1, #111	; 0x6f
 8007920:	bf14      	ite	ne
 8007922:	220a      	movne	r2, #10
 8007924:	2208      	moveq	r2, #8
 8007926:	2100      	movs	r1, #0
 8007928:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792c:	6865      	ldr	r5, [r4, #4]
 800792e:	60a5      	str	r5, [r4, #8]
 8007930:	2d00      	cmp	r5, #0
 8007932:	f2c0 8095 	blt.w	8007a60 <_printf_i+0x20c>
 8007936:	6821      	ldr	r1, [r4, #0]
 8007938:	f021 0104 	bic.w	r1, r1, #4
 800793c:	6021      	str	r1, [r4, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d13d      	bne.n	80079be <_printf_i+0x16a>
 8007942:	2d00      	cmp	r5, #0
 8007944:	f040 808e 	bne.w	8007a64 <_printf_i+0x210>
 8007948:	4665      	mov	r5, ip
 800794a:	2a08      	cmp	r2, #8
 800794c:	d10b      	bne.n	8007966 <_printf_i+0x112>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	07db      	lsls	r3, r3, #31
 8007952:	d508      	bpl.n	8007966 <_printf_i+0x112>
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	6862      	ldr	r2, [r4, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	bfde      	ittt	le
 800795c:	2330      	movle	r3, #48	; 0x30
 800795e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007966:	ebac 0305 	sub.w	r3, ip, r5
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	f8cd 8000 	str.w	r8, [sp]
 8007970:	463b      	mov	r3, r7
 8007972:	aa03      	add	r2, sp, #12
 8007974:	4621      	mov	r1, r4
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff fef6 	bl	8007768 <_printf_common>
 800797c:	3001      	adds	r0, #1
 800797e:	d14d      	bne.n	8007a1c <_printf_i+0x1c8>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	b005      	add	sp, #20
 8007986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800798a:	4839      	ldr	r0, [pc, #228]	; (8007a70 <_printf_i+0x21c>)
 800798c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007990:	6813      	ldr	r3, [r2, #0]
 8007992:	6821      	ldr	r1, [r4, #0]
 8007994:	1d1d      	adds	r5, r3, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6015      	str	r5, [r2, #0]
 800799a:	060a      	lsls	r2, r1, #24
 800799c:	d50b      	bpl.n	80079b6 <_printf_i+0x162>
 800799e:	07ca      	lsls	r2, r1, #31
 80079a0:	bf44      	itt	mi
 80079a2:	f041 0120 	orrmi.w	r1, r1, #32
 80079a6:	6021      	strmi	r1, [r4, #0]
 80079a8:	b91b      	cbnz	r3, 80079b2 <_printf_i+0x15e>
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	f022 0220 	bic.w	r2, r2, #32
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	e7b7      	b.n	8007926 <_printf_i+0xd2>
 80079b6:	064d      	lsls	r5, r1, #25
 80079b8:	bf48      	it	mi
 80079ba:	b29b      	uxthmi	r3, r3
 80079bc:	e7ef      	b.n	800799e <_printf_i+0x14a>
 80079be:	4665      	mov	r5, ip
 80079c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079c4:	fb02 3311 	mls	r3, r2, r1, r3
 80079c8:	5cc3      	ldrb	r3, [r0, r3]
 80079ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079ce:	460b      	mov	r3, r1
 80079d0:	2900      	cmp	r1, #0
 80079d2:	d1f5      	bne.n	80079c0 <_printf_i+0x16c>
 80079d4:	e7b9      	b.n	800794a <_printf_i+0xf6>
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	6825      	ldr	r5, [r4, #0]
 80079da:	6961      	ldr	r1, [r4, #20]
 80079dc:	1d18      	adds	r0, r3, #4
 80079de:	6010      	str	r0, [r2, #0]
 80079e0:	0628      	lsls	r0, r5, #24
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	d501      	bpl.n	80079ea <_printf_i+0x196>
 80079e6:	6019      	str	r1, [r3, #0]
 80079e8:	e002      	b.n	80079f0 <_printf_i+0x19c>
 80079ea:	066a      	lsls	r2, r5, #25
 80079ec:	d5fb      	bpl.n	80079e6 <_printf_i+0x192>
 80079ee:	8019      	strh	r1, [r3, #0]
 80079f0:	2300      	movs	r3, #0
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	4665      	mov	r5, ip
 80079f6:	e7b9      	b.n	800796c <_printf_i+0x118>
 80079f8:	6813      	ldr	r3, [r2, #0]
 80079fa:	1d19      	adds	r1, r3, #4
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	681d      	ldr	r5, [r3, #0]
 8007a00:	6862      	ldr	r2, [r4, #4]
 8007a02:	2100      	movs	r1, #0
 8007a04:	4628      	mov	r0, r5
 8007a06:	f7f8 fc0b 	bl	8000220 <memchr>
 8007a0a:	b108      	cbz	r0, 8007a10 <_printf_i+0x1bc>
 8007a0c:	1b40      	subs	r0, r0, r5
 8007a0e:	6060      	str	r0, [r4, #4]
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	2300      	movs	r3, #0
 8007a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1a:	e7a7      	b.n	800796c <_printf_i+0x118>
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4639      	mov	r1, r7
 8007a22:	4630      	mov	r0, r6
 8007a24:	47c0      	blx	r8
 8007a26:	3001      	adds	r0, #1
 8007a28:	d0aa      	beq.n	8007980 <_printf_i+0x12c>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	079b      	lsls	r3, r3, #30
 8007a2e:	d413      	bmi.n	8007a58 <_printf_i+0x204>
 8007a30:	68e0      	ldr	r0, [r4, #12]
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	4298      	cmp	r0, r3
 8007a36:	bfb8      	it	lt
 8007a38:	4618      	movlt	r0, r3
 8007a3a:	e7a3      	b.n	8007984 <_printf_i+0x130>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	464a      	mov	r2, r9
 8007a40:	4639      	mov	r1, r7
 8007a42:	4630      	mov	r0, r6
 8007a44:	47c0      	blx	r8
 8007a46:	3001      	adds	r0, #1
 8007a48:	d09a      	beq.n	8007980 <_printf_i+0x12c>
 8007a4a:	3501      	adds	r5, #1
 8007a4c:	68e3      	ldr	r3, [r4, #12]
 8007a4e:	9a03      	ldr	r2, [sp, #12]
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	42ab      	cmp	r3, r5
 8007a54:	dcf2      	bgt.n	8007a3c <_printf_i+0x1e8>
 8007a56:	e7eb      	b.n	8007a30 <_printf_i+0x1dc>
 8007a58:	2500      	movs	r5, #0
 8007a5a:	f104 0919 	add.w	r9, r4, #25
 8007a5e:	e7f5      	b.n	8007a4c <_printf_i+0x1f8>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1ac      	bne.n	80079be <_printf_i+0x16a>
 8007a64:	7803      	ldrb	r3, [r0, #0]
 8007a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a6e:	e76c      	b.n	800794a <_printf_i+0xf6>
 8007a70:	08008335 	.word	0x08008335
 8007a74:	08008346 	.word	0x08008346

08007a78 <_scanf_chars>:
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	4615      	mov	r5, r2
 8007a7e:	688a      	ldr	r2, [r1, #8]
 8007a80:	4680      	mov	r8, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	b932      	cbnz	r2, 8007a94 <_scanf_chars+0x1c>
 8007a86:	698a      	ldr	r2, [r1, #24]
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	f04f 32ff 	movne.w	r2, #4294967295
 8007a90:	2201      	moveq	r2, #1
 8007a92:	608a      	str	r2, [r1, #8]
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	06d1      	lsls	r1, r2, #27
 8007a98:	bf5f      	itttt	pl
 8007a9a:	681a      	ldrpl	r2, [r3, #0]
 8007a9c:	1d11      	addpl	r1, r2, #4
 8007a9e:	6019      	strpl	r1, [r3, #0]
 8007aa0:	6817      	ldrpl	r7, [r2, #0]
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	69a3      	ldr	r3, [r4, #24]
 8007aa6:	b1db      	cbz	r3, 8007ae0 <_scanf_chars+0x68>
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d107      	bne.n	8007abc <_scanf_chars+0x44>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	6962      	ldr	r2, [r4, #20]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	5cd3      	ldrb	r3, [r2, r3]
 8007ab4:	b9a3      	cbnz	r3, 8007ae0 <_scanf_chars+0x68>
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	d132      	bne.n	8007b20 <_scanf_chars+0xa8>
 8007aba:	e006      	b.n	8007aca <_scanf_chars+0x52>
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d007      	beq.n	8007ad0 <_scanf_chars+0x58>
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	d12d      	bne.n	8007b20 <_scanf_chars+0xa8>
 8007ac4:	69a3      	ldr	r3, [r4, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d12a      	bne.n	8007b20 <_scanf_chars+0xa8>
 8007aca:	2001      	movs	r0, #1
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	f000 fab4 	bl	800803c <__locale_ctype_ptr>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4418      	add	r0, r3
 8007ada:	7843      	ldrb	r3, [r0, #1]
 8007adc:	071b      	lsls	r3, r3, #28
 8007ade:	d4ef      	bmi.n	8007ac0 <_scanf_chars+0x48>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	06da      	lsls	r2, r3, #27
 8007ae4:	bf5e      	ittt	pl
 8007ae6:	682b      	ldrpl	r3, [r5, #0]
 8007ae8:	781b      	ldrbpl	r3, [r3, #0]
 8007aea:	703b      	strbpl	r3, [r7, #0]
 8007aec:	682a      	ldr	r2, [r5, #0]
 8007aee:	686b      	ldr	r3, [r5, #4]
 8007af0:	f102 0201 	add.w	r2, r2, #1
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	68a2      	ldr	r2, [r4, #8]
 8007af8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007afc:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b00:	606b      	str	r3, [r5, #4]
 8007b02:	f106 0601 	add.w	r6, r6, #1
 8007b06:	bf58      	it	pl
 8007b08:	3701      	addpl	r7, #1
 8007b0a:	60a2      	str	r2, [r4, #8]
 8007b0c:	b142      	cbz	r2, 8007b20 <_scanf_chars+0xa8>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	dcc8      	bgt.n	8007aa4 <_scanf_chars+0x2c>
 8007b12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b16:	4629      	mov	r1, r5
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4798      	blx	r3
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d0c1      	beq.n	8007aa4 <_scanf_chars+0x2c>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	f013 0310 	ands.w	r3, r3, #16
 8007b26:	d105      	bne.n	8007b34 <_scanf_chars+0xbc>
 8007b28:	68e2      	ldr	r2, [r4, #12]
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	60e2      	str	r2, [r4, #12]
 8007b2e:	69a2      	ldr	r2, [r4, #24]
 8007b30:	b102      	cbz	r2, 8007b34 <_scanf_chars+0xbc>
 8007b32:	703b      	strb	r3, [r7, #0]
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	441e      	add	r6, r3
 8007b38:	6126      	str	r6, [r4, #16]
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e7c6      	b.n	8007acc <_scanf_chars+0x54>
	...

08007b40 <_scanf_i>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	469a      	mov	sl, r3
 8007b46:	4b74      	ldr	r3, [pc, #464]	; (8007d18 <_scanf_i+0x1d8>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	4683      	mov	fp, r0
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b52:	b087      	sub	sp, #28
 8007b54:	ab03      	add	r3, sp, #12
 8007b56:	68a7      	ldr	r7, [r4, #8]
 8007b58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b5c:	4b6f      	ldr	r3, [pc, #444]	; (8007d1c <_scanf_i+0x1dc>)
 8007b5e:	69a1      	ldr	r1, [r4, #24]
 8007b60:	4a6f      	ldr	r2, [pc, #444]	; (8007d20 <_scanf_i+0x1e0>)
 8007b62:	2903      	cmp	r1, #3
 8007b64:	bf08      	it	eq
 8007b66:	461a      	moveq	r2, r3
 8007b68:	1e7b      	subs	r3, r7, #1
 8007b6a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007b6e:	bf84      	itt	hi
 8007b70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b74:	60a3      	strhi	r3, [r4, #8]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	9200      	str	r2, [sp, #0]
 8007b7a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007b7e:	bf88      	it	hi
 8007b80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b84:	f104 091c 	add.w	r9, r4, #28
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bf8c      	ite	hi
 8007b8c:	197f      	addhi	r7, r7, r5
 8007b8e:	2700      	movls	r7, #0
 8007b90:	464b      	mov	r3, r9
 8007b92:	f04f 0800 	mov.w	r8, #0
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	6831      	ldr	r1, [r6, #0]
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ba2:	7809      	ldrb	r1, [r1, #0]
 8007ba4:	f7f8 fb3c 	bl	8000220 <memchr>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	b330      	cbz	r0, 8007bfa <_scanf_i+0xba>
 8007bac:	f1b8 0f01 	cmp.w	r8, #1
 8007bb0:	d15a      	bne.n	8007c68 <_scanf_i+0x128>
 8007bb2:	6862      	ldr	r2, [r4, #4]
 8007bb4:	b92a      	cbnz	r2, 8007bc2 <_scanf_i+0x82>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bbe:	6061      	str	r1, [r4, #4]
 8007bc0:	6022      	str	r2, [r4, #0]
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	68a2      	ldr	r2, [r4, #8]
 8007bcc:	1e51      	subs	r1, r2, #1
 8007bce:	60a1      	str	r1, [r4, #8]
 8007bd0:	b19a      	cbz	r2, 8007bfa <_scanf_i+0xba>
 8007bd2:	6832      	ldr	r2, [r6, #0]
 8007bd4:	1c51      	adds	r1, r2, #1
 8007bd6:	6031      	str	r1, [r6, #0]
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	1c5d      	adds	r5, r3, #1
 8007bde:	6873      	ldr	r3, [r6, #4]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	6073      	str	r3, [r6, #4]
 8007be6:	dc07      	bgt.n	8007bf8 <_scanf_i+0xb8>
 8007be8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007bec:	4631      	mov	r1, r6
 8007bee:	4658      	mov	r0, fp
 8007bf0:	4798      	blx	r3
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f040 8086 	bne.w	8007d04 <_scanf_i+0x1c4>
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	f108 0801 	add.w	r8, r8, #1
 8007bfe:	f1b8 0f03 	cmp.w	r8, #3
 8007c02:	d1c8      	bne.n	8007b96 <_scanf_i+0x56>
 8007c04:	6862      	ldr	r2, [r4, #4]
 8007c06:	b90a      	cbnz	r2, 8007c0c <_scanf_i+0xcc>
 8007c08:	220a      	movs	r2, #10
 8007c0a:	6062      	str	r2, [r4, #4]
 8007c0c:	6862      	ldr	r2, [r4, #4]
 8007c0e:	4945      	ldr	r1, [pc, #276]	; (8007d24 <_scanf_i+0x1e4>)
 8007c10:	6960      	ldr	r0, [r4, #20]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	1a89      	subs	r1, r1, r2
 8007c16:	f000 f887 	bl	8007d28 <__sccl>
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	f04f 0800 	mov.w	r8, #0
 8007c20:	461d      	mov	r5, r3
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d03a      	beq.n	8007ca0 <_scanf_i+0x160>
 8007c2a:	6831      	ldr	r1, [r6, #0]
 8007c2c:	6960      	ldr	r0, [r4, #20]
 8007c2e:	f891 c000 	ldrb.w	ip, [r1]
 8007c32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d032      	beq.n	8007ca0 <_scanf_i+0x160>
 8007c3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007c3e:	d121      	bne.n	8007c84 <_scanf_i+0x144>
 8007c40:	0510      	lsls	r0, r2, #20
 8007c42:	d51f      	bpl.n	8007c84 <_scanf_i+0x144>
 8007c44:	f108 0801 	add.w	r8, r8, #1
 8007c48:	b117      	cbz	r7, 8007c50 <_scanf_i+0x110>
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	3f01      	subs	r7, #1
 8007c4e:	60a3      	str	r3, [r4, #8]
 8007c50:	6873      	ldr	r3, [r6, #4]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	6073      	str	r3, [r6, #4]
 8007c58:	dd1b      	ble.n	8007c92 <_scanf_i+0x152>
 8007c5a:	6833      	ldr	r3, [r6, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	6033      	str	r3, [r6, #0]
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	60a3      	str	r3, [r4, #8]
 8007c66:	e7dc      	b.n	8007c22 <_scanf_i+0xe2>
 8007c68:	f1b8 0f02 	cmp.w	r8, #2
 8007c6c:	d1ad      	bne.n	8007bca <_scanf_i+0x8a>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007c74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007c78:	d1bf      	bne.n	8007bfa <_scanf_i+0xba>
 8007c7a:	2110      	movs	r1, #16
 8007c7c:	6061      	str	r1, [r4, #4]
 8007c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c82:	e7a1      	b.n	8007bc8 <_scanf_i+0x88>
 8007c84:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	780b      	ldrb	r3, [r1, #0]
 8007c8c:	702b      	strb	r3, [r5, #0]
 8007c8e:	3501      	adds	r5, #1
 8007c90:	e7de      	b.n	8007c50 <_scanf_i+0x110>
 8007c92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c96:	4631      	mov	r1, r6
 8007c98:	4658      	mov	r0, fp
 8007c9a:	4798      	blx	r3
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d0df      	beq.n	8007c60 <_scanf_i+0x120>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	05d9      	lsls	r1, r3, #23
 8007ca4:	d50c      	bpl.n	8007cc0 <_scanf_i+0x180>
 8007ca6:	454d      	cmp	r5, r9
 8007ca8:	d908      	bls.n	8007cbc <_scanf_i+0x17c>
 8007caa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	4798      	blx	r3
 8007cb8:	1e6f      	subs	r7, r5, #1
 8007cba:	463d      	mov	r5, r7
 8007cbc:	454d      	cmp	r5, r9
 8007cbe:	d029      	beq.n	8007d14 <_scanf_i+0x1d4>
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	f012 0210 	ands.w	r2, r2, #16
 8007cc6:	d113      	bne.n	8007cf0 <_scanf_i+0x1b0>
 8007cc8:	702a      	strb	r2, [r5, #0]
 8007cca:	6863      	ldr	r3, [r4, #4]
 8007ccc:	9e00      	ldr	r6, [sp, #0]
 8007cce:	4649      	mov	r1, r9
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	47b0      	blx	r6
 8007cd4:	f8da 3000 	ldr.w	r3, [sl]
 8007cd8:	6821      	ldr	r1, [r4, #0]
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	f8ca 2000 	str.w	r2, [sl]
 8007ce0:	f011 0f20 	tst.w	r1, #32
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	d010      	beq.n	8007d0a <_scanf_i+0x1ca>
 8007ce8:	6018      	str	r0, [r3, #0]
 8007cea:	68e3      	ldr	r3, [r4, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60e3      	str	r3, [r4, #12]
 8007cf0:	eba5 0509 	sub.w	r5, r5, r9
 8007cf4:	44a8      	add	r8, r5
 8007cf6:	6925      	ldr	r5, [r4, #16]
 8007cf8:	4445      	add	r5, r8
 8007cfa:	6125      	str	r5, [r4, #16]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	b007      	add	sp, #28
 8007d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	e7ca      	b.n	8007ca0 <_scanf_i+0x160>
 8007d0a:	07ca      	lsls	r2, r1, #31
 8007d0c:	bf4c      	ite	mi
 8007d0e:	8018      	strhmi	r0, [r3, #0]
 8007d10:	6018      	strpl	r0, [r3, #0]
 8007d12:	e7ea      	b.n	8007cea <_scanf_i+0x1aa>
 8007d14:	2001      	movs	r0, #1
 8007d16:	e7f2      	b.n	8007cfe <_scanf_i+0x1be>
 8007d18:	080082fc 	.word	0x080082fc
 8007d1c:	08007e85 	.word	0x08007e85
 8007d20:	08007f9d 	.word	0x08007f9d
 8007d24:	08008367 	.word	0x08008367

08007d28 <__sccl>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	780b      	ldrb	r3, [r1, #0]
 8007d2c:	2b5e      	cmp	r3, #94	; 0x5e
 8007d2e:	bf13      	iteet	ne
 8007d30:	1c4a      	addne	r2, r1, #1
 8007d32:	1c8a      	addeq	r2, r1, #2
 8007d34:	784b      	ldrbeq	r3, [r1, #1]
 8007d36:	2100      	movne	r1, #0
 8007d38:	bf08      	it	eq
 8007d3a:	2101      	moveq	r1, #1
 8007d3c:	1e44      	subs	r4, r0, #1
 8007d3e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007d42:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007d46:	42ac      	cmp	r4, r5
 8007d48:	d1fb      	bne.n	8007d42 <__sccl+0x1a>
 8007d4a:	b913      	cbnz	r3, 8007d52 <__sccl+0x2a>
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	4610      	mov	r0, r2
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	f081 0401 	eor.w	r4, r1, #1
 8007d56:	54c4      	strb	r4, [r0, r3]
 8007d58:	1c51      	adds	r1, r2, #1
 8007d5a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007d5e:	2d2d      	cmp	r5, #45	; 0x2d
 8007d60:	f101 36ff 	add.w	r6, r1, #4294967295
 8007d64:	460a      	mov	r2, r1
 8007d66:	d006      	beq.n	8007d76 <__sccl+0x4e>
 8007d68:	2d5d      	cmp	r5, #93	; 0x5d
 8007d6a:	d0f0      	beq.n	8007d4e <__sccl+0x26>
 8007d6c:	b90d      	cbnz	r5, 8007d72 <__sccl+0x4a>
 8007d6e:	4632      	mov	r2, r6
 8007d70:	e7ed      	b.n	8007d4e <__sccl+0x26>
 8007d72:	462b      	mov	r3, r5
 8007d74:	e7ef      	b.n	8007d56 <__sccl+0x2e>
 8007d76:	780e      	ldrb	r6, [r1, #0]
 8007d78:	2e5d      	cmp	r6, #93	; 0x5d
 8007d7a:	d0fa      	beq.n	8007d72 <__sccl+0x4a>
 8007d7c:	42b3      	cmp	r3, r6
 8007d7e:	dcf8      	bgt.n	8007d72 <__sccl+0x4a>
 8007d80:	3301      	adds	r3, #1
 8007d82:	429e      	cmp	r6, r3
 8007d84:	54c4      	strb	r4, [r0, r3]
 8007d86:	dcfb      	bgt.n	8007d80 <__sccl+0x58>
 8007d88:	3102      	adds	r1, #2
 8007d8a:	e7e6      	b.n	8007d5a <__sccl+0x32>

08007d8c <_strtol_l.isra.0>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	4680      	mov	r8, r0
 8007d92:	4689      	mov	r9, r1
 8007d94:	4692      	mov	sl, r2
 8007d96:	461e      	mov	r6, r3
 8007d98:	460f      	mov	r7, r1
 8007d9a:	463d      	mov	r5, r7
 8007d9c:	9808      	ldr	r0, [sp, #32]
 8007d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da2:	f000 f947 	bl	8008034 <__locale_ctype_ptr_l>
 8007da6:	4420      	add	r0, r4
 8007da8:	7843      	ldrb	r3, [r0, #1]
 8007daa:	f013 0308 	ands.w	r3, r3, #8
 8007dae:	d132      	bne.n	8007e16 <_strtol_l.isra.0+0x8a>
 8007db0:	2c2d      	cmp	r4, #45	; 0x2d
 8007db2:	d132      	bne.n	8007e1a <_strtol_l.isra.0+0x8e>
 8007db4:	787c      	ldrb	r4, [r7, #1]
 8007db6:	1cbd      	adds	r5, r7, #2
 8007db8:	2201      	movs	r2, #1
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	d05d      	beq.n	8007e7a <_strtol_l.isra.0+0xee>
 8007dbe:	2e10      	cmp	r6, #16
 8007dc0:	d109      	bne.n	8007dd6 <_strtol_l.isra.0+0x4a>
 8007dc2:	2c30      	cmp	r4, #48	; 0x30
 8007dc4:	d107      	bne.n	8007dd6 <_strtol_l.isra.0+0x4a>
 8007dc6:	782b      	ldrb	r3, [r5, #0]
 8007dc8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007dcc:	2b58      	cmp	r3, #88	; 0x58
 8007dce:	d14f      	bne.n	8007e70 <_strtol_l.isra.0+0xe4>
 8007dd0:	786c      	ldrb	r4, [r5, #1]
 8007dd2:	2610      	movs	r6, #16
 8007dd4:	3502      	adds	r5, #2
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	bf14      	ite	ne
 8007dda:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007dde:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007de2:	2700      	movs	r7, #0
 8007de4:	fbb1 fcf6 	udiv	ip, r1, r6
 8007de8:	4638      	mov	r0, r7
 8007dea:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007dee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d817      	bhi.n	8007e26 <_strtol_l.isra.0+0x9a>
 8007df6:	461c      	mov	r4, r3
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	dd23      	ble.n	8007e44 <_strtol_l.isra.0+0xb8>
 8007dfc:	1c7b      	adds	r3, r7, #1
 8007dfe:	d007      	beq.n	8007e10 <_strtol_l.isra.0+0x84>
 8007e00:	4584      	cmp	ip, r0
 8007e02:	d31c      	bcc.n	8007e3e <_strtol_l.isra.0+0xb2>
 8007e04:	d101      	bne.n	8007e0a <_strtol_l.isra.0+0x7e>
 8007e06:	45a6      	cmp	lr, r4
 8007e08:	db19      	blt.n	8007e3e <_strtol_l.isra.0+0xb2>
 8007e0a:	fb00 4006 	mla	r0, r0, r6, r4
 8007e0e:	2701      	movs	r7, #1
 8007e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e14:	e7eb      	b.n	8007dee <_strtol_l.isra.0+0x62>
 8007e16:	462f      	mov	r7, r5
 8007e18:	e7bf      	b.n	8007d9a <_strtol_l.isra.0+0xe>
 8007e1a:	2c2b      	cmp	r4, #43	; 0x2b
 8007e1c:	bf04      	itt	eq
 8007e1e:	1cbd      	addeq	r5, r7, #2
 8007e20:	787c      	ldrbeq	r4, [r7, #1]
 8007e22:	461a      	mov	r2, r3
 8007e24:	e7c9      	b.n	8007dba <_strtol_l.isra.0+0x2e>
 8007e26:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007e2a:	2b19      	cmp	r3, #25
 8007e2c:	d801      	bhi.n	8007e32 <_strtol_l.isra.0+0xa6>
 8007e2e:	3c37      	subs	r4, #55	; 0x37
 8007e30:	e7e2      	b.n	8007df8 <_strtol_l.isra.0+0x6c>
 8007e32:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007e36:	2b19      	cmp	r3, #25
 8007e38:	d804      	bhi.n	8007e44 <_strtol_l.isra.0+0xb8>
 8007e3a:	3c57      	subs	r4, #87	; 0x57
 8007e3c:	e7dc      	b.n	8007df8 <_strtol_l.isra.0+0x6c>
 8007e3e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e42:	e7e5      	b.n	8007e10 <_strtol_l.isra.0+0x84>
 8007e44:	1c7b      	adds	r3, r7, #1
 8007e46:	d108      	bne.n	8007e5a <_strtol_l.isra.0+0xce>
 8007e48:	2322      	movs	r3, #34	; 0x22
 8007e4a:	f8c8 3000 	str.w	r3, [r8]
 8007e4e:	4608      	mov	r0, r1
 8007e50:	f1ba 0f00 	cmp.w	sl, #0
 8007e54:	d107      	bne.n	8007e66 <_strtol_l.isra.0+0xda>
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	b102      	cbz	r2, 8007e5e <_strtol_l.isra.0+0xd2>
 8007e5c:	4240      	negs	r0, r0
 8007e5e:	f1ba 0f00 	cmp.w	sl, #0
 8007e62:	d0f8      	beq.n	8007e56 <_strtol_l.isra.0+0xca>
 8007e64:	b10f      	cbz	r7, 8007e6a <_strtol_l.isra.0+0xde>
 8007e66:	f105 39ff 	add.w	r9, r5, #4294967295
 8007e6a:	f8ca 9000 	str.w	r9, [sl]
 8007e6e:	e7f2      	b.n	8007e56 <_strtol_l.isra.0+0xca>
 8007e70:	2430      	movs	r4, #48	; 0x30
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d1af      	bne.n	8007dd6 <_strtol_l.isra.0+0x4a>
 8007e76:	2608      	movs	r6, #8
 8007e78:	e7ad      	b.n	8007dd6 <_strtol_l.isra.0+0x4a>
 8007e7a:	2c30      	cmp	r4, #48	; 0x30
 8007e7c:	d0a3      	beq.n	8007dc6 <_strtol_l.isra.0+0x3a>
 8007e7e:	260a      	movs	r6, #10
 8007e80:	e7a9      	b.n	8007dd6 <_strtol_l.isra.0+0x4a>
	...

08007e84 <_strtol_r>:
 8007e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e86:	4c06      	ldr	r4, [pc, #24]	; (8007ea0 <_strtol_r+0x1c>)
 8007e88:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_strtol_r+0x20>)
 8007e8a:	6824      	ldr	r4, [r4, #0]
 8007e8c:	6a24      	ldr	r4, [r4, #32]
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	bf08      	it	eq
 8007e92:	462c      	moveq	r4, r5
 8007e94:	9400      	str	r4, [sp, #0]
 8007e96:	f7ff ff79 	bl	8007d8c <_strtol_l.isra.0>
 8007e9a:	b003      	add	sp, #12
 8007e9c:	bd30      	pop	{r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000098 	.word	0x20000098
 8007ea4:	200000fc 	.word	0x200000fc

08007ea8 <_strtoul_l.isra.0>:
 8007ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	4680      	mov	r8, r0
 8007eae:	4689      	mov	r9, r1
 8007eb0:	4692      	mov	sl, r2
 8007eb2:	461e      	mov	r6, r3
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	463d      	mov	r5, r7
 8007eb8:	9808      	ldr	r0, [sp, #32]
 8007eba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ebe:	f000 f8b9 	bl	8008034 <__locale_ctype_ptr_l>
 8007ec2:	4420      	add	r0, r4
 8007ec4:	7843      	ldrb	r3, [r0, #1]
 8007ec6:	f013 0308 	ands.w	r3, r3, #8
 8007eca:	d130      	bne.n	8007f2e <_strtoul_l.isra.0+0x86>
 8007ecc:	2c2d      	cmp	r4, #45	; 0x2d
 8007ece:	d130      	bne.n	8007f32 <_strtoul_l.isra.0+0x8a>
 8007ed0:	787c      	ldrb	r4, [r7, #1]
 8007ed2:	1cbd      	adds	r5, r7, #2
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	d05c      	beq.n	8007f94 <_strtoul_l.isra.0+0xec>
 8007eda:	2e10      	cmp	r6, #16
 8007edc:	d109      	bne.n	8007ef2 <_strtoul_l.isra.0+0x4a>
 8007ede:	2c30      	cmp	r4, #48	; 0x30
 8007ee0:	d107      	bne.n	8007ef2 <_strtoul_l.isra.0+0x4a>
 8007ee2:	782b      	ldrb	r3, [r5, #0]
 8007ee4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ee8:	2b58      	cmp	r3, #88	; 0x58
 8007eea:	d14e      	bne.n	8007f8a <_strtoul_l.isra.0+0xe2>
 8007eec:	786c      	ldrb	r4, [r5, #1]
 8007eee:	2610      	movs	r6, #16
 8007ef0:	3502      	adds	r5, #2
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	fbb2 f2f6 	udiv	r2, r2, r6
 8007efc:	fb06 fc02 	mul.w	ip, r6, r2
 8007f00:	ea6f 0c0c 	mvn.w	ip, ip
 8007f04:	4618      	mov	r0, r3
 8007f06:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007f0a:	2f09      	cmp	r7, #9
 8007f0c:	d817      	bhi.n	8007f3e <_strtoul_l.isra.0+0x96>
 8007f0e:	463c      	mov	r4, r7
 8007f10:	42a6      	cmp	r6, r4
 8007f12:	dd23      	ble.n	8007f5c <_strtoul_l.isra.0+0xb4>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	db1e      	blt.n	8007f56 <_strtoul_l.isra.0+0xae>
 8007f18:	4282      	cmp	r2, r0
 8007f1a:	d31c      	bcc.n	8007f56 <_strtoul_l.isra.0+0xae>
 8007f1c:	d101      	bne.n	8007f22 <_strtoul_l.isra.0+0x7a>
 8007f1e:	45a4      	cmp	ip, r4
 8007f20:	db19      	blt.n	8007f56 <_strtoul_l.isra.0+0xae>
 8007f22:	fb00 4006 	mla	r0, r0, r6, r4
 8007f26:	2301      	movs	r3, #1
 8007f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2c:	e7eb      	b.n	8007f06 <_strtoul_l.isra.0+0x5e>
 8007f2e:	462f      	mov	r7, r5
 8007f30:	e7c1      	b.n	8007eb6 <_strtoul_l.isra.0+0xe>
 8007f32:	2c2b      	cmp	r4, #43	; 0x2b
 8007f34:	bf04      	itt	eq
 8007f36:	1cbd      	addeq	r5, r7, #2
 8007f38:	787c      	ldrbeq	r4, [r7, #1]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	e7cb      	b.n	8007ed6 <_strtoul_l.isra.0+0x2e>
 8007f3e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007f42:	2f19      	cmp	r7, #25
 8007f44:	d801      	bhi.n	8007f4a <_strtoul_l.isra.0+0xa2>
 8007f46:	3c37      	subs	r4, #55	; 0x37
 8007f48:	e7e2      	b.n	8007f10 <_strtoul_l.isra.0+0x68>
 8007f4a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007f4e:	2f19      	cmp	r7, #25
 8007f50:	d804      	bhi.n	8007f5c <_strtoul_l.isra.0+0xb4>
 8007f52:	3c57      	subs	r4, #87	; 0x57
 8007f54:	e7dc      	b.n	8007f10 <_strtoul_l.isra.0+0x68>
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	e7e5      	b.n	8007f28 <_strtoul_l.isra.0+0x80>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da09      	bge.n	8007f74 <_strtoul_l.isra.0+0xcc>
 8007f60:	2322      	movs	r3, #34	; 0x22
 8007f62:	f8c8 3000 	str.w	r3, [r8]
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	f1ba 0f00 	cmp.w	sl, #0
 8007f6e:	d107      	bne.n	8007f80 <_strtoul_l.isra.0+0xd8>
 8007f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f74:	b101      	cbz	r1, 8007f78 <_strtoul_l.isra.0+0xd0>
 8007f76:	4240      	negs	r0, r0
 8007f78:	f1ba 0f00 	cmp.w	sl, #0
 8007f7c:	d0f8      	beq.n	8007f70 <_strtoul_l.isra.0+0xc8>
 8007f7e:	b10b      	cbz	r3, 8007f84 <_strtoul_l.isra.0+0xdc>
 8007f80:	f105 39ff 	add.w	r9, r5, #4294967295
 8007f84:	f8ca 9000 	str.w	r9, [sl]
 8007f88:	e7f2      	b.n	8007f70 <_strtoul_l.isra.0+0xc8>
 8007f8a:	2430      	movs	r4, #48	; 0x30
 8007f8c:	2e00      	cmp	r6, #0
 8007f8e:	d1b0      	bne.n	8007ef2 <_strtoul_l.isra.0+0x4a>
 8007f90:	2608      	movs	r6, #8
 8007f92:	e7ae      	b.n	8007ef2 <_strtoul_l.isra.0+0x4a>
 8007f94:	2c30      	cmp	r4, #48	; 0x30
 8007f96:	d0a4      	beq.n	8007ee2 <_strtoul_l.isra.0+0x3a>
 8007f98:	260a      	movs	r6, #10
 8007f9a:	e7aa      	b.n	8007ef2 <_strtoul_l.isra.0+0x4a>

08007f9c <_strtoul_r>:
 8007f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f9e:	4c06      	ldr	r4, [pc, #24]	; (8007fb8 <_strtoul_r+0x1c>)
 8007fa0:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_strtoul_r+0x20>)
 8007fa2:	6824      	ldr	r4, [r4, #0]
 8007fa4:	6a24      	ldr	r4, [r4, #32]
 8007fa6:	2c00      	cmp	r4, #0
 8007fa8:	bf08      	it	eq
 8007faa:	462c      	moveq	r4, r5
 8007fac:	9400      	str	r4, [sp, #0]
 8007fae:	f7ff ff7b 	bl	8007ea8 <_strtoul_l.isra.0>
 8007fb2:	b003      	add	sp, #12
 8007fb4:	bd30      	pop	{r4, r5, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000098 	.word	0x20000098
 8007fbc:	200000fc 	.word	0x200000fc

08007fc0 <__submore>:
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fcc:	4299      	cmp	r1, r3
 8007fce:	d11d      	bne.n	800800c <__submore+0x4c>
 8007fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fd4:	f000 f8c4 	bl	8008160 <_malloc_r>
 8007fd8:	b918      	cbnz	r0, 8007fe2 <__submore+0x22>
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295
 8007fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007fe8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007fec:	6360      	str	r0, [r4, #52]	; 0x34
 8007fee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007ff2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ff6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007ffa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ffe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008002:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008006:	6020      	str	r0, [r4, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	e7e8      	b.n	8007fde <__submore+0x1e>
 800800c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800800e:	0077      	lsls	r7, r6, #1
 8008010:	463a      	mov	r2, r7
 8008012:	f000 f8ff 	bl	8008214 <_realloc_r>
 8008016:	4605      	mov	r5, r0
 8008018:	2800      	cmp	r0, #0
 800801a:	d0de      	beq.n	8007fda <__submore+0x1a>
 800801c:	eb00 0806 	add.w	r8, r0, r6
 8008020:	4601      	mov	r1, r0
 8008022:	4632      	mov	r2, r6
 8008024:	4640      	mov	r0, r8
 8008026:	f000 f829 	bl	800807c <memcpy>
 800802a:	f8c4 8000 	str.w	r8, [r4]
 800802e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008032:	e7e9      	b.n	8008008 <__submore+0x48>

08008034 <__locale_ctype_ptr_l>:
 8008034:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008038:	4770      	bx	lr
	...

0800803c <__locale_ctype_ptr>:
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <__locale_ctype_ptr+0x14>)
 800803e:	4a05      	ldr	r2, [pc, #20]	; (8008054 <__locale_ctype_ptr+0x18>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	2b00      	cmp	r3, #0
 8008046:	bf08      	it	eq
 8008048:	4613      	moveq	r3, r2
 800804a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800804e:	4770      	bx	lr
 8008050:	20000098 	.word	0x20000098
 8008054:	200000fc 	.word	0x200000fc

08008058 <__ascii_mbtowc>:
 8008058:	b082      	sub	sp, #8
 800805a:	b901      	cbnz	r1, 800805e <__ascii_mbtowc+0x6>
 800805c:	a901      	add	r1, sp, #4
 800805e:	b142      	cbz	r2, 8008072 <__ascii_mbtowc+0x1a>
 8008060:	b14b      	cbz	r3, 8008076 <__ascii_mbtowc+0x1e>
 8008062:	7813      	ldrb	r3, [r2, #0]
 8008064:	600b      	str	r3, [r1, #0]
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	1c10      	adds	r0, r2, #0
 800806a:	bf18      	it	ne
 800806c:	2001      	movne	r0, #1
 800806e:	b002      	add	sp, #8
 8008070:	4770      	bx	lr
 8008072:	4610      	mov	r0, r2
 8008074:	e7fb      	b.n	800806e <__ascii_mbtowc+0x16>
 8008076:	f06f 0001 	mvn.w	r0, #1
 800807a:	e7f8      	b.n	800806e <__ascii_mbtowc+0x16>

0800807c <memcpy>:
 800807c:	b510      	push	{r4, lr}
 800807e:	1e43      	subs	r3, r0, #1
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	d100      	bne.n	8008088 <memcpy+0xc>
 8008086:	bd10      	pop	{r4, pc}
 8008088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008090:	e7f7      	b.n	8008082 <memcpy+0x6>

08008092 <memmove>:
 8008092:	4288      	cmp	r0, r1
 8008094:	b510      	push	{r4, lr}
 8008096:	eb01 0302 	add.w	r3, r1, r2
 800809a:	d807      	bhi.n	80080ac <memmove+0x1a>
 800809c:	1e42      	subs	r2, r0, #1
 800809e:	4299      	cmp	r1, r3
 80080a0:	d00a      	beq.n	80080b8 <memmove+0x26>
 80080a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080aa:	e7f8      	b.n	800809e <memmove+0xc>
 80080ac:	4283      	cmp	r3, r0
 80080ae:	d9f5      	bls.n	800809c <memmove+0xa>
 80080b0:	1881      	adds	r1, r0, r2
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	42d3      	cmn	r3, r2
 80080b6:	d100      	bne.n	80080ba <memmove+0x28>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080c2:	e7f7      	b.n	80080b4 <memmove+0x22>

080080c4 <_free_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4605      	mov	r5, r0
 80080c8:	2900      	cmp	r1, #0
 80080ca:	d045      	beq.n	8008158 <_free_r+0x94>
 80080cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d0:	1f0c      	subs	r4, r1, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfb8      	it	lt
 80080d6:	18e4      	addlt	r4, r4, r3
 80080d8:	f000 f8df 	bl	800829a <__malloc_lock>
 80080dc:	4a1f      	ldr	r2, [pc, #124]	; (800815c <_free_r+0x98>)
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	4610      	mov	r0, r2
 80080e2:	b933      	cbnz	r3, 80080f2 <_free_r+0x2e>
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	6014      	str	r4, [r2, #0]
 80080e8:	4628      	mov	r0, r5
 80080ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ee:	f000 b8d5 	b.w	800829c <__malloc_unlock>
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	d90c      	bls.n	8008110 <_free_r+0x4c>
 80080f6:	6821      	ldr	r1, [r4, #0]
 80080f8:	1862      	adds	r2, r4, r1
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bf04      	itt	eq
 80080fe:	681a      	ldreq	r2, [r3, #0]
 8008100:	685b      	ldreq	r3, [r3, #4]
 8008102:	6063      	str	r3, [r4, #4]
 8008104:	bf04      	itt	eq
 8008106:	1852      	addeq	r2, r2, r1
 8008108:	6022      	streq	r2, [r4, #0]
 800810a:	6004      	str	r4, [r0, #0]
 800810c:	e7ec      	b.n	80080e8 <_free_r+0x24>
 800810e:	4613      	mov	r3, r2
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	b10a      	cbz	r2, 8008118 <_free_r+0x54>
 8008114:	42a2      	cmp	r2, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x4a>
 8008118:	6819      	ldr	r1, [r3, #0]
 800811a:	1858      	adds	r0, r3, r1
 800811c:	42a0      	cmp	r0, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x74>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	4401      	add	r1, r0
 8008124:	1858      	adds	r0, r3, r1
 8008126:	4282      	cmp	r2, r0
 8008128:	6019      	str	r1, [r3, #0]
 800812a:	d1dd      	bne.n	80080e8 <_free_r+0x24>
 800812c:	6810      	ldr	r0, [r2, #0]
 800812e:	6852      	ldr	r2, [r2, #4]
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	4401      	add	r1, r0
 8008134:	6019      	str	r1, [r3, #0]
 8008136:	e7d7      	b.n	80080e8 <_free_r+0x24>
 8008138:	d902      	bls.n	8008140 <_free_r+0x7c>
 800813a:	230c      	movs	r3, #12
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	e7d3      	b.n	80080e8 <_free_r+0x24>
 8008140:	6820      	ldr	r0, [r4, #0]
 8008142:	1821      	adds	r1, r4, r0
 8008144:	428a      	cmp	r2, r1
 8008146:	bf04      	itt	eq
 8008148:	6811      	ldreq	r1, [r2, #0]
 800814a:	6852      	ldreq	r2, [r2, #4]
 800814c:	6062      	str	r2, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1809      	addeq	r1, r1, r0
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	605c      	str	r4, [r3, #4]
 8008156:	e7c7      	b.n	80080e8 <_free_r+0x24>
 8008158:	bd38      	pop	{r3, r4, r5, pc}
 800815a:	bf00      	nop
 800815c:	2000028c 	.word	0x2000028c

08008160 <_malloc_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	1ccd      	adds	r5, r1, #3
 8008164:	f025 0503 	bic.w	r5, r5, #3
 8008168:	3508      	adds	r5, #8
 800816a:	2d0c      	cmp	r5, #12
 800816c:	bf38      	it	cc
 800816e:	250c      	movcc	r5, #12
 8008170:	2d00      	cmp	r5, #0
 8008172:	4606      	mov	r6, r0
 8008174:	db01      	blt.n	800817a <_malloc_r+0x1a>
 8008176:	42a9      	cmp	r1, r5
 8008178:	d903      	bls.n	8008182 <_malloc_r+0x22>
 800817a:	230c      	movs	r3, #12
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	2000      	movs	r0, #0
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	f000 f88a 	bl	800829a <__malloc_lock>
 8008186:	4a21      	ldr	r2, [pc, #132]	; (800820c <_malloc_r+0xac>)
 8008188:	6814      	ldr	r4, [r2, #0]
 800818a:	4621      	mov	r1, r4
 800818c:	b991      	cbnz	r1, 80081b4 <_malloc_r+0x54>
 800818e:	4c20      	ldr	r4, [pc, #128]	; (8008210 <_malloc_r+0xb0>)
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	b91b      	cbnz	r3, 800819c <_malloc_r+0x3c>
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f863 	bl	8008260 <_sbrk_r>
 800819a:	6020      	str	r0, [r4, #0]
 800819c:	4629      	mov	r1, r5
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 f85e 	bl	8008260 <_sbrk_r>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d124      	bne.n	80081f2 <_malloc_r+0x92>
 80081a8:	230c      	movs	r3, #12
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	4630      	mov	r0, r6
 80081ae:	f000 f875 	bl	800829c <__malloc_unlock>
 80081b2:	e7e4      	b.n	800817e <_malloc_r+0x1e>
 80081b4:	680b      	ldr	r3, [r1, #0]
 80081b6:	1b5b      	subs	r3, r3, r5
 80081b8:	d418      	bmi.n	80081ec <_malloc_r+0x8c>
 80081ba:	2b0b      	cmp	r3, #11
 80081bc:	d90f      	bls.n	80081de <_malloc_r+0x7e>
 80081be:	600b      	str	r3, [r1, #0]
 80081c0:	50cd      	str	r5, [r1, r3]
 80081c2:	18cc      	adds	r4, r1, r3
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f869 	bl	800829c <__malloc_unlock>
 80081ca:	f104 000b 	add.w	r0, r4, #11
 80081ce:	1d23      	adds	r3, r4, #4
 80081d0:	f020 0007 	bic.w	r0, r0, #7
 80081d4:	1ac3      	subs	r3, r0, r3
 80081d6:	d0d3      	beq.n	8008180 <_malloc_r+0x20>
 80081d8:	425a      	negs	r2, r3
 80081da:	50e2      	str	r2, [r4, r3]
 80081dc:	e7d0      	b.n	8008180 <_malloc_r+0x20>
 80081de:	428c      	cmp	r4, r1
 80081e0:	684b      	ldr	r3, [r1, #4]
 80081e2:	bf16      	itet	ne
 80081e4:	6063      	strne	r3, [r4, #4]
 80081e6:	6013      	streq	r3, [r2, #0]
 80081e8:	460c      	movne	r4, r1
 80081ea:	e7eb      	b.n	80081c4 <_malloc_r+0x64>
 80081ec:	460c      	mov	r4, r1
 80081ee:	6849      	ldr	r1, [r1, #4]
 80081f0:	e7cc      	b.n	800818c <_malloc_r+0x2c>
 80081f2:	1cc4      	adds	r4, r0, #3
 80081f4:	f024 0403 	bic.w	r4, r4, #3
 80081f8:	42a0      	cmp	r0, r4
 80081fa:	d005      	beq.n	8008208 <_malloc_r+0xa8>
 80081fc:	1a21      	subs	r1, r4, r0
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f82e 	bl	8008260 <_sbrk_r>
 8008204:	3001      	adds	r0, #1
 8008206:	d0cf      	beq.n	80081a8 <_malloc_r+0x48>
 8008208:	6025      	str	r5, [r4, #0]
 800820a:	e7db      	b.n	80081c4 <_malloc_r+0x64>
 800820c:	2000028c 	.word	0x2000028c
 8008210:	20000290 	.word	0x20000290

08008214 <_realloc_r>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	4607      	mov	r7, r0
 8008218:	4614      	mov	r4, r2
 800821a:	460e      	mov	r6, r1
 800821c:	b921      	cbnz	r1, 8008228 <_realloc_r+0x14>
 800821e:	4611      	mov	r1, r2
 8008220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008224:	f7ff bf9c 	b.w	8008160 <_malloc_r>
 8008228:	b922      	cbnz	r2, 8008234 <_realloc_r+0x20>
 800822a:	f7ff ff4b 	bl	80080c4 <_free_r>
 800822e:	4625      	mov	r5, r4
 8008230:	4628      	mov	r0, r5
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008234:	f000 f833 	bl	800829e <_malloc_usable_size_r>
 8008238:	42a0      	cmp	r0, r4
 800823a:	d20f      	bcs.n	800825c <_realloc_r+0x48>
 800823c:	4621      	mov	r1, r4
 800823e:	4638      	mov	r0, r7
 8008240:	f7ff ff8e 	bl	8008160 <_malloc_r>
 8008244:	4605      	mov	r5, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	d0f2      	beq.n	8008230 <_realloc_r+0x1c>
 800824a:	4631      	mov	r1, r6
 800824c:	4622      	mov	r2, r4
 800824e:	f7ff ff15 	bl	800807c <memcpy>
 8008252:	4631      	mov	r1, r6
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff ff35 	bl	80080c4 <_free_r>
 800825a:	e7e9      	b.n	8008230 <_realloc_r+0x1c>
 800825c:	4635      	mov	r5, r6
 800825e:	e7e7      	b.n	8008230 <_realloc_r+0x1c>

08008260 <_sbrk_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4c06      	ldr	r4, [pc, #24]	; (800827c <_sbrk_r+0x1c>)
 8008264:	2300      	movs	r3, #0
 8008266:	4605      	mov	r5, r0
 8008268:	4608      	mov	r0, r1
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	f7f9 fe1e 	bl	8001eac <_sbrk>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_sbrk_r+0x1a>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	b103      	cbz	r3, 800827a <_sbrk_r+0x1a>
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	200004fc 	.word	0x200004fc

08008280 <__ascii_wctomb>:
 8008280:	b149      	cbz	r1, 8008296 <__ascii_wctomb+0x16>
 8008282:	2aff      	cmp	r2, #255	; 0xff
 8008284:	bf85      	ittet	hi
 8008286:	238a      	movhi	r3, #138	; 0x8a
 8008288:	6003      	strhi	r3, [r0, #0]
 800828a:	700a      	strbls	r2, [r1, #0]
 800828c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008290:	bf98      	it	ls
 8008292:	2001      	movls	r0, #1
 8008294:	4770      	bx	lr
 8008296:	4608      	mov	r0, r1
 8008298:	4770      	bx	lr

0800829a <__malloc_lock>:
 800829a:	4770      	bx	lr

0800829c <__malloc_unlock>:
 800829c:	4770      	bx	lr

0800829e <_malloc_usable_size_r>:
 800829e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a2:	1f18      	subs	r0, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfbc      	itt	lt
 80082a8:	580b      	ldrlt	r3, [r1, r0]
 80082aa:	18c0      	addlt	r0, r0, r3
 80082ac:	4770      	bx	lr
	...

080082b0 <_init>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr

080082bc <_fini>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr
