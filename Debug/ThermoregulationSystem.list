
ThermoregulationSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080076bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200000fc  080077b8  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080077b8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e70  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f1  00000000  00000000  00039f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003ea58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029139  00000000  00000000  0003fd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001364c  00000000  00000000  00068e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f49de  00000000  00000000  0007c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000584c  00000000  00000000  00170f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075e4 	.word	0x080075e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	080075e4 	.word	0x080075e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	4613      	mov	r3, r2
 80005d0:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fa5e 	bl	8000a94 <null_ptr_check>
 80005d8:	4603      	mov	r3, r0
 80005da:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80005dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d11c      	bne.n	800061e <bmp280_get_regs+0x5e>
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d019      	beq.n	800061e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685c      	ldr	r4, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7858      	ldrb	r0, [r3, #1]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	b29b      	uxth	r3, r3
 8000606:	7bf9      	ldrb	r1, [r7, #15]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	47a0      	blx	r4
 800060c:	4603      	mov	r3, r0
 800060e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d004      	beq.n	8000622 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000618:	23fc      	movs	r3, #252	; 0xfc
 800061a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800061c:	e001      	b.n	8000622 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}

0800062e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b089      	sub	sp, #36	; 0x24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4613      	mov	r3, r2
 800063c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d901      	bls.n	8000648 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f000 fa23 	bl	8000a94 <null_ptr_check>
 800064e:	4603      	mov	r3, r0
 8000650:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d14d      	bne.n	80006f6 <bmp280_set_regs+0xc8>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d04a      	beq.n	80006f6 <bmp280_set_regs+0xc8>
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d047      	beq.n	80006f6 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d041      	beq.n	80006f0 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d114      	bne.n	80006a4 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800067a:	2300      	movs	r3, #0
 800067c:	76fb      	strb	r3, [r7, #27]
 800067e:	e00d      	b.n	800069c <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	7efb      	ldrb	r3, [r7, #27]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	440b      	add	r3, r1
 800068e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	3301      	adds	r3, #1
 800069a:	76fb      	strb	r3, [r7, #27]
 800069c:	7efa      	ldrb	r2, [r7, #27]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d3ed      	bcc.n	8000680 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d90d      	bls.n	80006c6 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f107 0110 	add.w	r1, r7, #16
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 fa0e 	bl	8000ad4 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3b01      	subs	r3, #1
 80006c2:	83bb      	strh	r3, [r7, #28]
 80006c4:	e001      	b.n	80006ca <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	689c      	ldr	r4, [r3, #8]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	7858      	ldrb	r0, [r3, #1]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	8bbb      	ldrh	r3, [r7, #28]
 80006d8:	f107 0210 	add.w	r2, r7, #16
 80006dc:	47a0      	blx	r4
 80006de:	4603      	mov	r3, r0
 80006e0:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80006e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80006ea:	23fc      	movs	r3, #252	; 0xfc
 80006ec:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006ee:	e005      	b.n	80006fc <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80006f0:	23fd      	movs	r3, #253	; 0xfd
 80006f2:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006f4:	e002      	b.n	80006fc <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	77fb      	strb	r3, [r7, #31]
 80006fa:	e000      	b.n	80006fe <bmp280_set_regs+0xd0>
        if (len != 0)
 80006fc:	bf00      	nop
    }

    return rslt;
 80006fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}

0800070a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000712:	23e0      	movs	r3, #224	; 0xe0
 8000714:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000716:	23b6      	movs	r3, #182	; 0xb6
 8000718:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f9ba 	bl	8000a94 <null_ptr_check>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10d      	bne.n	8000748 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800072c:	f107 010d 	add.w	r1, r7, #13
 8000730:	f107 000e 	add.w	r0, r7, #14
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	f7ff ff79 	bl	800062e <bmp280_set_regs>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2002      	movs	r0, #2
 8000746:	4798      	blx	r3
    }

    return rslt;
 8000748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800075c:	2305      	movs	r3, #5
 800075e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f997 	bl	8000a94 <null_ptr_check>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d150      	bne.n	8000814 <bmp280_init+0xc0>
    {
        while (try_count)
 8000772:	e02d      	b.n	80007d0 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	20d0      	movs	r0, #208	; 0xd0
 800077c:	f7ff ff20 	bl	80005c0 <bmp280_get_regs>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d11a      	bne.n	80007c2 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000790:	2b56      	cmp	r3, #86	; 0x56
 8000792:	d007      	beq.n	80007a4 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b57      	cmp	r3, #87	; 0x57
 800079a:	d003      	beq.n	80007a4 <bmp280_init+0x50>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b58      	cmp	r3, #88	; 0x58
 80007a2:	d10e      	bne.n	80007c2 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffb0 	bl	800070a <bmp280_soft_reset>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d110      	bne.n	80007d8 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f9b7 	bl	8000b2a <get_calib_param>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007c0:	e00a      	b.n	80007d8 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	200a      	movs	r0, #10
 80007c8:	4798      	blx	r3
            --try_count;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1ce      	bne.n	8000774 <bmp280_init+0x20>
 80007d6:	e000      	b.n	80007da <bmp280_init+0x86>
                break;
 80007d8:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80007e0:	23fe      	movs	r3, #254	; 0xfe
 80007e2:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80007e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d113      	bne.n	8000814 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800082a:	2300      	movs	r3, #0
 800082c:	733b      	strb	r3, [r7, #12]
 800082e:	2300      	movs	r3, #0
 8000830:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000832:	6838      	ldr	r0, [r7, #0]
 8000834:	f000 f92e 	bl	8000a94 <null_ptr_check>
 8000838:	4603      	mov	r3, r0
 800083a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d137      	bne.n	80008b4 <bmp280_get_config+0x94>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d034      	beq.n	80008b4 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2202      	movs	r2, #2
 8000852:	20f4      	movs	r0, #244	; 0xf4
 8000854:	f7ff feb4 	bl	80005c0 <bmp280_get_regs>
 8000858:	4603      	mov	r3, r0
 800085a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d129      	bne.n	80008b8 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000864:	7b3b      	ldrb	r3, [r7, #12]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800086e:	7b3b      	ldrb	r3, [r7, #12]
 8000870:	109b      	asrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	b2da      	uxtb	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	b2da      	uxtb	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	109b      	asrs	r3, r3, #2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	b2da      	uxtb	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8000898:	7b7b      	ldrb	r3, [r7, #13]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	332c      	adds	r3, #44	; 0x2c
 80008aa:	6810      	ldr	r0, [r2, #0]
 80008ac:	6018      	str	r0, [r3, #0]
 80008ae:	7912      	ldrb	r2, [r2, #4]
 80008b0:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008b2:	e001      	b.n	80008b8 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008b4:	23ff      	movs	r3, #255	; 0xff
 80008b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f9c6 	bl	8000c64 <conf_sensor>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	6039      	str	r1, [r7, #0]
 80008ec:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f000 f8d0 	bl	8000a94 <null_ptr_check>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80008f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f9aa 	bl	8000c64 <conf_sensor>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f000 f8ad 	bl	8000a94 <null_ptr_check>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d133      	bne.n	80009ae <bmp280_get_uncomp_data+0x8e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d030      	beq.n	80009ae <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2206      	movs	r2, #6
 8000954:	20f7      	movs	r0, #247	; 0xf7
 8000956:	f7ff fe33 	bl	80005c0 <bmp280_get_regs>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d120      	bne.n	80009a8 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	031a      	lsls	r2, r3, #12
 800096a:	7a7b      	ldrb	r3, [r7, #9]
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	4313      	orrs	r3, r2
 8000970:	7aba      	ldrb	r2, [r7, #10]
 8000972:	0912      	lsrs	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	031a      	lsls	r2, r3, #12
 8000980:	7b3b      	ldrb	r3, [r7, #12]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	4313      	orrs	r3, r2
 8000986:	7b7a      	ldrb	r2, [r7, #13]
 8000988:	0912      	lsrs	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f000 fa1b 	bl	8000dd8 <st_check_boundaries>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009a6:	e004      	b.n	80009b2 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009a8:	23f3      	movs	r3, #243	; 0xf3
 80009aa:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009ac:	e001      	b.n	80009b2 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b088      	sub	sp, #32
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f862 	bl	8000a94 <null_ptr_check>
 80009d0:	4603      	mov	r3, r0
 80009d2:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80009d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d150      	bne.n	8000a7e <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da00      	bge.n	80009e4 <bmp280_get_comp_temp_32bit+0x26>
 80009e2:	3307      	adds	r3, #7
 80009e4:	10db      	asrs	r3, r3, #3
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	8a1b      	ldrh	r3, [r3, #16]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da01      	bge.n	8000a02 <bmp280_get_comp_temp_32bit+0x44>
 80009fe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a02:	12db      	asrs	r3, r3, #11
 8000a04:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	da00      	bge.n	8000a0e <bmp280_get_comp_temp_32bit+0x50>
 8000a0c:	330f      	adds	r3, #15
 8000a0e:	111b      	asrs	r3, r3, #4
 8000a10:	461a      	mov	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
 8000a16:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da00      	bge.n	8000a20 <bmp280_get_comp_temp_32bit+0x62>
 8000a1e:	330f      	adds	r3, #15
 8000a20:	111b      	asrs	r3, r3, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	8a1b      	ldrh	r3, [r3, #16]
 8000a28:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a2a:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da01      	bge.n	8000a36 <bmp280_get_comp_temp_32bit+0x78>
 8000a32:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a36:	131b      	asrs	r3, r3, #12
 8000a38:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a40:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da03      	bge.n	8000a50 <bmp280_get_comp_temp_32bit+0x92>
 8000a48:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000a4c:	441a      	add	r2, r3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	139b      	asrs	r3, r3, #14
 8000a52:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	441a      	add	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	3380      	adds	r3, #128	; 0x80
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da00      	bge.n	8000a70 <bmp280_get_comp_temp_32bit+0xb2>
 8000a6e:	33ff      	adds	r3, #255	; 0xff
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	77fb      	strb	r3, [r7, #31]
 8000a7c:	e004      	b.n	8000a88 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8000a84:	23f2      	movs	r3, #242	; 0xf2
 8000a86:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <null_ptr_check+0x26>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <null_ptr_check+0x26>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <null_ptr_check+0x26>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000aba:	23ff      	movs	r3, #255	; 0xff
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	e016      	b.n	8000b16 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	441a      	add	r2, r3
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	3b01      	subs	r3, #1
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	440b      	add	r3, r1
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	441a      	add	r2, r3
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	3301      	adds	r3, #1
 8000b14:	75fb      	strb	r3, [r7, #23]
 8000b16:	7dfa      	ldrb	r2, [r7, #23]
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3e4      	bcc.n	8000ae8 <interleave_data+0x14>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b08a      	sub	sp, #40	; 0x28
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffa5 	bl	8000a94 <null_ptr_check>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d17f      	bne.n	8000c58 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000b58:	f107 010c 	add.w	r1, r7, #12
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2218      	movs	r2, #24
 8000b60:	2088      	movs	r0, #136	; 0x88
 8000b62:	f7ff fd2d 	bl	80005c0 <bmp280_get_regs>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d171      	bne.n	8000c58 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000b9a:	7c7b      	ldrb	r3, [r7, #17]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	7c3b      	ldrb	r3, [r7, #16]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000bac:	7cfb      	ldrb	r3, [r7, #19]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	7cbb      	ldrb	r3, [r7, #18]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000bc0:	7d7b      	ldrb	r3, [r7, #21]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	7d3b      	ldrb	r3, [r7, #20]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7dbb      	ldrb	r3, [r7, #22]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000be4:	7e7b      	ldrb	r3, [r7, #25]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	7e3b      	ldrb	r3, [r7, #24]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000bf6:	7efb      	ldrb	r3, [r7, #27]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	7ebb      	ldrb	r3, [r7, #26]
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000c08:	7f7b      	ldrb	r3, [r7, #29]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	7f3b      	ldrb	r3, [r7, #28]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000c1a:	7ffb      	ldrb	r3, [r7, #31]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	7fbb      	ldrb	r3, [r7, #30]
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000c2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000c72:	2300      	movs	r3, #0
 8000c74:	753b      	strb	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000c7a:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <conf_sensor+0x170>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff07 	bl	8000a94 <null_ptr_check>
 8000c86:	4603      	mov	r3, r0
 8000c88:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8095 	bne.w	8000dbe <conf_sensor+0x15a>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8091 	beq.w	8000dbe <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000c9c:	f107 0114 	add.w	r1, r7, #20
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	20f4      	movs	r0, #244	; 0xf4
 8000ca6:	f7ff fc8b 	bl	80005c0 <bmp280_get_regs>
 8000caa:	4603      	mov	r3, r0
 8000cac:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8086 	bne.w	8000dc4 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fd26 	bl	800070a <bmp280_soft_reset>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d17c      	bne.n	8000dc4 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000cca:	7d3b      	ldrb	r3, [r7, #20]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000ce4:	7d3b      	ldrb	r3, [r7, #20]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f023 031c 	bic.w	r3, r3, #28
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f003 031c 	and.w	r3, r3, #28
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000d04:	7d7b      	ldrb	r3, [r7, #21]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	015b      	lsls	r3, r3, #5
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000d1e:	7d7b      	ldrb	r3, [r7, #21]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	f023 031c 	bic.w	r3, r3, #28
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000d5c:	f107 0114 	add.w	r1, r7, #20
 8000d60:	f107 0010 	add.w	r0, r7, #16
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2202      	movs	r2, #2
 8000d68:	f7ff fc61 	bl	800062e <bmp280_set_regs>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d125      	bne.n	8000dc4 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	332c      	adds	r3, #44	; 0x2c
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	7912      	ldrb	r2, [r2, #4]
 8000d84:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d01b      	beq.n	8000dc4 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000d8c:	7d3b      	ldrb	r3, [r7, #20]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000da8:	f107 0114 	add.w	r1, r7, #20
 8000dac:	f107 0010 	add.w	r0, r7, #16
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f7ff fc3b 	bl	800062e <bmp280_set_regs>
 8000db8:	4603      	mov	r3, r0
 8000dba:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000dbc:	e002      	b.n	8000dc4 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	75fb      	strb	r3, [r7, #23]
 8000dc2:	e000      	b.n	8000dc6 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8000dc4:	bf00      	nop
    }

    return rslt;
 8000dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080075fc 	.word	0x080075fc

08000dd8 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd03      	ble.n	8000df4 <st_check_boundaries+0x1c>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <st_check_boundaries+0x6c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	dd09      	ble.n	8000e08 <st_check_boundaries+0x30>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dd03      	ble.n	8000e02 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <st_check_boundaries+0x6c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	dd02      	ble.n	8000e08 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000e02:	23f4      	movs	r3, #244	; 0xf4
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e015      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	dd03      	ble.n	8000e16 <st_check_boundaries+0x3e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <st_check_boundaries+0x6c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	dd02      	ble.n	8000e1c <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000e16:	23f6      	movs	r3, #246	; 0xf6
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e00b      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dd03      	ble.n	8000e2a <st_check_boundaries+0x52>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <st_check_boundaries+0x6c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	dd02      	ble.n	8000e30 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000e2a:	23f5      	movs	r3, #245	; 0xf5
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e001      	b.n	8000e34 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	000fffef 	.word	0x000fffef

08000e48 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fc7f 	bl	8000754 <bmp280_init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fcdd 	bl	8000820 <bmp280_get_config>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 8000e72:	2301      	movs	r3, #1
 8000e74:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 8000e76:	2303      	movs	r3, #3
 8000e78:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fd1f 	bl	80008c4 <bmp280_set_config>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fd28 	bl	80008e2 <bmp280_set_power_mode>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++) 
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ece:	e011      	b.n	8000ef4 <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 8000ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000edc:	3301      	adds	r3, #1
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ee4:	440b      	add	r3, r1
 8000ee6:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++) 
 8000eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8e7      	bhi.n	8000ed0 <bmp280_spi_reg_write+0x2c>
  }
  
  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <bmp280_spi_reg_write+0xdc>)
 8000f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <bmp280_spi_reg_write+0xe0>)
 8000f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f001 fe92 	bl	8002c3c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 010c 	add.w	r1, r7, #12
 8000f22:	2305      	movs	r3, #5
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <bmp280_spi_reg_write+0xe4>)
 8000f26:	f003 f96b 	bl	8004200 <HAL_SPI_Transmit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f36:	e012      	b.n	8000f5e <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8000f38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <bmp280_spi_reg_write+0xdc>)
 8000f3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <bmp280_spi_reg_write+0xe0>)
 8000f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f001 fe74 	bl	8002c3c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d9e8      	bls.n	8000f38 <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 8000f66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
    
  return (int8_t)iError;
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	b25b      	sxtb	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	2000017c 	.word	0x2000017c

08000f8c <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	603a      	str	r2, [r7, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <bmp280_spi_reg_read+0x110>)
 8000fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <bmp280_spi_reg_read+0x114>)
 8000fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	f001 fe25 	bl	8002c3c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	f107 0208 	add.w	r2, r7, #8
 8000ffc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001000:	2305      	movs	r3, #5
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4603      	mov	r3, r0
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <bmp280_spi_reg_read+0x118>)
 8001008:	f003 fa60 	bl	80044cc <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001018:	e012      	b.n	8001040 <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 800101a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <bmp280_spi_reg_read+0x110>)
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <bmp280_spi_reg_read+0x114>)
 800102a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fe03 	bl	8002c3c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800103a:	3301      	adds	r3, #1
 800103c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001044:	2b01      	cmp	r3, #1
 8001046:	d9e8      	bls.n	800101a <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800104e:	e011      	b.n	8001074 <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 8001050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	440b      	add	r3, r1
 800105e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001062:	440a      	add	r2, r1
 8001064:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001068:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 800106a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800106e:	3301      	adds	r3, #1
 8001070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001074:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001078:	b29b      	uxth	r3, r3
 800107a:	88ba      	ldrh	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8e7      	bhi.n	8001050 <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 8001080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  return (int8_t)iError;
 800108e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001090:	b25b      	sxtb	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	3748      	adds	r7, #72	; 0x48
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	2000017c 	.word	0x2000017c

080010a8 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] hbtn Encoder handler
 * @return None
 */
void ENC_Init(ENC_HandleTypeDef* henc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	213c      	movs	r1, #60	; 0x3c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fec4 	bl	8004e44 <HAL_TIM_Encoder_Start>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] hbtn Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_HandleTypeDef* henc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	60fb      	str	r3, [r7, #12]
  henc->Counter = henc->Timer->Instance->CNT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	bf34      	ite	cc
 80010e8:	2301      	movcc	r3, #1
 80010ea:	2300      	movcs	r3, #0
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	bf8c      	ite	hi
 80010fc:	2301      	movhi	r3, #1
 80010fe:	2300      	movls	r3, #0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	745a      	strb	r2, [r3, #17]
  return henc->Counter;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4bb3      	ldr	r3, [pc, #716]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4ab2      	ldr	r2, [pc, #712]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4bb0      	ldr	r3, [pc, #704]	; (80013fc <MX_GPIO_Init+0x2e4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4bad      	ldr	r3, [pc, #692]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4aac      	ldr	r2, [pc, #688]	; (80013fc <MX_GPIO_Init+0x2e4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4baa      	ldr	r3, [pc, #680]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4ba7      	ldr	r3, [pc, #668]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4aa6      	ldr	r2, [pc, #664]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4ba4      	ldr	r3, [pc, #656]	; (80013fc <MX_GPIO_Init+0x2e4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4aa0      	ldr	r2, [pc, #640]	; (80013fc <MX_GPIO_Init+0x2e4>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b9b      	ldr	r3, [pc, #620]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a9a      	ldr	r2, [pc, #616]	; (80013fc <MX_GPIO_Init+0x2e4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b98      	ldr	r3, [pc, #608]	; (80013fc <MX_GPIO_Init+0x2e4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b95      	ldr	r3, [pc, #596]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a94      	ldr	r2, [pc, #592]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b92      	ldr	r3, [pc, #584]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	4b8f      	ldr	r3, [pc, #572]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a8e      	ldr	r2, [pc, #568]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <MX_GPIO_Init+0x2e4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2118      	movs	r1, #24
 80011da:	4889      	ldr	r0, [pc, #548]	; (8001400 <MX_GPIO_Init+0x2e8>)
 80011dc:	f001 fd2e 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2149      	movs	r1, #73	; 0x49
 80011e4:	4887      	ldr	r0, [pc, #540]	; (8001404 <MX_GPIO_Init+0x2ec>)
 80011e6:	f001 fd29 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2108      	movs	r1, #8
 80011ee:	4886      	ldr	r0, [pc, #536]	; (8001408 <MX_GPIO_Init+0x2f0>)
 80011f0:	f001 fd24 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80011f4:	2200      	movs	r2, #0
 80011f6:	f644 4181 	movw	r1, #19585	; 0x4c81
 80011fa:	4884      	ldr	r0, [pc, #528]	; (800140c <MX_GPIO_Init+0x2f4>)
 80011fc:	f001 fd1e 	bl	8002c3c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	487e      	ldr	r0, [pc, #504]	; (8001400 <MX_GPIO_Init+0x2e8>)
 8001208:	f001 fd18 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	487f      	ldr	r0, [pc, #508]	; (8001410 <MX_GPIO_Init+0x2f8>)
 8001212:	f001 fd13 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	21f0      	movs	r1, #240	; 0xf0
 800121a:	487e      	ldr	r0, [pc, #504]	; (8001414 <MX_GPIO_Init+0x2fc>)
 800121c:	f001 fd0e 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001220:	2318      	movs	r3, #24
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4872      	ldr	r0, [pc, #456]	; (8001400 <MX_GPIO_Init+0x2e8>)
 8001238:	f001 fb56 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001242:	4b75      	ldr	r3, [pc, #468]	; (8001418 <MX_GPIO_Init+0x300>)
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	486c      	ldr	r0, [pc, #432]	; (8001404 <MX_GPIO_Init+0x2ec>)
 8001252:	f001 fb49 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 8001256:	2309      	movs	r3, #9
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4865      	ldr	r0, [pc, #404]	; (8001404 <MX_GPIO_Init+0x2ec>)
 800126e:	f001 fb3b 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001272:	2332      	movs	r3, #50	; 0x32
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001282:	230b      	movs	r3, #11
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	485d      	ldr	r0, [pc, #372]	; (8001404 <MX_GPIO_Init+0x2ec>)
 800128e:	f001 fb2b 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001292:	2306      	movs	r3, #6
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a2:	230b      	movs	r3, #11
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4856      	ldr	r0, [pc, #344]	; (8001408 <MX_GPIO_Init+0x2f0>)
 80012ae:	f001 fb1b 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80012b2:	2308      	movs	r3, #8
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	484f      	ldr	r0, [pc, #316]	; (8001408 <MX_GPIO_Init+0x2f0>)
 80012ca:	f001 fb0d 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 80012ce:	2320      	movs	r3, #32
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <MX_GPIO_Init+0x304>)
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4849      	ldr	r0, [pc, #292]	; (8001408 <MX_GPIO_Init+0x2f0>)
 80012e2:	f001 fb01 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 80012e6:	2340      	movs	r3, #64	; 0x40
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <MX_GPIO_Init+0x300>)
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4843      	ldr	r0, [pc, #268]	; (8001408 <MX_GPIO_Init+0x2f0>)
 80012fa:	f001 faf5 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80012fe:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001302:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	483d      	ldr	r0, [pc, #244]	; (800140c <MX_GPIO_Init+0x2f4>)
 8001318:	f001 fae6 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 800131c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <MX_GPIO_Init+0x2e8>)
 8001336:	f001 fad7 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134c:	230b      	movs	r3, #11
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	482d      	ldr	r0, [pc, #180]	; (800140c <MX_GPIO_Init+0x2f4>)
 8001358:	f001 fac6 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MX_GPIO_Init+0x300>)
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4826      	ldr	r0, [pc, #152]	; (800140c <MX_GPIO_Init+0x2f4>)
 8001372:	f001 fab9 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_GPIO_Init+0x304>)
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4822      	ldr	r0, [pc, #136]	; (8001414 <MX_GPIO_Init+0x2fc>)
 800138c:	f001 faac 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_GPIO_Init+0x2fc>)
 80013a6:	f001 fa9f 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <MX_GPIO_Init+0x2f8>)
 80013c2:	f001 fa91 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_GPIO_Init+0x2f8>)
 80013da:	f001 fa85 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_GPIO_Init+0x2ec>)
 80013f6:	f001 fa77 	bl	80028e8 <HAL_GPIO_Init>
 80013fa:	e011      	b.n	8001420 <MX_GPIO_Init+0x308>
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40021800 	.word	0x40021800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	10110000 	.word	0x10110000
 800141c:	10210000 	.word	0x10210000

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001420:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001432:	230a      	movs	r3, #10
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <MX_GPIO_Init+0x3ac>)
 800143e:	f001 fa53 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_GPIO_Init+0x3ac>)
 8001458:	f001 fa46 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 800145c:	23f0      	movs	r3, #240	; 0xf0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4815      	ldr	r0, [pc, #84]	; (80014c8 <MX_GPIO_Init+0x3b0>)
 8001474:	f001 fa38 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001478:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148a:	230b      	movs	r3, #11
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_GPIO_Init+0x3b4>)
 8001496:	f001 fa27 	bl	80028e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2017      	movs	r0, #23
 80014a0:	f001 f9c9 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014a4:	2017      	movs	r0, #23
 80014a6:	f001 f9e2 	bl	800286e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2028      	movs	r0, #40	; 0x28
 80014b0:	f001 f9c1 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b4:	2028      	movs	r0, #40	; 0x28
 80014b6:	f001 f9da 	bl	800286e <HAL_NVIC_EnableIRQ>

}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021800 	.word	0x40021800

080014d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f001 fbd4 	bl	8002cb8 <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 fb9d 	bl	8001c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f001 fc5b 	bl	8002dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 fb94 	bl	8001c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f001 fc9d 	bl	8002e6e <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 fb8b 	bl	8001c54 <Error_Handler>
  }

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000128 	.word	0x20000128
 8001548:	40005400 	.word	0x40005400
 800154c:	20404768 	.word	0x20404768

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_I2C_MspInit+0x7c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d128      	bne.n	80015c4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800159c:	2304      	movs	r3, #4
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <HAL_I2C_MspInit+0x84>)
 80015a8:	f001 f99e 	bl	80028e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 80015b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_I2C_MspInit+0x80>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400

080015d8 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6898      	ldr	r0, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	899b      	ldrh	r3, [r3, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f001 fb24 	bl	8002c3c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7d9b      	ldrb	r3, [r3, #22]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d115      	bne.n	8001628 <lcd_write_command+0x50>
  {
	if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7f1b      	ldrb	r3, [r3, #28]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <lcd_write_command+0x3c>
	{
	  lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f842 	bl	8001698 <lcd_write>
	}
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f839 	bl	8001698 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 8001626:	e005      	b.n	8001634 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2208      	movs	r2, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f832 	bl	8001698 <lcd_write>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6898      	ldr	r0, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	899b      	ldrh	r3, [r3, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f001 faf2 	bl	8002c3c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d9b      	ldrb	r3, [r3, #22]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2204      	movs	r2, #4
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f814 	bl	8001698 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2204      	movs	r2, #4
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f80b 	bl	8001698 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001682:	e005      	b.n	8001690 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f804 	bl	8001698 <lcd_write>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6918      	ldr	r0, [r3, #16]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	8a9b      	ldrh	r3, [r3, #20]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	f001 fac2 	bl	8002c3c <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e019      	b.n	80016f2 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	8819      	ldrh	r1, [r3, #0]
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	fa42 f303 	asr.w	r3, r2, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	f001 faa8 	bl	8002c3c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	78bb      	ldrb	r3, [r7, #2]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3e1      	bcc.n	80016be <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6918      	ldr	r0, [r3, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8a9b      	ldrh	r3, [r3, #20]
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	f001 fa99 	bl	8002c3c <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 800170a:	2132      	movs	r1, #50	; 0x32
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f804 	bl	800171a <lcd_delay_us>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fa26 	bl	8004b84 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 8001738:	bf00      	nop
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f8      	bhi.n	800173a <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fa43 	bl	8004bd8 <HAL_TIM_Base_Stop>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 8001768:	f643 315f 	movw	r1, #15199	; 0x3b5f
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ffd4 	bl	800171a <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7d9b      	ldrb	r3, [r3, #22]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d120      	bne.n	80017bc <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800177a:	2103      	movs	r1, #3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff2b 	bl	80015d8 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001782:	f241 0167 	movw	r1, #4199	; 0x1067
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffc7 	bl	800171a <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 800178c:	2103      	movs	r1, #3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff22 	bl	80015d8 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001794:	21c8      	movs	r1, #200	; 0xc8
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffbf 	bl	800171a <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 800179c:	2103      	movs	r1, #3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff1a 	bl	80015d8 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 80017a4:	2102      	movs	r1, #2
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff16 	bl	80015d8 <lcd_write_command>

    hlcd->IsInitialized = 1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80017b2:	2128      	movs	r1, #40	; 0x28
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff0f 	bl	80015d8 <lcd_write_command>
 80017ba:	e01f      	b.n	80017fc <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7d9b      	ldrb	r3, [r3, #22]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d11b      	bne.n	80017fc <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017c4:	2130      	movs	r1, #48	; 0x30
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff06 	bl	80015d8 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80017cc:	f241 0167 	movw	r1, #4199	; 0x1067
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffa2 	bl	800171a <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017d6:	2130      	movs	r1, #48	; 0x30
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fefd 	bl	80015d8 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80017de:	21c8      	movs	r1, #200	; 0xc8
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff9a 	bl	800171a <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80017e6:	2130      	movs	r1, #48	; 0x30
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fef5 	bl	80015d8 <lcd_write_command>

	hlcd->IsInitialized = 1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80017f4:	2138      	movs	r1, #56	; 0x38
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff feee 	bl	80015d8 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80017fc:	2101      	movs	r1, #1
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff feea 	bl	80015d8 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001804:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff86 	bl	800171a <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 800180e:	210c      	movs	r1, #12
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fee1 	bl	80015d8 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 8001816:	2106      	movs	r1, #6
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fedd 	bl	80015d8 <lcd_write_command>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e00a      	b.n	800184c <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fefb 	bl	800163c <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	7bfc      	ldrb	r4, [r7, #15]
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f7fe fcde 	bl	8000210 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	429c      	cmp	r4, r3
 8001858:	d3ed      	bcc.n	8001836 <LCD_printStr+0x10>
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
	...

08001864 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
 8001870:	4613      	mov	r3, r2
 8001872:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <LCD_SetCursor+0x30>)
 8001878:	5cd2      	ldrb	r2, [r2, r3]
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	4413      	add	r3, r2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3b80      	subs	r3, #128	; 0x80
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fea6 	bl	80015d8 <lcd_write_command>
  #endif
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0800765c 	.word	0x0800765c

08001898 <_LCD_Show>:
 * @param[in] act_temp  Null-terminated string
 * @param[in] dest_temp  Null-terminated string
 * @param[in] fan  Null-terminated string
 * @return None
 */
void _LCD_Show(LCD_HandleTypeDef* hlcd, char* act_temp, char* dest_temp,char* fan){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
	LCD_SetCursor(hlcd, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff ffda 	bl	8001864 <LCD_SetCursor>
    LCD_printf(hlcd,"Tz: %03d", act_temp);
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <_LCD_Show+0xb0>)
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f851 	bl	800195c <LCD_printf>

    if(fan_blink<=4){
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <_LCD_Show+0xb4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d80f      	bhi.n	80018e2 <_LCD_Show+0x4a>
    	LCD_SetCursor(hlcd, 0, 14);
 80018c2:	220e      	movs	r2, #14
 80018c4:	2100      	movs	r1, #0
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff ffcc 	bl	8001864 <LCD_SetCursor>
    	LCD_printf(hlcd,"*");
 80018cc:	4920      	ldr	r1, [pc, #128]	; (8001950 <_LCD_Show+0xb8>)
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f844 	bl	800195c <LCD_printf>
    	fan_blink++;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <_LCD_Show+0xb4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <_LCD_Show+0xb4>)
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e01a      	b.n	8001918 <_LCD_Show+0x80>
    }
    else if(fan_blink>4 && fan_blink<=8){
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <_LCD_Show+0xb4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d913      	bls.n	8001912 <_LCD_Show+0x7a>
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <_LCD_Show+0xb4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d80f      	bhi.n	8001912 <_LCD_Show+0x7a>
    	LCD_SetCursor(hlcd, 0, 14);
 80018f2:	220e      	movs	r2, #14
 80018f4:	2100      	movs	r1, #0
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff ffb4 	bl	8001864 <LCD_SetCursor>
    	LCD_printf(hlcd," ");
 80018fc:	4915      	ldr	r1, [pc, #84]	; (8001954 <_LCD_Show+0xbc>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f82c 	bl	800195c <LCD_printf>
    	fan_blink++;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <_LCD_Show+0xb4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <_LCD_Show+0xb4>)
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e002      	b.n	8001918 <_LCD_Show+0x80>
    }
    else{

    	fan_blink=0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <_LCD_Show+0xb4>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    }

    LCD_SetCursor(hlcd, 1, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2101      	movs	r1, #1
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff ffa1 	bl	8001864 <LCD_SetCursor>
	LCD_printf(hlcd,"To: %03d", dest_temp );
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <_LCD_Show+0xc0>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f818 	bl	800195c <LCD_printf>
	LCD_SetCursor(hlcd, 1, 14);
 800192c:	220e      	movs	r2, #14
 800192e:	2101      	movs	r1, #1
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff97 	bl	8001864 <LCD_SetCursor>
	LCD_printf(hlcd,fan);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f80f 	bl	800195c <LCD_printf>

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	08007608 	.word	0x08007608
 800194c:	20000118 	.word	0x20000118
 8001950:	08007614 	.word	0x08007614
 8001954:	08007618 	.word	0x08007618
 8001958:	0800761c 	.word	0x0800761c

0800195c <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 800195c:	b40e      	push	{r1, r2, r3}
 800195e:	b580      	push	{r7, lr}
 8001960:	b095      	sub	sp, #84	; 0x54
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800196a:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fa45 	bl	8006e04 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff50 	bl	8001826 <LCD_printStr>
  va_end(args);
}
 8001986:	bf00      	nop
 8001988:	3754      	adds	r7, #84	; 0x54
 800198a:	46bd      	mov	sp, r7
 800198c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001990:	b003      	add	sp, #12
 8001992:	4770      	bx	lr

08001994 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
if(huart->Instance==USART3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_UART_RxCpltCallback+0x2c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <HAL_UART_RxCpltCallback+0x18>
 {
	new_value = rx_buffer;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_UART_RxCpltCallback+0x30>)
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_UART_RxCpltCallback+0x34>)
 80019aa:	601a      	str	r2, [r3, #0]
 }
HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 80019ac:	2204      	movs	r2, #4
 80019ae:	4906      	ldr	r1, [pc, #24]	; (80019c8 <HAL_UART_RxCpltCallback+0x34>)
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <HAL_UART_RxCpltCallback+0x38>)
 80019b2:	f004 faeb 	bl	8005f8c <HAL_UART_Receive_IT>
 }
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004800 	.word	0x40004800
 80019c4:	20000178 	.word	0x20000178
 80019c8:	20000174 	.word	0x20000174
 80019cc:	200002e0 	.word	0x200002e0

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80019d6:	f000 fdd4 	bl	8002582 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 f8a7 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f7ff fb9b 	bl	8001118 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019e2:	f000 fd29 	bl	8002438 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80019e6:	f000 fa8b 	bl	8001f00 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ea:	f000 fad7 	bl	8001f9c <MX_TIM3_Init>
  MX_TIM4_Init();
 80019ee:	f000 fb57 	bl	80020a0 <MX_TIM4_Init>
  MX_I2C1_Init();
 80019f2:	f7ff fd6d 	bl	80014d0 <MX_I2C1_Init>
  MX_SPI4_Init();
 80019f6:	f000 f935 	bl	8001c64 <MX_SPI4_Init>
  MX_TIM5_Init();
 80019fa:	f000 fba5 	bl	8002148 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&bmp280_1);
 80019fe:	483e      	ldr	r0, [pc, #248]	; (8001af8 <main+0x128>)
 8001a00:	f7ff fa22 	bl	8000e48 <BMP280_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	483d      	ldr	r0, [pc, #244]	; (8001afc <main+0x12c>)
 8001a08:	f003 f946 	bl	8004c98 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <main+0x12c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001a14:	213c      	movs	r1, #60	; 0x3c
 8001a16:	483a      	ldr	r0, [pc, #232]	; (8001b00 <main+0x130>)
 8001a18:	f003 fa14 	bl	8004e44 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4837      	ldr	r0, [pc, #220]	; (8001afc <main+0x12c>)
 8001a20:	f003 f93a 	bl	8004c98 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <main+0x12c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 4);
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4935      	ldr	r1, [pc, #212]	; (8001b04 <main+0x134>)
 8001a30:	4835      	ldr	r0, [pc, #212]	; (8001b08 <main+0x138>)
 8001a32:	f004 faab 	bl	8005f8c <HAL_UART_Receive_IT>

  /** LCD with user menu initialization **************************************************/
   LCD_Init(&hlcd1);
 8001a36:	4835      	ldr	r0, [pc, #212]	; (8001b0c <main+0x13c>)
 8001a38:	f7ff fe8f 	bl	800175a <LCD_Init>

  /** Rotary quadrature encoder initialization *******************************************/
   ENC_Init(&henc1);
 8001a3c:	4834      	ldr	r0, [pc, #208]	; (8001b10 <main+0x140>)
 8001a3e:	f7ff fb33 	bl	80010a8 <ENC_Init>
  while (1)
  {


	  // Read rotary encoder counter
	   ENC_GetCounter(&henc1);
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <main+0x140>)
 8001a44:	f7ff fb3e 	bl	80010c4 <ENC_GetCounter>
	  /* Reading the raw data from sensor */
	  bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	492a      	ldr	r1, [pc, #168]	; (8001af8 <main+0x128>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe ff66 	bl	8000920 <bmp280_get_uncomp_data>
	  /* Getting the 32 bit compensated temperature */
	  bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 8001a54:	69b9      	ldr	r1, [r7, #24]
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <main+0x128>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe ffae 	bl	80009be <bmp280_get_comp_temp_32bit>
	  // temp destination, temp actual, fan speed percentage
	  _LCD_Show(&hlcd1, temp32,temp32 , "80");
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4619      	mov	r1, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <main+0x144>)
 8001a6c:	4827      	ldr	r0, [pc, #156]	; (8001b0c <main+0x13c>)
 8001a6e:	f7ff ff13 	bl	8001898 <_LCD_Show>


	 // temporary
	  HAL_UART_Transmit(&huart3,"Temp obecna: ",20, 100);
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	2214      	movs	r2, #20
 8001a76:	4928      	ldr	r1, [pc, #160]	; (8001b18 <main+0x148>)
 8001a78:	4823      	ldr	r0, [pc, #140]	; (8001b08 <main+0x138>)
 8001a7a:	f004 f9f5 	bl	8005e68 <HAL_UART_Transmit>
		   char buffer[16];
		   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", (int)temp32), 100);
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4926      	ldr	r1, [pc, #152]	; (8001b1c <main+0x14c>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 f987 	bl	8006d98 <siprintf>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	1d39      	adds	r1, r7, #4
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	481d      	ldr	r0, [pc, #116]	; (8001b08 <main+0x138>)
 8001a94:	f004 f9e8 	bl	8005e68 <HAL_UART_Transmit>
		   HAL_UART_Transmit(&huart3," Temp zadana: ",20, 100);
 8001a98:	2364      	movs	r3, #100	; 0x64
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	4920      	ldr	r1, [pc, #128]	; (8001b20 <main+0x150>)
 8001a9e:	481a      	ldr	r0, [pc, #104]	; (8001b08 <main+0x138>)
 8001aa0:	f004 f9e2 	bl	8005e68 <HAL_UART_Transmit>
		   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", (int)temp32), 100);
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	491c      	ldr	r1, [pc, #112]	; (8001b1c <main+0x14c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f974 	bl	8006d98 <siprintf>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	1d39      	adds	r1, r7, #4
 8001ab6:	2364      	movs	r3, #100	; 0x64
 8001ab8:	4813      	ldr	r0, [pc, #76]	; (8001b08 <main+0x138>)
 8001aba:	f004 f9d5 	bl	8005e68 <HAL_UART_Transmit>
		   HAL_UART_Transmit(&huart3," Fan: ",20, 100);
 8001abe:	2364      	movs	r3, #100	; 0x64
 8001ac0:	2214      	movs	r2, #20
 8001ac2:	4918      	ldr	r1, [pc, #96]	; (8001b24 <main+0x154>)
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <main+0x138>)
 8001ac6:	f004 f9cf 	bl	8005e68 <HAL_UART_Transmit>
		   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", (int)temp32), 100);
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4913      	ldr	r1, [pc, #76]	; (8001b1c <main+0x14c>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 f961 	bl	8006d98 <siprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	1d39      	adds	r1, r7, #4
 8001adc:	2364      	movs	r3, #100	; 0x64
 8001ade:	480a      	ldr	r0, [pc, #40]	; (8001b08 <main+0x138>)
 8001ae0:	f004 f9c2 	bl	8005e68 <HAL_UART_Transmit>
		   HAL_UART_Transmit(&huart3,"%\r\n",4, 100);
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	490f      	ldr	r1, [pc, #60]	; (8001b28 <main+0x158>)
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <main+0x138>)
 8001aec:	f004 f9bc 	bl	8005e68 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001af0:	2064      	movs	r0, #100	; 0x64
 8001af2:	f000 fda3 	bl	800263c <HAL_Delay>
  {
 8001af6:	e7a4      	b.n	8001a42 <main+0x72>
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	20000260 	.word	0x20000260
 8001b00:	200001e0 	.word	0x200001e0
 8001b04:	20000174 	.word	0x20000174
 8001b08:	200002e0 	.word	0x200002e0
 8001b0c:	2000006c 	.word	0x2000006c
 8001b10:	20000040 	.word	0x20000040
 8001b14:	08007628 	.word	0x08007628
 8001b18:	0800762c 	.word	0x0800762c
 8001b1c:	0800763c 	.word	0x0800763c
 8001b20:	08007640 	.word	0x08007640
 8001b24:	08007650 	.word	0x08007650
 8001b28:	08007658 	.word	0x08007658

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0b4      	sub	sp, #208	; 0xd0
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b36:	2230      	movs	r2, #48	; 0x30
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 f924 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	2284      	movs	r2, #132	; 0x84
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 f915 	bl	8006d88 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b5e:	f001 f9d3 	bl	8002f08 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <SystemClock_Config+0x120>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <SystemClock_Config+0x120>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <SystemClock_Config+0x120>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7a:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <SystemClock_Config+0x124>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <SystemClock_Config+0x124>)
 8001b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <SystemClock_Config+0x124>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bae:	2304      	movs	r3, #4
 8001bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001bb4:	23d8      	movs	r3, #216	; 0xd8
 8001bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 f9fc 	bl	8002fc8 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bd6:	f000 f83d 	bl	8001c54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bda:	f001 f9a5 	bl	8002f28 <HAL_PWREx_EnableOverDrive>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001be4:	f000 f836 	bl	8001c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	230f      	movs	r3, #15
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c0e:	2107      	movs	r1, #7
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 fc7d 	bl	8003510 <HAL_RCC_ClockConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c1c:	f000 f81a 	bl	8001c54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001c20:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001c24:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 fe64 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001c3e:	f000 f809 	bl	8001c54 <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	37d0      	adds	r7, #208	; 0xd0
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <MX_SPI4_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c74:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c82:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001c9a:	2218      	movs	r2, #24
 8001c9c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_SPI4_Init+0x74>)
 8001cc4:	f002 fa0a 	bl	80040dc <HAL_SPI_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f7ff ffc1 	bl	8001c54 <Error_Handler>
  }

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000017c 	.word	0x2000017c
 8001cdc:	40013400 	.word	0x40013400

08001ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_SPI_MspInit+0x7c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d127      	bne.n	8001d52 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8001d32:	2364      	movs	r3, #100	; 0x64
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d42:	2305      	movs	r3, #5
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_SPI_MspInit+0x84>)
 8001d4e:	f000 fdcb 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40013400 	.word	0x40013400
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x44>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x44>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x44>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 fbfa 	bl	80025fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e10:	2020      	movs	r0, #32
 8001e12:	f000 ff2d 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e16:	2040      	movs	r0, #64	; 0x40
 8001e18:	f000 ff2a 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM2_IRQHandler+0x10>)
 8001e26:	f003 f844 	bl	8004eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002a0 	.word	0x200002a0

08001e34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <USART3_IRQHandler+0x10>)
 8001e3a:	f004 f949 	bl	80060d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002e0 	.word	0x200002e0

08001e48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e50:	f000 ff0e 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e58:	f000 ff0a 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e60:	f000 ff06 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f004 ff4c 	bl	8006d34 <__errno>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20050000 	.word	0x20050000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	2000011c 	.word	0x2000011c
 8001ed0:	20000368 	.word	0x20000368

08001ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <SystemInit+0x28>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <SystemInit+0x28>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SystemInit+0x28>)
 8001eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eee:	609a      	str	r2, [r3, #8]
#endif
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f28:	226b      	movs	r2, #107	; 0x6b
 8001f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f34:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f46:	4814      	ldr	r0, [pc, #80]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f48:	f002 fdf0 	bl	8004b2c <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f52:	f7ff fe7f 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f64:	f003 f9dc 	bl	8005320 <HAL_TIM_ConfigClockSource>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f6e:	f7ff fe71 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_TIM2_Init+0x98>)
 8001f80:	f003 fe78 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f8a:	f7ff fe63 	bl	8001c54 <Error_Handler>
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002a0 	.word	0x200002a0

08001f9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001fd0:	4a32      	ldr	r2, [pc, #200]	; (800209c <MX_TIM3_Init+0x100>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001fd6:	226b      	movs	r2, #107	; 0x6b
 8001fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001fe2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ff4:	4828      	ldr	r0, [pc, #160]	; (8002098 <MX_TIM3_Init+0xfc>)
 8001ff6:	f002 fd99 	bl	8004b2c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002000:	f7ff fe28 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_TIM3_Init+0xfc>)
 8002012:	f003 f985 	bl	8005320 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800201c:	f7ff fe1a 	bl	8001c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002020:	481d      	ldr	r0, [pc, #116]	; (8002098 <MX_TIM3_Init+0xfc>)
 8002022:	f002 fe04 	bl	8004c2e <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800202c:	f7ff fe12 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <MX_TIM3_Init+0xfc>)
 8002040:	f003 fe18 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800204a:	f7ff fe03 	bl	8001c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	; 0x60
 8002050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM3_Init+0xfc>)
 8002066:	f003 f843 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002070:	f7ff fdf0 	bl	8001c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	2204      	movs	r2, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_TIM3_Init+0xfc>)
 800207c:	f003 f838 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002086:	f7ff fde5 	bl	8001c54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <MX_TIM3_Init+0xfc>)
 800208c:	f000 f97e 	bl	800238c <HAL_TIM_MspPostInit>

}
 8002090:	bf00      	nop
 8002092:	3738      	adds	r7, #56	; 0x38
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000260 	.word	0x20000260
 800209c:	40000400 	.word	0x40000400

080020a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fe6a 	bl	8006d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <MX_TIM4_Init+0xa4>)
 80020c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020d2:	2264      	movs	r2, #100	; 0x64
 80020d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_TIM4_Init+0xa0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020e2:	2303      	movs	r3, #3
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ea:	2301      	movs	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020f6:	2302      	movs	r3, #2
 80020f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020fa:	2301      	movs	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	4619      	mov	r1, r3
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <MX_TIM4_Init+0xa0>)
 800210e:	f002 fe07 	bl	8004d20 <HAL_TIM_Encoder_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002118:	f7ff fd9c 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_TIM4_Init+0xa0>)
 800212a:	f003 fda3 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002134:	f7ff fd8e 	bl	8001c54 <Error_Handler>
  }

}
 8002138:	bf00      	nop
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200001e0 	.word	0x200001e0
 8002144:	40000800 	.word	0x40000800

08002148 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <MX_TIM5_Init+0x94>)
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <MX_TIM5_Init+0x98>)
 800216a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_TIM5_Init+0x94>)
 800216e:	226b      	movs	r2, #107	; 0x6b
 8002170:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_TIM5_Init+0x94>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <MX_TIM5_Init+0x94>)
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <MX_TIM5_Init+0x94>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_TIM5_Init+0x94>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800218c:	4813      	ldr	r0, [pc, #76]	; (80021dc <MX_TIM5_Init+0x94>)
 800218e:	f002 fccd 	bl	8004b2c <HAL_TIM_Base_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002198:	f7ff fd5c 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <MX_TIM5_Init+0x94>)
 80021aa:	f003 f8b9 	bl	8005320 <HAL_TIM_ConfigClockSource>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021b4:	f7ff fd4e 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_TIM5_Init+0x94>)
 80021c6:	f003 fd55 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021d0:	f7ff fd40 	bl	8001c54 <Error_Handler>
  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000220 	.word	0x20000220
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d114      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002206:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a39      	ldr	r2, [pc, #228]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201c      	movs	r0, #28
 8002224:	f000 fb07 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002228:	201c      	movs	r0, #28
 800222a:	f000 fb20 	bl	800286e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800222e:	e05b      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2f      	ldr	r2, [pc, #188]	; (80022f4 <HAL_TIM_Base_MspInit+0x110>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d145      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002292:	2302      	movs	r3, #2
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <HAL_TIM_Base_MspInit+0x114>)
 800229e:	f000 fb23 	bl	80028e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_B_Pin;
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b4:	2302      	movs	r3, #2
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_CH_B_GPIO_Port, &GPIO_InitStruct);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <HAL_TIM_Base_MspInit+0x118>)
 80022c0:	f000 fb12 	bl	80028e8 <HAL_GPIO_Init>
}
 80022c4:	e010      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_TIM_Base_MspInit+0x11c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10b      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_TIM_Base_MspInit+0x10c>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	40000c00 	.word	0x40000c00

08002304 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d128      	bne.n	8002378 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_TIM_Encoder_MspInit+0x80>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8002356:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002368:	2302      	movs	r3, #2
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_Encoder_MspInit+0x84>)
 8002374:	f000 fab8 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40000800 	.word	0x40000800
 8002384:	40023800 	.word	0x40023800
 8002388:	40020c00 	.word	0x40020c00

0800238c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_TIM_MspPostInit+0x9c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d137      	bne.n	800241e <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_TIM_MspPostInit+0xa0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ee:	2302      	movs	r3, #2
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_G_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <HAL_TIM_MspPostInit+0xa4>)
 80023fa:	f000 fa75 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_R_Pin;
 80023fe:	2310      	movs	r3, #16
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800240e:	2302      	movs	r3, #2
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_CH_R_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4806      	ldr	r0, [pc, #24]	; (8002434 <HAL_TIM_MspPostInit+0xa8>)
 800241a:	f000 fa65 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40000400 	.word	0x40000400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020800 	.word	0x40020800
 8002434:	40020400 	.word	0x40020400

08002438 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_USART3_UART_Init+0x58>)
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <MX_USART3_UART_Init+0x5c>)
 8002440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_USART3_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_USART3_UART_Init+0x58>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_USART3_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_USART3_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART3_UART_Init+0x58>)
 800247c:	f003 fca6 	bl	8005dcc <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002486:	f7ff fbe5 	bl	8001c54 <Error_Handler>
  }

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002e0 	.word	0x200002e0
 8002494:	40004800 	.word	0x40004800

08002498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_UART_MspInit+0x8c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d130      	bne.n	800251c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024fc:	2307      	movs	r3, #7
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	; (800252c <HAL_UART_MspInit+0x94>)
 8002508:	f000 f9ee 	bl	80028e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2027      	movs	r0, #39	; 0x27
 8002512:	f000 f990 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002516:	2027      	movs	r0, #39	; 0x27
 8002518:	f000 f9a9 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40004800 	.word	0x40004800
 8002528:	40023800 	.word	0x40023800
 800252c:	40020c00 	.word	0x40020c00

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002536:	e003      	b.n	8002540 <LoopCopyDataInit>

08002538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800253a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800253c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800253e:	3104      	adds	r1, #4

08002540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002548:	d3f6      	bcc.n	8002538 <CopyDataInit>
  ldr  r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800254c:	e002      	b.n	8002554 <LoopFillZerobss>

0800254e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800254e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002550:	f842 3b04 	str.w	r3, [r2], #4

08002554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002558:	d3f9      	bcc.n	800254e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255a:	f7ff fcbb 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f004 fbef 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7ff fa35 	bl	80019d0 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800256c:	080076bc 	.word	0x080076bc
  ldr  r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002574:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002578:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 800257c:	20000368 	.word	0x20000368

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>

08002582 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002586:	2003      	movs	r0, #3
 8002588:	f000 f94a 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258c:	2000      	movs	r0, #0
 800258e:	f000 f805 	bl	800259c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002592:	f7ff fbe9 	bl	8001d68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_InitTick+0x54>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_InitTick+0x58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f965 	bl	800288a <HAL_SYSTICK_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00e      	b.n	80025e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d80a      	bhi.n	80025e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d0:	2200      	movs	r2, #0
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f000 f92d 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <HAL_InitTick+0x5c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000008c 	.word	0x2000008c
 80025f4:	20000094 	.word	0x20000094
 80025f8:	20000090 	.word	0x20000090

080025fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_IncTick+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_IncTick+0x24>)
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000094 	.word	0x20000094
 8002620:	20000360 	.word	0x20000360

08002624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_GetTick+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000360 	.word	0x20000360

0800263c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff ffee 	bl	8002624 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d005      	beq.n	8002662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_Delay+0x40>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002662:	bf00      	nop
 8002664:	f7ff ffde 	bl	8002624 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d8f7      	bhi.n	8002664 <HAL_Delay+0x28>
  {
  }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000094 	.word	0x20000094

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x40>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	05fa0000 	.word	0x05fa0000

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e00c      	b.n	80028da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2205      	movs	r2, #5
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e175      	b.n	8002bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8164 	bne.w	8002bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d00b      	beq.n	8002946 <HAL_GPIO_Init+0x5e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	2b11      	cmp	r3, #17
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b12      	cmp	r3, #18
 8002944:	d130      	bne.n	80029a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x100>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80be 	beq.w	8002bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a64      	ldr	r2, [pc, #400]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b62      	ldr	r3, [pc, #392]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a8a:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d037      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a55      	ldr	r2, [pc, #340]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a53      	ldr	r2, [pc, #332]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a51      	ldr	r2, [pc, #324]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a50      	ldr	r2, [pc, #320]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002afe:	2309      	movs	r3, #9
 8002b00:	e012      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b02:	230a      	movs	r3, #10
 8002b04:	e010      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b38:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6a:	4a33      	ldr	r2, [pc, #204]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b94:	4a28      	ldr	r2, [pc, #160]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae86 	bls.w	8002908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3724      	adds	r7, #36	; 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	40021c00 	.word	0x40021c00
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022400 	.word	0x40022400
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f806 	bl	8002ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fc36 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e006      	b.n	8002d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d104      	bne.n	8002d52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_I2C_Init+0x11c>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	ea42 0103 	orr.w	r1, r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	02008000 	.word	0x02008000

08002dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d138      	bne.n	8002e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e032      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d139      	bne.n	8002ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e033      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40007000 	.word	0x40007000

08002f28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f56:	f7ff fb65 	bl	8002624 <HAL_GetTick>
 8002f5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f5c:	e009      	b.n	8002f72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f5e:	f7ff fb61 	bl	8002624 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6c:	d901      	bls.n	8002f72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e022      	b.n	8002fb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f80:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8c:	f7ff fb4a 	bl	8002624 <HAL_GetTick>
 8002f90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f92:	e009      	b.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f94:	f7ff fb46 	bl	8002624 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa2:	d901      	bls.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e007      	b.n	8002fb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e291      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8087 	beq.w	80030fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff8:	4b93      	ldr	r3, [pc, #588]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d112      	bne.n	800302a <HAL_RCC_OscConfig+0x62>
 8003004:	4b90      	ldr	r3, [pc, #576]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003010:	d10b      	bne.n	800302a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003012:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x130>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d168      	bne.n	80030f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e26b      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x7a>
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a83      	ldr	r2, [pc, #524]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e02e      	b.n	80030a0 <HAL_RCC_OscConfig+0xd8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x9c>
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800305c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xd8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0xc0>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b73      	ldr	r3, [pc, #460]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a72      	ldr	r2, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xd8>
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6b      	ldr	r2, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7ff fabc 	bl	8002624 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff fab8 	bl	8002624 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e21f      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7ff faa8 	bl	8002624 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff faa4 	bl	8002624 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e20b      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x110>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d069      	beq.n	80031da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x190>
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x17a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1df      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	493d      	ldr	r1, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e040      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a38      	ldr	r2, [pc, #224]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7ff fa5a 	bl	8002624 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003174:	f7ff fa56 	bl	8002624 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1bd      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4929      	ldr	r1, [pc, #164]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
 80031a6:	e018      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff fa36 	bl	8002624 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031bc:	f7ff fa32 	bl	8002624 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e199      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d038      	beq.n	8003258 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d019      	beq.n	8003222 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7ff fa13 	bl	8002624 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7ff fa0f 	bl	8002624 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e176      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x23a>
 8003220:	e01a      	b.n	8003258 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x280>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7ff f9f9 	bl	8002624 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7ff f9f5 	bl	8002624 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d903      	bls.n	800324c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e15c      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
 8003248:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b91      	ldr	r3, [pc, #580]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a4 	beq.w	80033ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003266:	4b8b      	ldr	r3, [pc, #556]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a87      	ldr	r2, [pc, #540]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b85      	ldr	r3, [pc, #532]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800329a:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x4d0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7e      	ldr	r2, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7ff f9bd 	bl	8002624 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7ff f9b9 	bl	8002624 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e120      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	4b75      	ldr	r3, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x31a>
 80032d4:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e02d      	b.n	800333e <HAL_RCC_OscConfig+0x376>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x33c>
 80032ea:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a66      	ldr	r2, [pc, #408]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	e01c      	b.n	800333e <HAL_RCC_OscConfig+0x376>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_OscConfig+0x35e>
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a60      	ldr	r2, [pc, #384]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	4b5e      	ldr	r3, [pc, #376]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a5d      	ldr	r2, [pc, #372]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	e00b      	b.n	800333e <HAL_RCC_OscConfig+0x376>
 8003326:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	4b58      	ldr	r3, [pc, #352]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a57      	ldr	r2, [pc, #348]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d015      	beq.n	8003372 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7ff f96d 	bl	8002624 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7ff f969 	bl	8002624 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0ce      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCC_OscConfig+0x386>
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7ff f957 	bl	8002624 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7ff f953 	bl	8002624 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0b8      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ee      	bne.n	800337a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a4 	beq.w	8003500 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d06b      	beq.n	800349c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d149      	bne.n	8003460 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a30      	ldr	r2, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7ff f924 	bl	8002624 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7ff f920 	bl	8002624 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e087      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4313      	orrs	r3, r2
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800342a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff f8f4 	bl	8002624 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7ff f8f0 	bl	8002624 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e057      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x478>
 800345e:	e04f      	b.n	8003500 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7ff f8da 	bl	8002624 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff f8d6 	bl	8002624 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e03d      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x4cc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x4ac>
 8003492:	e035      	b.n	8003500 <HAL_RCC_OscConfig+0x538>
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x544>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d028      	beq.n	80034fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d121      	bne.n	80034fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	4965      	ldr	r1, [pc, #404]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800357a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d040      	beq.n	8003634 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4936      	ldr	r1, [pc, #216]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7ff f80e 	bl	8002624 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7ff f80a 	bl	8002624 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e053      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d210      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4601      	mov	r1, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x1cc>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1d0>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1d4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe ff6a 	bl	800259c <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00
 80036d8:	40023800 	.word	0x40023800
 80036dc:	08007660 	.word	0x08007660
 80036e0:	2000008c 	.word	0x2000008c
 80036e4:	20000090 	.word	0x20000090

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fe:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d007      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x32>
 800370a:	2b08      	cmp	r3, #8
 800370c:	d008      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x38>
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 80b4 	bne.w	800387c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003716:	60bb      	str	r3, [r7, #8]
      break;
 8003718:	e0b3      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371a:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800371c:	60bb      	str	r3, [r7, #8]
      break;
 800371e:	e0b0      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003720:	4b5a      	ldr	r3, [pc, #360]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003728:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d04a      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	ea03 0501 	and.w	r5, r3, r1
 800374c:	ea04 0602 	and.w	r6, r4, r2
 8003750:	4629      	mov	r1, r5
 8003752:	4632      	mov	r2, r6
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0154      	lsls	r4, r2, #5
 800375e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	4619      	mov	r1, r3
 8003766:	4622      	mov	r2, r4
 8003768:	1b49      	subs	r1, r1, r5
 800376a:	eb62 0206 	sbc.w	r2, r2, r6
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	0194      	lsls	r4, r2, #6
 8003778:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	1a5b      	subs	r3, r3, r1
 8003780:	eb64 0402 	sbc.w	r4, r4, r2
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	460b      	mov	r3, r1
 8003796:	4614      	mov	r4, r2
 8003798:	195b      	adds	r3, r3, r5
 800379a:	eb44 0406 	adc.w	r4, r4, r6
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	0262      	lsls	r2, r4, #9
 80037a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037ac:	0259      	lsls	r1, r3, #9
 80037ae:	460b      	mov	r3, r1
 80037b0:	4614      	mov	r4, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	4621      	mov	r1, r4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f04f 0400 	mov.w	r4, #0
 80037bc:	461a      	mov	r2, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	f7fc fd7e 	bl	80002c0 <__aeabi_uldivmod>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e049      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	ea03 0501 	and.w	r5, r3, r1
 80037e2:	ea04 0602 	and.w	r6, r4, r2
 80037e6:	4629      	mov	r1, r5
 80037e8:	4632      	mov	r2, r6
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	0154      	lsls	r4, r2, #5
 80037f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f8:	014b      	lsls	r3, r1, #5
 80037fa:	4619      	mov	r1, r3
 80037fc:	4622      	mov	r2, r4
 80037fe:	1b49      	subs	r1, r1, r5
 8003800:	eb62 0206 	sbc.w	r2, r2, r6
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	0194      	lsls	r4, r2, #6
 800380e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	1a5b      	subs	r3, r3, r1
 8003816:	eb64 0402 	sbc.w	r4, r4, r2
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	00e2      	lsls	r2, r4, #3
 8003824:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003828:	00d9      	lsls	r1, r3, #3
 800382a:	460b      	mov	r3, r1
 800382c:	4614      	mov	r4, r2
 800382e:	195b      	adds	r3, r3, r5
 8003830:	eb44 0406 	adc.w	r4, r4, r6
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	02a2      	lsls	r2, r4, #10
 800383e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003842:	0299      	lsls	r1, r3, #10
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	4618      	mov	r0, r3
 800384a:	4621      	mov	r1, r4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f04f 0400 	mov.w	r4, #0
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	f7fc fd33 	bl	80002c0 <__aeabi_uldivmod>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	60bb      	str	r3, [r7, #8]
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800387e:	60bb      	str	r3, [r7, #8]
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	68bb      	ldr	r3, [r7, #8]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000008c 	.word	0x2000008c

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08007670 	.word	0x08007670

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4a03      	ldr	r2, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08007670 	.word	0x08007670

08003900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003928:	4b69      	ldr	r3, [pc, #420]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a68      	ldr	r2, [pc, #416]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003932:	6093      	str	r3, [r2, #8]
 8003934:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4964      	ldr	r1, [pc, #400]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d017      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	4959      	ldr	r1, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003996:	4b4e      	ldr	r3, [pc, #312]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	494a      	ldr	r1, [pc, #296]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b4:	d101      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 808b 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a39      	ldr	r2, [pc, #228]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
 80039f0:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a34      	ldr	r2, [pc, #208]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fe fe0c 	bl	8002624 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fe fe08 	bl	8002624 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e355      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d035      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d02e      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a6e:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d114      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fe fdd0 	bl	8002624 <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe fdcc 	bl	8002624 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e317      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ee      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab6:	d111      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	4901      	ldr	r1, [pc, #4]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	0ffffcff 	.word	0x0ffffcff
 8003adc:	4bb0      	ldr	r3, [pc, #704]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4aaf      	ldr	r2, [pc, #700]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ae2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	4bad      	ldr	r3, [pc, #692]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	49aa      	ldr	r1, [pc, #680]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b06:	4ba6      	ldr	r3, [pc, #664]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	4aa4      	ldr	r2, [pc, #656]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b16:	4ba2      	ldr	r3, [pc, #648]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	499f      	ldr	r1, [pc, #636]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b34:	4b9a      	ldr	r3, [pc, #616]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	4997      	ldr	r1, [pc, #604]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b56:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b64:	498e      	ldr	r1, [pc, #568]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b78:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b86:	4986      	ldr	r1, [pc, #536]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	497d      	ldr	r1, [pc, #500]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbc:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4975      	ldr	r1, [pc, #468]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bde:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f023 020c 	bic.w	r2, r3, #12
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	496c      	ldr	r1, [pc, #432]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4964      	ldr	r1, [pc, #400]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c22:	4b5f      	ldr	r3, [pc, #380]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	495b      	ldr	r1, [pc, #364]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c44:	4b56      	ldr	r3, [pc, #344]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	4953      	ldr	r1, [pc, #332]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	494a      	ldr	r1, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	4942      	ldr	r1, [pc, #264]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb8:	4939      	ldr	r1, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cda:	4931      	ldr	r1, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfc:	4928      	ldr	r1, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	4918      	ldr	r1, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d60:	490f      	ldr	r1, [pc, #60]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d76:	f040 80d8 	bne.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fe fc4d 	bl	8002624 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d8e:	f7fe fc49 	bl	8002624 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d903      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e196      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003da0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da4:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ee      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d021      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc4:	4b64      	ldr	r3, [pc, #400]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dd2:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	0e1b      	lsrs	r3, r3, #24
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	019a      	lsls	r2, r3, #6
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	4957      	ldr	r1, [pc, #348]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02e      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2a:	d129      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e2c:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	0f1b      	lsrs	r3, r3, #28
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	019a      	lsls	r2, r3, #6
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	493d      	ldr	r1, [pc, #244]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e68:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6e:	f023 021f 	bic.w	r2, r3, #31
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0e1b      	lsrs	r3, r3, #24
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea0:	0f1b      	lsrs	r3, r3, #28
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	019a      	lsls	r2, r3, #6
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4925      	ldr	r1, [pc, #148]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d011      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	4919      	ldr	r1, [pc, #100]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fe fb8e 	bl	8002624 <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f0c:	f7fe fb8a 	bl	8002624 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0d7      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	f040 80cd 	bne.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3e:	f7fe fb71 	bl	8002624 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f46:	f7fe fb6d 	bl	8002624 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b64      	cmp	r3, #100	; 0x64
 8003f52:	d903      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0ba      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003f58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f68:	d0ed      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02e      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f92:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	0f1b      	lsrs	r3, r3, #28
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	4944      	ldr	r1, [pc, #272]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fce:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	493d      	ldr	r1, [pc, #244]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d022      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffc:	d11d      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	0e1b      	lsrs	r3, r3, #24
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	0f1b      	lsrs	r3, r3, #28
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	019a      	lsls	r2, r3, #6
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	4929      	ldr	r1, [pc, #164]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	0e1b      	lsrs	r3, r3, #24
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	019a      	lsls	r2, r3, #6
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	4917      	ldr	r1, [pc, #92]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4911      	ldr	r1, [pc, #68]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fe fabe 	bl	8002624 <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ac:	f7fe faba 	bl	8002624 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e007      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ca:	d1ef      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800

080040dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e084      	b.n	80041f8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fd fde9 	bl	8001ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004124:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412e:	d902      	bls.n	8004136 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e002      	b.n	800413c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004144:	d007      	beq.n	8004156 <HAL_SPI_Init+0x7a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004166:	d903      	bls.n	8004170 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
 800416e:	e002      	b.n	8004176 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	f003 0204 	and.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	ea42 0103 	orr.w	r1, r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_SPI_Transmit+0x22>
 800421e:	2302      	movs	r3, #2
 8004220:	e150      	b.n	80044c4 <HAL_SPI_Transmit+0x2c4>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800422a:	f7fe f9fb 	bl	8002624 <HAL_GetTick>
 800422e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004244:	e135      	b.n	80044b2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_Transmit+0x52>
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004256:	e12c      	b.n	80044b2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d107      	bne.n	80042b4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d007      	beq.n	80042d2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042da:	d94b      	bls.n	8004374 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_Transmit+0xea>
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d13e      	bne.n	8004368 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800430e:	e02b      	b.n	8004368 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d112      	bne.n	8004344 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004342:	e011      	b.n	8004368 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004344:	f7fe f96e 	bl	8002624 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d803      	bhi.n	800435c <HAL_SPI_Transmit+0x15c>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Transmit+0x162>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004366:	e0a4      	b.n	80044b2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ce      	bne.n	8004310 <HAL_SPI_Transmit+0x110>
 8004372:	e07c      	b.n	800446e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Transmit+0x182>
 800437c:	8afb      	ldrh	r3, [r7, #22]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d170      	bne.n	8004464 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d912      	bls.n	80043b2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	881a      	ldrh	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	1c9a      	adds	r2, r3, #2
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b02      	subs	r3, #2
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b0:	e058      	b.n	8004464 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043d8:	e044      	b.n	8004464 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d12b      	bne.n	8004440 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d912      	bls.n	8004418 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b02      	subs	r3, #2
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004416:	e025      	b.n	8004464 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800443e:	e011      	b.n	8004464 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004440:	f7fe f8f0 	bl	8002624 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d803      	bhi.n	8004458 <HAL_SPI_Transmit+0x258>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d102      	bne.n	800445e <HAL_SPI_Transmit+0x25e>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004462:	e026      	b.n	80044b2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1b5      	bne.n	80043da <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fb14 	bl	8004aa0 <SPI_EndRxTxTransaction>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e000      	b.n	80044b2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80044b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044da:	2301      	movs	r3, #1
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x26>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e1fb      	b.n	80048ea <HAL_SPI_TransmitReceive+0x41e>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fa:	f7fe f893 	bl	8002624 <HAL_GetTick>
 80044fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004506:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004516:	7efb      	ldrb	r3, [r7, #27]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d00e      	beq.n	800453a <HAL_SPI_TransmitReceive+0x6e>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d106      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x66>
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d003      	beq.n	800453a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004538:	e1cd      	b.n	80048d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_SPI_TransmitReceive+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_TransmitReceive+0x80>
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004552:	e1c0      	b.n	80048d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b04      	cmp	r3, #4
 800455e:	d003      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2205      	movs	r2, #5
 8004564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045aa:	d802      	bhi.n	80045b2 <HAL_SPI_TransmitReceive+0xe6>
 80045ac:	8a3b      	ldrh	r3, [r7, #16]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d908      	bls.n	80045c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e007      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d007      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045fa:	d97c      	bls.n	80046f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_TransmitReceive+0x13e>
 8004604:	8a7b      	ldrh	r3, [r7, #18]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d169      	bne.n	80046de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800462e:	e056      	b.n	80046de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d11b      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x1aa>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d016      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x1aa>
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	2b01      	cmp	r3, #1
 800464c:	d113      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11c      	bne.n	80046be <HAL_SPI_TransmitReceive+0x1f2>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	b292      	uxth	r2, r2
 800469c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046ba:	2301      	movs	r3, #1
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046be:	f7fd ffb1 	bl	8002624 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d807      	bhi.n	80046de <HAL_SPI_TransmitReceive+0x212>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046dc:	e0fb      	b.n	80048d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1a3      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x164>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d19d      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x164>
 80046f4:	e0df      	b.n	80048b6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x23a>
 80046fe:	8a7b      	ldrh	r3, [r7, #18]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80cb 	bne.w	800489c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d912      	bls.n	8004736 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	1c9a      	adds	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b02      	subs	r3, #2
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004734:	e0b2      	b.n	800489c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475c:	e09e      	b.n	800489c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d134      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x30a>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02f      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x30a>
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b01      	cmp	r3, #1
 800477a:	d12c      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d912      	bls.n	80047ac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c9a      	adds	r2, r3, #2
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b02      	subs	r3, #2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047aa:	e012      	b.n	80047d2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d148      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x3aa>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d042      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d923      	bls.n	8004844 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b02      	subs	r3, #2
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d81f      	bhi.n	8004872 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e016      	b.n	8004872 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f103 020c 	add.w	r2, r3, #12
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004876:	f7fd fed5 	bl	8002624 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004882:	429a      	cmp	r2, r3
 8004884:	d803      	bhi.n	800488e <HAL_SPI_TransmitReceive+0x3c2>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d102      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x3c8>
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800489a:	e01c      	b.n	80048d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f47f af5b 	bne.w	800475e <HAL_SPI_TransmitReceive+0x292>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af54 	bne.w	800475e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f8f0 	bl	8004aa0 <SPI_EndRxTxTransaction>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
 80048d2:	e000      	b.n	80048d6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004902:	e04c      	b.n	800499e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d048      	beq.n	800499e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800490c:	f7fd fe8a 	bl	8002624 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d902      	bls.n	8004922 <SPI_WaitFlagStateUntilTimeout+0x30>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13d      	bne.n	800499e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d111      	bne.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004944:	d004      	beq.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d107      	bne.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d10f      	bne.n	800498a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e00f      	b.n	80049be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d1a3      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80049d4:	e057      	b.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049dc:	d106      	bne.n	80049ec <SPI_WaitFifoStateUntilTimeout+0x26>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d048      	beq.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80049f4:	f7fd fe16 	bl	8002624 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d902      	bls.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d13d      	bne.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d111      	bne.n	8004a48 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	d004      	beq.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a36:	d107      	bne.n	8004a48 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a50:	d10f      	bne.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e008      	b.n	8004a98 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d19f      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff ff84 	bl	80049c6 <SPI_WaitFifoStateUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e027      	b.n	8004b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ff07 	bl	80048f2 <SPI_WaitFlagStateUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e014      	b.n	8004b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ff5d 	bl	80049c6 <SPI_WaitFifoStateUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e000      	b.n	8004b24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01d      	b.n	8004b7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fb46 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fcc4 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <HAL_TIM_Base_Start+0x50>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d00b      	beq.n	8004bbe <HAL_TIM_Base_Start+0x3a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	00010007 	.word	0x00010007

08004bd8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a1a      	ldr	r2, [r3, #32]
 8004bee:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <HAL_TIM_Base_Stop+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	f240 4344 	movw	r3, #1092	; 0x444
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <HAL_TIM_Base_Stop+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e01d      	b.n	8004c7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f815 	bl	8004c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 fc43 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 ffbc 	bl	8005c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <HAL_TIM_PWM_Start+0x7c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x2c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <HAL_TIM_PWM_Start+0x80>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x30>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_PWM_Start+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <HAL_TIM_PWM_Start+0x84>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d00b      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x70>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d007      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40010400 	.word	0x40010400
 8004d1c:	00010007 	.word	0x00010007

08004d20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e07b      	b.n	8004e2c <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fd fadb 	bl	8002304 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_TIM_Encoder_Init+0x114>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f000 fbc1 	bl	80054f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <HAL_TIM_Encoder_Init+0x118>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	4313      	orrs	r3, r2
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_TIM_Encoder_Init+0x11c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <HAL_TIM_Encoder_Init+0x120>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	031b      	lsls	r3, r3, #12
 8004de0:	4313      	orrs	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	4313      	orrs	r3, r2
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	fffebff8 	.word	0xfffebff8
 8004e38:	fffffcfc 	.word	0xfffffcfc
 8004e3c:	fffff3f3 	.word	0xfffff3f3
 8004e40:	ffff0f0f 	.word	0xffff0f0f

08004e44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_TIM_Encoder_Start+0x16>
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d008      	beq.n	8004e6a <HAL_TIM_Encoder_Start+0x26>
 8004e58:	e00f      	b.n	8004e7a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fee0 	bl	8005c28 <TIM_CCxChannelCmd>
      break;
 8004e68:	e016      	b.n	8004e98 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	2104      	movs	r1, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fed8 	bl	8005c28 <TIM_CCxChannelCmd>
      break;
 8004e78:	e00e      	b.n	8004e98 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fed0 	bl	8005c28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2104      	movs	r1, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fec9 	bl	8005c28 <TIM_CCxChannelCmd>
      break;
 8004e96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d122      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d11b      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0202 	mvn.w	r2, #2
 8004ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fae1 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8004efa:	e005      	b.n	8004f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fad3 	bl	80054a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fae4 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d122      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d11b      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 0204 	mvn.w	r2, #4
 8004f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fab7 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8004f4e:	e005      	b.n	8004f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 faa9 	bl	80054a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 faba 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d122      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d11b      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0208 	mvn.w	r2, #8
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa8d 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8004fa2:	e005      	b.n	8004fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa7f 	bl	80054a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa90 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d122      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d11b      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0210 	mvn.w	r2, #16
 8004fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fa63 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8004ff6:	e005      	b.n	8005004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa55 	bl	80054a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa66 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10e      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f06f 0201 	mvn.w	r2, #1
 800502e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fa2f 	bl	8005494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d10e      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d107      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fea1 	bl	8005da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005070:	d10e      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b80      	cmp	r3, #128	; 0x80
 800507e:	d107      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fe94 	bl	8005db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d10e      	bne.n	80050bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa14 	bl	80054e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d10e      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d107      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0220 	mvn.w	r2, #32
 80050e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fe54 	bl	8005d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005106:	2302      	movs	r3, #2
 8005108:	e105      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x226>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b14      	cmp	r3, #20
 800511e:	f200 80f0 	bhi.w	8005302 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800517d 	.word	0x0800517d
 800512c:	08005303 	.word	0x08005303
 8005130:	08005303 	.word	0x08005303
 8005134:	08005303 	.word	0x08005303
 8005138:	080051bd 	.word	0x080051bd
 800513c:	08005303 	.word	0x08005303
 8005140:	08005303 	.word	0x08005303
 8005144:	08005303 	.word	0x08005303
 8005148:	080051ff 	.word	0x080051ff
 800514c:	08005303 	.word	0x08005303
 8005150:	08005303 	.word	0x08005303
 8005154:	08005303 	.word	0x08005303
 8005158:	0800523f 	.word	0x0800523f
 800515c:	08005303 	.word	0x08005303
 8005160:	08005303 	.word	0x08005303
 8005164:	08005303 	.word	0x08005303
 8005168:	08005281 	.word	0x08005281
 800516c:	08005303 	.word	0x08005303
 8005170:	08005303 	.word	0x08005303
 8005174:	08005303 	.word	0x08005303
 8005178:	080052c1 	.word	0x080052c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa58 	bl	8005638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	619a      	str	r2, [r3, #24]
      break;
 80051ba:	e0a3      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 faaa 	bl	800571c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
      break;
 80051fc:	e082      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb01 	bl	800580c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0208 	orr.w	r2, r2, #8
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0204 	bic.w	r2, r2, #4
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
      break;
 800523c:	e062      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb57 	bl	80058f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69d9      	ldr	r1, [r3, #28]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	021a      	lsls	r2, r3, #8
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	61da      	str	r2, [r3, #28]
      break;
 800527e:	e041      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb8e 	bl	80059a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0208 	orr.w	r2, r2, #8
 800529a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052be:	e021      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fbc0 	bl	8005a4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005300:	e000      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005302:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop

08005320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e0a6      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x166>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <HAL_TIM_ConfigClockSource+0x170>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d067      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x120>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d80b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x6c>
 8005374:	2b10      	cmp	r3, #16
 8005376:	d073      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
 8005378:	2b10      	cmp	r3, #16
 800537a:	d802      	bhi.n	8005382 <HAL_TIM_ConfigClockSource+0x62>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d06f      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005380:	e078      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005382:	2b20      	cmp	r3, #32
 8005384:	d06c      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d06a      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800538a:	e073      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800538c:	2b70      	cmp	r3, #112	; 0x70
 800538e:	d00d      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x8c>
 8005390:	2b70      	cmp	r3, #112	; 0x70
 8005392:	d804      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x7e>
 8005394:	2b50      	cmp	r3, #80	; 0x50
 8005396:	d033      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0xe0>
 8005398:	2b60      	cmp	r3, #96	; 0x60
 800539a:	d041      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800539c:	e06a      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	d066      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x152>
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d017      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053aa:	e063      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f000 fc14 	bl	8005be8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
      break;
 80053d8:	e04c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f000 fbfd 	bl	8005be8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e039      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	461a      	mov	r2, r3
 800540e:	f000 fb71 	bl	8005af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2150      	movs	r1, #80	; 0x50
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fbca 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 800541e:	e029      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	461a      	mov	r2, r3
 800542e:	f000 fb90 	bl	8005b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2160      	movs	r1, #96	; 0x60
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fbba 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 800543e:	e019      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	461a      	mov	r2, r3
 800544e:	f000 fb51 	bl	8005af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2140      	movs	r1, #64	; 0x40
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fbaa 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 800545e:	e009      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fba1 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	fffeff88 	.word	0xfffeff88

08005494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a40      	ldr	r2, [pc, #256]	; (800560c <TIM_Base_SetConfig+0x114>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3d      	ldr	r2, [pc, #244]	; (8005610 <TIM_Base_SetConfig+0x118>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3c      	ldr	r2, [pc, #240]	; (8005614 <TIM_Base_SetConfig+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3b      	ldr	r2, [pc, #236]	; (8005618 <TIM_Base_SetConfig+0x120>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3a      	ldr	r2, [pc, #232]	; (800561c <TIM_Base_SetConfig+0x124>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2f      	ldr	r2, [pc, #188]	; (800560c <TIM_Base_SetConfig+0x114>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d027      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <TIM_Base_SetConfig+0x118>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d023      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <TIM_Base_SetConfig+0x11c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01f      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <TIM_Base_SetConfig+0x120>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <TIM_Base_SetConfig+0x124>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a28      	ldr	r2, [pc, #160]	; (8005620 <TIM_Base_SetConfig+0x128>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <TIM_Base_SetConfig+0x12c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <TIM_Base_SetConfig+0x130>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a25      	ldr	r2, [pc, #148]	; (800562c <TIM_Base_SetConfig+0x134>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a24      	ldr	r2, [pc, #144]	; (8005630 <TIM_Base_SetConfig+0x138>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <TIM_Base_SetConfig+0x13c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <TIM_Base_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	615a      	str	r2, [r3, #20]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	40001800 	.word	0x40001800
 8005630:	40001c00 	.word	0x40001c00
 8005634:	40002000 	.word	0x40002000

08005638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0201 	bic.w	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <TIM_OC1_SetConfig+0xd8>)
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a21      	ldr	r2, [pc, #132]	; (8005714 <TIM_OC1_SetConfig+0xdc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC1_SetConfig+0x64>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a20      	ldr	r2, [pc, #128]	; (8005718 <TIM_OC1_SetConfig+0xe0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10c      	bne.n	80056b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0308 	bic.w	r3, r3, #8
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <TIM_OC1_SetConfig+0xdc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC1_SetConfig+0x8e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <TIM_OC1_SetConfig+0xe0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d111      	bne.n	80056ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	fffeff8f 	.word	0xfffeff8f
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0210 	bic.w	r2, r3, #16
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <TIM_OC2_SetConfig+0xe4>)
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0320 	bic.w	r3, r3, #32
 8005766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a23      	ldr	r2, [pc, #140]	; (8005804 <TIM_OC2_SetConfig+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC2_SetConfig+0x68>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a22      	ldr	r2, [pc, #136]	; (8005808 <TIM_OC2_SetConfig+0xec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10d      	bne.n	80057a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a18      	ldr	r2, [pc, #96]	; (8005804 <TIM_OC2_SetConfig+0xe8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC2_SetConfig+0x94>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <TIM_OC2_SetConfig+0xec>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d113      	bne.n	80057d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	feff8fff 	.word	0xfeff8fff
 8005804:	40010000 	.word	0x40010000
 8005808:	40010400 	.word	0x40010400

0800580c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <TIM_OC3_SetConfig+0xe0>)
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <TIM_OC3_SetConfig+0xe4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_OC3_SetConfig+0x66>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <TIM_OC3_SetConfig+0xe8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10d      	bne.n	800588e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800588c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <TIM_OC3_SetConfig+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC3_SetConfig+0x92>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <TIM_OC3_SetConfig+0xe8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d113      	bne.n	80058c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	fffeff8f 	.word	0xfffeff8f
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40010400 	.word	0x40010400

080058f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4b1e      	ldr	r3, [pc, #120]	; (800599c <TIM_OC4_SetConfig+0xa4>)
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <TIM_OC4_SetConfig+0xa8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC4_SetConfig+0x68>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <TIM_OC4_SetConfig+0xac>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d109      	bne.n	8005974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	feff8fff 	.word	0xfeff8fff
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <TIM_OC5_SetConfig+0x98>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <TIM_OC5_SetConfig+0x9c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_OC5_SetConfig+0x5e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a11      	ldr	r2, [pc, #68]	; (8005a48 <TIM_OC5_SetConfig+0xa0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d109      	bne.n	8005a1a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	fffeff8f 	.word	0xfffeff8f
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <TIM_OC6_SetConfig+0x9c>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	051b      	lsls	r3, r3, #20
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a13      	ldr	r2, [pc, #76]	; (8005aec <TIM_OC6_SetConfig+0xa0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC6_SetConfig+0x60>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <TIM_OC6_SetConfig+0xa4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d109      	bne.n	8005ac0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	029b      	lsls	r3, r3, #10
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	feff8fff 	.word	0xfeff8fff
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 030a 	bic.w	r3, r3, #10
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b087      	sub	sp, #28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0210 	bic.w	r2, r3, #16
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f043 0307 	orr.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e06d      	b.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a30      	ldr	r2, [pc, #192]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d022      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d01d      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10c      	bne.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800

08005d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e040      	b.n	8005e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc fb52 	bl	8002498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 faa6 	bl	800635c <UART_SetConfig>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e022      	b.n	8005e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fd44 	bl	80068b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fdcb 	bl	80069f4 <UART_CheckIdleState>
 8005e5e:	4603      	mov	r3, r0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d17f      	bne.n	8005f80 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Transmit+0x24>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e078      	b.n	8005f82 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit+0x36>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e071      	b.n	8005f82 <HAL_UART_Transmit+0x11a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	; 0x21
 8005eb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005eb2:	f7fc fbb7 	bl	8002624 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Transmit+0x7c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005ef4:	e02c      	b.n	8005f50 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fda6 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e038      	b.n	8005f82 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e007      	b.n	8005f3e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1cc      	bne.n	8005ef6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fd73 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e005      	b.n	8005f82 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	f040 808a 	bne.w	80060b8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Receive_IT+0x24>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e082      	b.n	80060ba <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Receive_IT+0x36>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e07b      	b.n	80060ba <HAL_UART_Receive_IT+0x12e>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	d10e      	bne.n	800600e <HAL_UART_Receive_IT+0x82>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_UART_Receive_IT+0x78>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006002:	e02d      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	22ff      	movs	r2, #255	; 0xff
 8006008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800600c:	e028      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <HAL_UART_Receive_IT+0xa6>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UART_Receive_IT+0x9c>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006026:	e01b      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	227f      	movs	r2, #127	; 0x7f
 800602c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006030:	e016      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800603a:	d10d      	bne.n	8006058 <HAL_UART_Receive_IT+0xcc>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <HAL_UART_Receive_IT+0xc2>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	227f      	movs	r2, #127	; 0x7f
 8006048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800604c:	e008      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	223f      	movs	r2, #63	; 0x3f
 8006052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006056:	e003      	b.n	8006060 <HAL_UART_Receive_IT+0xd4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2222      	movs	r2, #34	; 0x22
 800606a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d107      	bne.n	8006096 <HAL_UART_Receive_IT+0x10a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <HAL_UART_Receive_IT+0x13c>)
 8006092:	661a      	str	r2, [r3, #96]	; 0x60
 8006094:	e002      	b.n	800609c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a0c      	ldr	r2, [pc, #48]	; (80060cc <HAL_UART_Receive_IT+0x140>)
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80060b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	08006c8d 	.word	0x08006c8d
 80060cc:	08006be7 	.word	0x08006be7

080060d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d113      	bne.n	8006128 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8100 	beq.w	800631e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
      }
      return;
 8006126:	e0fa      	b.n	800631e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80d5 	beq.w	80062da <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80ca 	beq.w	80062da <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <HAL_UART_IRQHandler+0x9e>
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <HAL_UART_IRQHandler+0xc6>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2202      	movs	r2, #2
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00e      	beq.n	80061be <HAL_UART_IRQHandler+0xee>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2204      	movs	r2, #4
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b6:	f043 0202 	orr.w	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e8:	f043 0208 	orr.w	r2, r3, #8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00f      	beq.n	800621a <HAL_UART_IRQHandler+0x14a>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d07f      	beq.n	8006322 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00c      	beq.n	8006246 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d004      	beq.n	8006264 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006260:	2b00      	cmp	r3, #0
 8006262:	d031      	beq.n	80062c8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc6f 	bl	8006b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d123      	bne.n	80062c0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006286:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006294:	4a26      	ldr	r2, [pc, #152]	; (8006330 <HAL_UART_IRQHandler+0x260>)
 8006296:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629c:	4618      	mov	r0, r3
 800629e:	f7fc fb00 	bl	80028a2 <HAL_DMA_Abort_IT>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d016      	beq.n	80062d6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062b2:	4610      	mov	r0, r2
 80062b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b6:	e00e      	b.n	80062d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f845 	bl	8006348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062be:	e00a      	b.n	80062d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f841 	bl	8006348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	e006      	b.n	80062d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f83d 	bl	8006348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80062d4:	e025      	b.n	8006322 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	bf00      	nop
    return;
 80062d8:	e023      	b.n	8006322 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d017      	beq.n	8006326 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
    }
    return;
 80062fe:	e012      	b.n	8006326 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <HAL_UART_IRQHandler+0x258>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc4d 	bl	8006bb4 <UART_EndTransmit_IT>
    return;
 800631a:	bf00      	nop
 800631c:	e004      	b.n	8006328 <HAL_UART_IRQHandler+0x258>
      return;
 800631e:	bf00      	nop
 8006320:	e002      	b.n	8006328 <HAL_UART_IRQHandler+0x258>
    return;
 8006322:	bf00      	nop
 8006324:	e000      	b.n	8006328 <HAL_UART_IRQHandler+0x258>
    return;
 8006326:	bf00      	nop
  }

}
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	08006b89 	.word	0x08006b89

08006334 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4bb1      	ldr	r3, [pc, #708]	; (8006650 <UART_SetConfig+0x2f4>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	6939      	ldr	r1, [r7, #16]
 8006394:	430b      	orrs	r3, r1
 8006396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a9f      	ldr	r2, [pc, #636]	; (8006654 <UART_SetConfig+0x2f8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d121      	bne.n	8006420 <UART_SetConfig+0xc4>
 80063dc:	4b9e      	ldr	r3, [pc, #632]	; (8006658 <UART_SetConfig+0x2fc>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d816      	bhi.n	8006418 <UART_SetConfig+0xbc>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x94>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006401 	.word	0x08006401
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	08006407 	.word	0x08006407
 80063fc:	08006413 	.word	0x08006413
 8006400:	2301      	movs	r3, #1
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e151      	b.n	80066aa <UART_SetConfig+0x34e>
 8006406:	2302      	movs	r3, #2
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e14e      	b.n	80066aa <UART_SetConfig+0x34e>
 800640c:	2304      	movs	r3, #4
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e14b      	b.n	80066aa <UART_SetConfig+0x34e>
 8006412:	2308      	movs	r3, #8
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e148      	b.n	80066aa <UART_SetConfig+0x34e>
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	bf00      	nop
 800641e:	e144      	b.n	80066aa <UART_SetConfig+0x34e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a8d      	ldr	r2, [pc, #564]	; (800665c <UART_SetConfig+0x300>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d134      	bne.n	8006494 <UART_SetConfig+0x138>
 800642a:	4b8b      	ldr	r3, [pc, #556]	; (8006658 <UART_SetConfig+0x2fc>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f003 030c 	and.w	r3, r3, #12
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d829      	bhi.n	800648c <UART_SetConfig+0x130>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0xe4>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006475 	.word	0x08006475
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800648d 	.word	0x0800648d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	08006481 	.word	0x08006481
 8006454:	0800648d 	.word	0x0800648d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800648d 	.word	0x0800648d
 8006460:	0800647b 	.word	0x0800647b
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006487 	.word	0x08006487
 8006474:	2300      	movs	r3, #0
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e117      	b.n	80066aa <UART_SetConfig+0x34e>
 800647a:	2302      	movs	r3, #2
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e114      	b.n	80066aa <UART_SetConfig+0x34e>
 8006480:	2304      	movs	r3, #4
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e111      	b.n	80066aa <UART_SetConfig+0x34e>
 8006486:	2308      	movs	r3, #8
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e10e      	b.n	80066aa <UART_SetConfig+0x34e>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	bf00      	nop
 8006492:	e10a      	b.n	80066aa <UART_SetConfig+0x34e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a71      	ldr	r2, [pc, #452]	; (8006660 <UART_SetConfig+0x304>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d120      	bne.n	80064e0 <UART_SetConfig+0x184>
 800649e:	4b6e      	ldr	r3, [pc, #440]	; (8006658 <UART_SetConfig+0x2fc>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d00f      	beq.n	80064cc <UART_SetConfig+0x170>
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d802      	bhi.n	80064b6 <UART_SetConfig+0x15a>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0x164>
 80064b4:	e010      	b.n	80064d8 <UART_SetConfig+0x17c>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d005      	beq.n	80064c6 <UART_SetConfig+0x16a>
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d009      	beq.n	80064d2 <UART_SetConfig+0x176>
 80064be:	e00b      	b.n	80064d8 <UART_SetConfig+0x17c>
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0f1      	b.n	80066aa <UART_SetConfig+0x34e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0ee      	b.n	80066aa <UART_SetConfig+0x34e>
 80064cc:	2304      	movs	r3, #4
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0eb      	b.n	80066aa <UART_SetConfig+0x34e>
 80064d2:	2308      	movs	r3, #8
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e0e8      	b.n	80066aa <UART_SetConfig+0x34e>
 80064d8:	2310      	movs	r3, #16
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	bf00      	nop
 80064de:	e0e4      	b.n	80066aa <UART_SetConfig+0x34e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5f      	ldr	r2, [pc, #380]	; (8006664 <UART_SetConfig+0x308>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d120      	bne.n	800652c <UART_SetConfig+0x1d0>
 80064ea:	4b5b      	ldr	r3, [pc, #364]	; (8006658 <UART_SetConfig+0x2fc>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d00f      	beq.n	8006518 <UART_SetConfig+0x1bc>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d802      	bhi.n	8006502 <UART_SetConfig+0x1a6>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <UART_SetConfig+0x1b0>
 8006500:	e010      	b.n	8006524 <UART_SetConfig+0x1c8>
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d005      	beq.n	8006512 <UART_SetConfig+0x1b6>
 8006506:	2bc0      	cmp	r3, #192	; 0xc0
 8006508:	d009      	beq.n	800651e <UART_SetConfig+0x1c2>
 800650a:	e00b      	b.n	8006524 <UART_SetConfig+0x1c8>
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e0cb      	b.n	80066aa <UART_SetConfig+0x34e>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e0c8      	b.n	80066aa <UART_SetConfig+0x34e>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e0c5      	b.n	80066aa <UART_SetConfig+0x34e>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e0c2      	b.n	80066aa <UART_SetConfig+0x34e>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	bf00      	nop
 800652a:	e0be      	b.n	80066aa <UART_SetConfig+0x34e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4d      	ldr	r2, [pc, #308]	; (8006668 <UART_SetConfig+0x30c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d124      	bne.n	8006580 <UART_SetConfig+0x224>
 8006536:	4b48      	ldr	r3, [pc, #288]	; (8006658 <UART_SetConfig+0x2fc>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d012      	beq.n	800656c <UART_SetConfig+0x210>
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d802      	bhi.n	8006552 <UART_SetConfig+0x1f6>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <UART_SetConfig+0x204>
 8006550:	e012      	b.n	8006578 <UART_SetConfig+0x21c>
 8006552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006556:	d006      	beq.n	8006566 <UART_SetConfig+0x20a>
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d009      	beq.n	8006572 <UART_SetConfig+0x216>
 800655e:	e00b      	b.n	8006578 <UART_SetConfig+0x21c>
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0a1      	b.n	80066aa <UART_SetConfig+0x34e>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e09e      	b.n	80066aa <UART_SetConfig+0x34e>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e09b      	b.n	80066aa <UART_SetConfig+0x34e>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e098      	b.n	80066aa <UART_SetConfig+0x34e>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	bf00      	nop
 800657e:	e094      	b.n	80066aa <UART_SetConfig+0x34e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a39      	ldr	r2, [pc, #228]	; (800666c <UART_SetConfig+0x310>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d124      	bne.n	80065d4 <UART_SetConfig+0x278>
 800658a:	4b33      	ldr	r3, [pc, #204]	; (8006658 <UART_SetConfig+0x2fc>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d012      	beq.n	80065c0 <UART_SetConfig+0x264>
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d802      	bhi.n	80065a6 <UART_SetConfig+0x24a>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <UART_SetConfig+0x258>
 80065a4:	e012      	b.n	80065cc <UART_SetConfig+0x270>
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d006      	beq.n	80065ba <UART_SetConfig+0x25e>
 80065ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065b0:	d009      	beq.n	80065c6 <UART_SetConfig+0x26a>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x270>
 80065b4:	2301      	movs	r3, #1
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e077      	b.n	80066aa <UART_SetConfig+0x34e>
 80065ba:	2302      	movs	r3, #2
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e074      	b.n	80066aa <UART_SetConfig+0x34e>
 80065c0:	2304      	movs	r3, #4
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e071      	b.n	80066aa <UART_SetConfig+0x34e>
 80065c6:	2308      	movs	r3, #8
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e06e      	b.n	80066aa <UART_SetConfig+0x34e>
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	bf00      	nop
 80065d2:	e06a      	b.n	80066aa <UART_SetConfig+0x34e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a25      	ldr	r2, [pc, #148]	; (8006670 <UART_SetConfig+0x314>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d124      	bne.n	8006628 <UART_SetConfig+0x2cc>
 80065de:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <UART_SetConfig+0x2fc>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d012      	beq.n	8006614 <UART_SetConfig+0x2b8>
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f2:	d802      	bhi.n	80065fa <UART_SetConfig+0x29e>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <UART_SetConfig+0x2ac>
 80065f8:	e012      	b.n	8006620 <UART_SetConfig+0x2c4>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	d006      	beq.n	800660e <UART_SetConfig+0x2b2>
 8006600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006604:	d009      	beq.n	800661a <UART_SetConfig+0x2be>
 8006606:	e00b      	b.n	8006620 <UART_SetConfig+0x2c4>
 8006608:	2300      	movs	r3, #0
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e04d      	b.n	80066aa <UART_SetConfig+0x34e>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e04a      	b.n	80066aa <UART_SetConfig+0x34e>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e047      	b.n	80066aa <UART_SetConfig+0x34e>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e044      	b.n	80066aa <UART_SetConfig+0x34e>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	bf00      	nop
 8006626:	e040      	b.n	80066aa <UART_SetConfig+0x34e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a11      	ldr	r2, [pc, #68]	; (8006674 <UART_SetConfig+0x318>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d139      	bne.n	80066a6 <UART_SetConfig+0x34a>
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <UART_SetConfig+0x2fc>)
 8006634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800663c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006640:	d027      	beq.n	8006692 <UART_SetConfig+0x336>
 8006642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006646:	d817      	bhi.n	8006678 <UART_SetConfig+0x31c>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01c      	beq.n	8006686 <UART_SetConfig+0x32a>
 800664c:	e027      	b.n	800669e <UART_SetConfig+0x342>
 800664e:	bf00      	nop
 8006650:	efff69f3 	.word	0xefff69f3
 8006654:	40011000 	.word	0x40011000
 8006658:	40023800 	.word	0x40023800
 800665c:	40004400 	.word	0x40004400
 8006660:	40004800 	.word	0x40004800
 8006664:	40004c00 	.word	0x40004c00
 8006668:	40005000 	.word	0x40005000
 800666c:	40011400 	.word	0x40011400
 8006670:	40007800 	.word	0x40007800
 8006674:	40007c00 	.word	0x40007c00
 8006678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667c:	d006      	beq.n	800668c <UART_SetConfig+0x330>
 800667e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006682:	d009      	beq.n	8006698 <UART_SetConfig+0x33c>
 8006684:	e00b      	b.n	800669e <UART_SetConfig+0x342>
 8006686:	2300      	movs	r3, #0
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e00e      	b.n	80066aa <UART_SetConfig+0x34e>
 800668c:	2302      	movs	r3, #2
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e00b      	b.n	80066aa <UART_SetConfig+0x34e>
 8006692:	2304      	movs	r3, #4
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e008      	b.n	80066aa <UART_SetConfig+0x34e>
 8006698:	2308      	movs	r3, #8
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e005      	b.n	80066aa <UART_SetConfig+0x34e>
 800669e:	2310      	movs	r3, #16
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	bf00      	nop
 80066a4:	e001      	b.n	80066aa <UART_SetConfig+0x34e>
 80066a6:	2310      	movs	r3, #16
 80066a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b2:	d17f      	bne.n	80067b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d85c      	bhi.n	8006774 <UART_SetConfig+0x418>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x364>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	08006705 	.word	0x08006705
 80066c8:	08006725 	.word	0x08006725
 80066cc:	08006775 	.word	0x08006775
 80066d0:	0800673d 	.word	0x0800673d
 80066d4:	08006775 	.word	0x08006775
 80066d8:	08006775 	.word	0x08006775
 80066dc:	08006775 	.word	0x08006775
 80066e0:	0800675d 	.word	0x0800675d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fd f8e4 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 80066e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	005a      	lsls	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	441a      	add	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	b29b      	uxth	r3, r3
 8006700:	61bb      	str	r3, [r7, #24]
        break;
 8006702:	e03a      	b.n	800677a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fd f8e8 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8006708:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	005a      	lsls	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	b29b      	uxth	r3, r3
 8006720:	61bb      	str	r3, [r7, #24]
        break;
 8006722:	e02a      	b.n	800677a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	085a      	lsrs	r2, r3, #1
 800672a:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <UART_SetConfig+0x54c>)
 800672c:	4413      	add	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6852      	ldr	r2, [r2, #4]
 8006732:	fbb3 f3f2 	udiv	r3, r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	61bb      	str	r3, [r7, #24]
        break;
 800673a:	e01e      	b.n	800677a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673c:	f7fc ffd4 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8006740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	441a      	add	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	b29b      	uxth	r3, r3
 8006758:	61bb      	str	r3, [r7, #24]
        break;
 800675a:	e00e      	b.n	800677a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	61bb      	str	r3, [r7, #24]
        break;
 8006772:	e002      	b.n	800677a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
        break;
 8006778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b0f      	cmp	r3, #15
 800677e:	d916      	bls.n	80067ae <UART_SetConfig+0x452>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006786:	d212      	bcs.n	80067ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f023 030f 	bic.w	r3, r3, #15
 8006790:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	b29b      	uxth	r3, r3
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	b29a      	uxth	r2, r3
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	897a      	ldrh	r2, [r7, #10]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e070      	b.n	8006890 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
 80067b2:	e06d      	b.n	8006890 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80067b4:	7ffb      	ldrb	r3, [r7, #31]
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d859      	bhi.n	800686e <UART_SetConfig+0x512>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x464>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067e5 	.word	0x080067e5
 80067c4:	08006803 	.word	0x08006803
 80067c8:	08006821 	.word	0x08006821
 80067cc:	0800686f 	.word	0x0800686f
 80067d0:	08006839 	.word	0x08006839
 80067d4:	0800686f 	.word	0x0800686f
 80067d8:	0800686f 	.word	0x0800686f
 80067dc:	0800686f 	.word	0x0800686f
 80067e0:	08006857 	.word	0x08006857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e4:	f7fd f864 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 80067e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085a      	lsrs	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	61bb      	str	r3, [r7, #24]
        break;
 8006800:	e038      	b.n	8006874 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006802:	f7fd f869 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8006806:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	085a      	lsrs	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	b29b      	uxth	r3, r3
 800681c:	61bb      	str	r3, [r7, #24]
        break;
 800681e:	e029      	b.n	8006874 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	085a      	lsrs	r2, r3, #1
 8006826:	4b21      	ldr	r3, [pc, #132]	; (80068ac <UART_SetConfig+0x550>)
 8006828:	4413      	add	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6852      	ldr	r2, [r2, #4]
 800682e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	61bb      	str	r3, [r7, #24]
        break;
 8006836:	e01d      	b.n	8006874 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006838:	f7fc ff56 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800683c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	085a      	lsrs	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	441a      	add	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	b29b      	uxth	r3, r3
 8006852:	61bb      	str	r3, [r7, #24]
        break;
 8006854:	e00e      	b.n	8006874 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	b29b      	uxth	r3, r3
 800686a:	61bb      	str	r3, [r7, #24]
        break;
 800686c:	e002      	b.n	8006874 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
        break;
 8006872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d908      	bls.n	800688c <UART_SetConfig+0x530>
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006880:	d204      	bcs.n	800688c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	60da      	str	r2, [r3, #12]
 800688a:	e001      	b.n	8006890 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	01e84800 	.word	0x01e84800
 80068ac:	00f42400 	.word	0x00f42400

080068b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ae:	d10a      	bne.n	80069c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a02:	f7fb fe0f 	bl	8002624 <HAL_GetTick>
 8006a06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d10e      	bne.n	8006a34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f814 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e00a      	b.n	8006a4a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a62:	e05d      	b.n	8006b20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d059      	beq.n	8006b20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6c:	f7fb fdda 	bl	8002624 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d302      	bcc.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11b      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e042      	b.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d02b      	beq.n	8006b20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad6:	d123      	bne.n	8006b20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e00f      	b.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69da      	ldr	r2, [r3, #28]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	bf0c      	ite	eq
 8006b30:	2301      	moveq	r3, #1
 8006b32:	2300      	movne	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d092      	beq.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fbce 	bl	8006348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fbab 	bl	8006334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bf4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bfa:	2b22      	cmp	r3, #34	; 0x22
 8006bfc:	d13a      	bne.n	8006c74 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c06:	89bb      	ldrh	r3, [r7, #12]
 8006c08:	b2d9      	uxtb	r1, r3
 8006c0a:	89fb      	ldrh	r3, [r7, #14]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	400a      	ands	r2, r1
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d121      	bne.n	8006c84 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fa fe91 	bl	8001994 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c72:	e007      	b.n	8006c84 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0208 	orr.w	r2, r2, #8
 8006c82:	619a      	str	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c9a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca0:	2b22      	cmp	r3, #34	; 0x22
 8006ca2:	d13a      	bne.n	8006d1a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cb2:	89ba      	ldrh	r2, [r7, #12]
 8006cb4:	89fb      	ldrh	r3, [r7, #14]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d121      	bne.n	8006d2a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa fe3e 	bl	8001994 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d18:	e007      	b.n	8006d2a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0208 	orr.w	r2, r2, #8
 8006d28:	619a      	str	r2, [r3, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	; (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000098 	.word	0x20000098

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0d      	ldr	r6, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4e0b      	ldr	r6, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f000 fc46 	bl	80075e4 <_init>
 8006d58:	1ba4      	subs	r4, r4, r6
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d68:	4798      	blx	r3
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d72:	4798      	blx	r3
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	080076b4 	.word	0x080076b4
 8006d7c:	080076b4 	.word	0x080076b4
 8006d80:	080076b4 	.word	0x080076b4
 8006d84:	080076b8 	.word	0x080076b8

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <siprintf>:
 8006d98:	b40e      	push	{r1, r2, r3}
 8006d9a:	b500      	push	{lr}
 8006d9c:	b09c      	sub	sp, #112	; 0x70
 8006d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8006da0:	9002      	str	r0, [sp, #8]
 8006da2:	9006      	str	r0, [sp, #24]
 8006da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006da8:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <siprintf+0x38>)
 8006daa:	9107      	str	r1, [sp, #28]
 8006dac:	9104      	str	r1, [sp, #16]
 8006dae:	4909      	ldr	r1, [pc, #36]	; (8006dd4 <siprintf+0x3c>)
 8006db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	a902      	add	r1, sp, #8
 8006dbc:	f000 f886 	bl	8006ecc <_svfiprintf_r>
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	b01c      	add	sp, #112	; 0x70
 8006dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dcc:	b003      	add	sp, #12
 8006dce:	4770      	bx	lr
 8006dd0:	20000098 	.word	0x20000098
 8006dd4:	ffff0208 	.word	0xffff0208

08006dd8 <_vsiprintf_r>:
 8006dd8:	b500      	push	{lr}
 8006dda:	b09b      	sub	sp, #108	; 0x6c
 8006ddc:	9100      	str	r1, [sp, #0]
 8006dde:	9104      	str	r1, [sp, #16]
 8006de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006de4:	9105      	str	r1, [sp, #20]
 8006de6:	9102      	str	r1, [sp, #8]
 8006de8:	4905      	ldr	r1, [pc, #20]	; (8006e00 <_vsiprintf_r+0x28>)
 8006dea:	9103      	str	r1, [sp, #12]
 8006dec:	4669      	mov	r1, sp
 8006dee:	f000 f86d 	bl	8006ecc <_svfiprintf_r>
 8006df2:	9b00      	ldr	r3, [sp, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	b01b      	add	sp, #108	; 0x6c
 8006dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dfe:	bf00      	nop
 8006e00:	ffff0208 	.word	0xffff0208

08006e04 <vsiprintf>:
 8006e04:	4613      	mov	r3, r2
 8006e06:	460a      	mov	r2, r1
 8006e08:	4601      	mov	r1, r0
 8006e0a:	4802      	ldr	r0, [pc, #8]	; (8006e14 <vsiprintf+0x10>)
 8006e0c:	6800      	ldr	r0, [r0, #0]
 8006e0e:	f7ff bfe3 	b.w	8006dd8 <_vsiprintf_r>
 8006e12:	bf00      	nop
 8006e14:	20000098 	.word	0x20000098

08006e18 <__ssputs_r>:
 8006e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	688e      	ldr	r6, [r1, #8]
 8006e1e:	429e      	cmp	r6, r3
 8006e20:	4682      	mov	sl, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	4690      	mov	r8, r2
 8006e26:	4699      	mov	r9, r3
 8006e28:	d837      	bhi.n	8006e9a <__ssputs_r+0x82>
 8006e2a:	898a      	ldrh	r2, [r1, #12]
 8006e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e30:	d031      	beq.n	8006e96 <__ssputs_r+0x7e>
 8006e32:	6825      	ldr	r5, [r4, #0]
 8006e34:	6909      	ldr	r1, [r1, #16]
 8006e36:	1a6f      	subs	r7, r5, r1
 8006e38:	6965      	ldr	r5, [r4, #20]
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e44:	f109 0301 	add.w	r3, r9, #1
 8006e48:	443b      	add	r3, r7
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	bf38      	it	cc
 8006e4e:	461d      	movcc	r5, r3
 8006e50:	0553      	lsls	r3, r2, #21
 8006e52:	d530      	bpl.n	8006eb6 <__ssputs_r+0x9e>
 8006e54:	4629      	mov	r1, r5
 8006e56:	f000 fb2b 	bl	80074b0 <_malloc_r>
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	b950      	cbnz	r0, 8006e74 <__ssputs_r+0x5c>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	f8ca 3000 	str.w	r3, [sl]
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e74:	463a      	mov	r2, r7
 8006e76:	6921      	ldr	r1, [r4, #16]
 8006e78:	f000 faa8 	bl	80073cc <memcpy>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	6126      	str	r6, [r4, #16]
 8006e8a:	6165      	str	r5, [r4, #20]
 8006e8c:	443e      	add	r6, r7
 8006e8e:	1bed      	subs	r5, r5, r7
 8006e90:	6026      	str	r6, [r4, #0]
 8006e92:	60a5      	str	r5, [r4, #8]
 8006e94:	464e      	mov	r6, r9
 8006e96:	454e      	cmp	r6, r9
 8006e98:	d900      	bls.n	8006e9c <__ssputs_r+0x84>
 8006e9a:	464e      	mov	r6, r9
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	f000 fa9e 	bl	80073e2 <memmove>
 8006ea6:	68a3      	ldr	r3, [r4, #8]
 8006ea8:	1b9b      	subs	r3, r3, r6
 8006eaa:	60a3      	str	r3, [r4, #8]
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	441e      	add	r6, r3
 8006eb0:	6026      	str	r6, [r4, #0]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	e7dc      	b.n	8006e70 <__ssputs_r+0x58>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	f000 fb54 	bl	8007564 <_realloc_r>
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d1e2      	bne.n	8006e88 <__ssputs_r+0x70>
 8006ec2:	6921      	ldr	r1, [r4, #16]
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	f000 faa5 	bl	8007414 <_free_r>
 8006eca:	e7c8      	b.n	8006e5e <__ssputs_r+0x46>

08006ecc <_svfiprintf_r>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	898b      	ldrh	r3, [r1, #12]
 8006ed4:	061f      	lsls	r7, r3, #24
 8006ed6:	b09d      	sub	sp, #116	; 0x74
 8006ed8:	4680      	mov	r8, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	4616      	mov	r6, r2
 8006ede:	d50f      	bpl.n	8006f00 <_svfiprintf_r+0x34>
 8006ee0:	690b      	ldr	r3, [r1, #16]
 8006ee2:	b96b      	cbnz	r3, 8006f00 <_svfiprintf_r+0x34>
 8006ee4:	2140      	movs	r1, #64	; 0x40
 8006ee6:	f000 fae3 	bl	80074b0 <_malloc_r>
 8006eea:	6020      	str	r0, [r4, #0]
 8006eec:	6120      	str	r0, [r4, #16]
 8006eee:	b928      	cbnz	r0, 8006efc <_svfiprintf_r+0x30>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	f8c8 3000 	str.w	r3, [r8]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	e0c8      	b.n	800708e <_svfiprintf_r+0x1c2>
 8006efc:	2340      	movs	r3, #64	; 0x40
 8006efe:	6163      	str	r3, [r4, #20]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9309      	str	r3, [sp, #36]	; 0x24
 8006f04:	2320      	movs	r3, #32
 8006f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f0a:	2330      	movs	r3, #48	; 0x30
 8006f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f10:	9503      	str	r5, [sp, #12]
 8006f12:	f04f 0b01 	mov.w	fp, #1
 8006f16:	4637      	mov	r7, r6
 8006f18:	463d      	mov	r5, r7
 8006f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f1e:	b10b      	cbz	r3, 8006f24 <_svfiprintf_r+0x58>
 8006f20:	2b25      	cmp	r3, #37	; 0x25
 8006f22:	d13e      	bne.n	8006fa2 <_svfiprintf_r+0xd6>
 8006f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f28:	d00b      	beq.n	8006f42 <_svfiprintf_r+0x76>
 8006f2a:	4653      	mov	r3, sl
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4640      	mov	r0, r8
 8006f32:	f7ff ff71 	bl	8006e18 <__ssputs_r>
 8006f36:	3001      	adds	r0, #1
 8006f38:	f000 80a4 	beq.w	8007084 <_svfiprintf_r+0x1b8>
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	4453      	add	r3, sl
 8006f40:	9309      	str	r3, [sp, #36]	; 0x24
 8006f42:	783b      	ldrb	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 809d 	beq.w	8007084 <_svfiprintf_r+0x1b8>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5e:	462f      	mov	r7, r5
 8006f60:	2205      	movs	r2, #5
 8006f62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f66:	4850      	ldr	r0, [pc, #320]	; (80070a8 <_svfiprintf_r+0x1dc>)
 8006f68:	f7f9 f95a 	bl	8000220 <memchr>
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	b9d0      	cbnz	r0, 8006fa6 <_svfiprintf_r+0xda>
 8006f70:	06d9      	lsls	r1, r3, #27
 8006f72:	bf44      	itt	mi
 8006f74:	2220      	movmi	r2, #32
 8006f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f7a:	071a      	lsls	r2, r3, #28
 8006f7c:	bf44      	itt	mi
 8006f7e:	222b      	movmi	r2, #43	; 0x2b
 8006f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f84:	782a      	ldrb	r2, [r5, #0]
 8006f86:	2a2a      	cmp	r2, #42	; 0x2a
 8006f88:	d015      	beq.n	8006fb6 <_svfiprintf_r+0xea>
 8006f8a:	9a07      	ldr	r2, [sp, #28]
 8006f8c:	462f      	mov	r7, r5
 8006f8e:	2000      	movs	r0, #0
 8006f90:	250a      	movs	r5, #10
 8006f92:	4639      	mov	r1, r7
 8006f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f98:	3b30      	subs	r3, #48	; 0x30
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d94d      	bls.n	800703a <_svfiprintf_r+0x16e>
 8006f9e:	b1b8      	cbz	r0, 8006fd0 <_svfiprintf_r+0x104>
 8006fa0:	e00f      	b.n	8006fc2 <_svfiprintf_r+0xf6>
 8006fa2:	462f      	mov	r7, r5
 8006fa4:	e7b8      	b.n	8006f18 <_svfiprintf_r+0x4c>
 8006fa6:	4a40      	ldr	r2, [pc, #256]	; (80070a8 <_svfiprintf_r+0x1dc>)
 8006fa8:	1a80      	subs	r0, r0, r2
 8006faa:	fa0b f000 	lsl.w	r0, fp, r0
 8006fae:	4318      	orrs	r0, r3
 8006fb0:	9004      	str	r0, [sp, #16]
 8006fb2:	463d      	mov	r5, r7
 8006fb4:	e7d3      	b.n	8006f5e <_svfiprintf_r+0x92>
 8006fb6:	9a03      	ldr	r2, [sp, #12]
 8006fb8:	1d11      	adds	r1, r2, #4
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	9103      	str	r1, [sp, #12]
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	db01      	blt.n	8006fc6 <_svfiprintf_r+0xfa>
 8006fc2:	9207      	str	r2, [sp, #28]
 8006fc4:	e004      	b.n	8006fd0 <_svfiprintf_r+0x104>
 8006fc6:	4252      	negs	r2, r2
 8006fc8:	f043 0302 	orr.w	r3, r3, #2
 8006fcc:	9207      	str	r2, [sp, #28]
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	783b      	ldrb	r3, [r7, #0]
 8006fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd4:	d10c      	bne.n	8006ff0 <_svfiprintf_r+0x124>
 8006fd6:	787b      	ldrb	r3, [r7, #1]
 8006fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fda:	d133      	bne.n	8007044 <_svfiprintf_r+0x178>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	9203      	str	r2, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfb8      	it	lt
 8006fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fec:	3702      	adds	r7, #2
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	4d2e      	ldr	r5, [pc, #184]	; (80070ac <_svfiprintf_r+0x1e0>)
 8006ff2:	7839      	ldrb	r1, [r7, #0]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7f9 f912 	bl	8000220 <memchr>
 8006ffc:	b138      	cbz	r0, 800700e <_svfiprintf_r+0x142>
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	1b40      	subs	r0, r0, r5
 8007002:	fa03 f000 	lsl.w	r0, r3, r0
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	4303      	orrs	r3, r0
 800700a:	3701      	adds	r7, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	7839      	ldrb	r1, [r7, #0]
 8007010:	4827      	ldr	r0, [pc, #156]	; (80070b0 <_svfiprintf_r+0x1e4>)
 8007012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007016:	2206      	movs	r2, #6
 8007018:	1c7e      	adds	r6, r7, #1
 800701a:	f7f9 f901 	bl	8000220 <memchr>
 800701e:	2800      	cmp	r0, #0
 8007020:	d038      	beq.n	8007094 <_svfiprintf_r+0x1c8>
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <_svfiprintf_r+0x1e8>)
 8007024:	bb13      	cbnz	r3, 800706c <_svfiprintf_r+0x1a0>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3307      	adds	r3, #7
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	3308      	adds	r3, #8
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007034:	444b      	add	r3, r9
 8007036:	9309      	str	r3, [sp, #36]	; 0x24
 8007038:	e76d      	b.n	8006f16 <_svfiprintf_r+0x4a>
 800703a:	fb05 3202 	mla	r2, r5, r2, r3
 800703e:	2001      	movs	r0, #1
 8007040:	460f      	mov	r7, r1
 8007042:	e7a6      	b.n	8006f92 <_svfiprintf_r+0xc6>
 8007044:	2300      	movs	r3, #0
 8007046:	3701      	adds	r7, #1
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	4619      	mov	r1, r3
 800704c:	250a      	movs	r5, #10
 800704e:	4638      	mov	r0, r7
 8007050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007054:	3a30      	subs	r2, #48	; 0x30
 8007056:	2a09      	cmp	r2, #9
 8007058:	d903      	bls.n	8007062 <_svfiprintf_r+0x196>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0c8      	beq.n	8006ff0 <_svfiprintf_r+0x124>
 800705e:	9105      	str	r1, [sp, #20]
 8007060:	e7c6      	b.n	8006ff0 <_svfiprintf_r+0x124>
 8007062:	fb05 2101 	mla	r1, r5, r1, r2
 8007066:	2301      	movs	r3, #1
 8007068:	4607      	mov	r7, r0
 800706a:	e7f0      	b.n	800704e <_svfiprintf_r+0x182>
 800706c:	ab03      	add	r3, sp, #12
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4622      	mov	r2, r4
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <_svfiprintf_r+0x1ec>)
 8007074:	a904      	add	r1, sp, #16
 8007076:	4640      	mov	r0, r8
 8007078:	f3af 8000 	nop.w
 800707c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007080:	4681      	mov	r9, r0
 8007082:	d1d6      	bne.n	8007032 <_svfiprintf_r+0x166>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	065b      	lsls	r3, r3, #25
 8007088:	f53f af35 	bmi.w	8006ef6 <_svfiprintf_r+0x2a>
 800708c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800708e:	b01d      	add	sp, #116	; 0x74
 8007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4622      	mov	r2, r4
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <_svfiprintf_r+0x1ec>)
 800709c:	a904      	add	r1, sp, #16
 800709e:	4640      	mov	r0, r8
 80070a0:	f000 f882 	bl	80071a8 <_printf_i>
 80070a4:	e7ea      	b.n	800707c <_svfiprintf_r+0x1b0>
 80070a6:	bf00      	nop
 80070a8:	08007678 	.word	0x08007678
 80070ac:	0800767e 	.word	0x0800767e
 80070b0:	08007682 	.word	0x08007682
 80070b4:	00000000 	.word	0x00000000
 80070b8:	08006e19 	.word	0x08006e19

080070bc <_printf_common>:
 80070bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	4691      	mov	r9, r2
 80070c2:	461f      	mov	r7, r3
 80070c4:	688a      	ldr	r2, [r1, #8]
 80070c6:	690b      	ldr	r3, [r1, #16]
 80070c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070cc:	4293      	cmp	r3, r2
 80070ce:	bfb8      	it	lt
 80070d0:	4613      	movlt	r3, r2
 80070d2:	f8c9 3000 	str.w	r3, [r9]
 80070d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070da:	4606      	mov	r6, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	b112      	cbz	r2, 80070e6 <_printf_common+0x2a>
 80070e0:	3301      	adds	r3, #1
 80070e2:	f8c9 3000 	str.w	r3, [r9]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070f0:	3302      	addmi	r3, #2
 80070f2:	f8c9 3000 	strmi.w	r3, [r9]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	f015 0506 	ands.w	r5, r5, #6
 80070fc:	d107      	bne.n	800710e <_printf_common+0x52>
 80070fe:	f104 0a19 	add.w	sl, r4, #25
 8007102:	68e3      	ldr	r3, [r4, #12]
 8007104:	f8d9 2000 	ldr.w	r2, [r9]
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	42ab      	cmp	r3, r5
 800710c:	dc28      	bgt.n	8007160 <_printf_common+0xa4>
 800710e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	3300      	adds	r3, #0
 8007116:	bf18      	it	ne
 8007118:	2301      	movne	r3, #1
 800711a:	0692      	lsls	r2, r2, #26
 800711c:	d42d      	bmi.n	800717a <_printf_common+0xbe>
 800711e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007122:	4639      	mov	r1, r7
 8007124:	4630      	mov	r0, r6
 8007126:	47c0      	blx	r8
 8007128:	3001      	adds	r0, #1
 800712a:	d020      	beq.n	800716e <_printf_common+0xb2>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	68e5      	ldr	r5, [r4, #12]
 8007130:	f8d9 2000 	ldr.w	r2, [r9]
 8007134:	f003 0306 	and.w	r3, r3, #6
 8007138:	2b04      	cmp	r3, #4
 800713a:	bf08      	it	eq
 800713c:	1aad      	subeq	r5, r5, r2
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	6922      	ldr	r2, [r4, #16]
 8007142:	bf0c      	ite	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	2500      	movne	r5, #0
 800714a:	4293      	cmp	r3, r2
 800714c:	bfc4      	itt	gt
 800714e:	1a9b      	subgt	r3, r3, r2
 8007150:	18ed      	addgt	r5, r5, r3
 8007152:	f04f 0900 	mov.w	r9, #0
 8007156:	341a      	adds	r4, #26
 8007158:	454d      	cmp	r5, r9
 800715a:	d11a      	bne.n	8007192 <_printf_common+0xd6>
 800715c:	2000      	movs	r0, #0
 800715e:	e008      	b.n	8007172 <_printf_common+0xb6>
 8007160:	2301      	movs	r3, #1
 8007162:	4652      	mov	r2, sl
 8007164:	4639      	mov	r1, r7
 8007166:	4630      	mov	r0, r6
 8007168:	47c0      	blx	r8
 800716a:	3001      	adds	r0, #1
 800716c:	d103      	bne.n	8007176 <_printf_common+0xba>
 800716e:	f04f 30ff 	mov.w	r0, #4294967295
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	3501      	adds	r5, #1
 8007178:	e7c3      	b.n	8007102 <_printf_common+0x46>
 800717a:	18e1      	adds	r1, r4, r3
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	2030      	movs	r0, #48	; 0x30
 8007180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007184:	4422      	add	r2, r4
 8007186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800718a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800718e:	3302      	adds	r3, #2
 8007190:	e7c5      	b.n	800711e <_printf_common+0x62>
 8007192:	2301      	movs	r3, #1
 8007194:	4622      	mov	r2, r4
 8007196:	4639      	mov	r1, r7
 8007198:	4630      	mov	r0, r6
 800719a:	47c0      	blx	r8
 800719c:	3001      	adds	r0, #1
 800719e:	d0e6      	beq.n	800716e <_printf_common+0xb2>
 80071a0:	f109 0901 	add.w	r9, r9, #1
 80071a4:	e7d8      	b.n	8007158 <_printf_common+0x9c>
	...

080071a8 <_printf_i>:
 80071a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071b0:	460c      	mov	r4, r1
 80071b2:	7e09      	ldrb	r1, [r1, #24]
 80071b4:	b085      	sub	sp, #20
 80071b6:	296e      	cmp	r1, #110	; 0x6e
 80071b8:	4617      	mov	r7, r2
 80071ba:	4606      	mov	r6, r0
 80071bc:	4698      	mov	r8, r3
 80071be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c0:	f000 80b3 	beq.w	800732a <_printf_i+0x182>
 80071c4:	d822      	bhi.n	800720c <_printf_i+0x64>
 80071c6:	2963      	cmp	r1, #99	; 0x63
 80071c8:	d036      	beq.n	8007238 <_printf_i+0x90>
 80071ca:	d80a      	bhi.n	80071e2 <_printf_i+0x3a>
 80071cc:	2900      	cmp	r1, #0
 80071ce:	f000 80b9 	beq.w	8007344 <_printf_i+0x19c>
 80071d2:	2958      	cmp	r1, #88	; 0x58
 80071d4:	f000 8083 	beq.w	80072de <_printf_i+0x136>
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071e0:	e032      	b.n	8007248 <_printf_i+0xa0>
 80071e2:	2964      	cmp	r1, #100	; 0x64
 80071e4:	d001      	beq.n	80071ea <_printf_i+0x42>
 80071e6:	2969      	cmp	r1, #105	; 0x69
 80071e8:	d1f6      	bne.n	80071d8 <_printf_i+0x30>
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	6813      	ldr	r3, [r2, #0]
 80071ee:	0605      	lsls	r5, r0, #24
 80071f0:	f103 0104 	add.w	r1, r3, #4
 80071f4:	d52a      	bpl.n	800724c <_printf_i+0xa4>
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6011      	str	r1, [r2, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da03      	bge.n	8007206 <_printf_i+0x5e>
 80071fe:	222d      	movs	r2, #45	; 0x2d
 8007200:	425b      	negs	r3, r3
 8007202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007206:	486f      	ldr	r0, [pc, #444]	; (80073c4 <_printf_i+0x21c>)
 8007208:	220a      	movs	r2, #10
 800720a:	e039      	b.n	8007280 <_printf_i+0xd8>
 800720c:	2973      	cmp	r1, #115	; 0x73
 800720e:	f000 809d 	beq.w	800734c <_printf_i+0x1a4>
 8007212:	d808      	bhi.n	8007226 <_printf_i+0x7e>
 8007214:	296f      	cmp	r1, #111	; 0x6f
 8007216:	d020      	beq.n	800725a <_printf_i+0xb2>
 8007218:	2970      	cmp	r1, #112	; 0x70
 800721a:	d1dd      	bne.n	80071d8 <_printf_i+0x30>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	f043 0320 	orr.w	r3, r3, #32
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	e003      	b.n	800722e <_printf_i+0x86>
 8007226:	2975      	cmp	r1, #117	; 0x75
 8007228:	d017      	beq.n	800725a <_printf_i+0xb2>
 800722a:	2978      	cmp	r1, #120	; 0x78
 800722c:	d1d4      	bne.n	80071d8 <_printf_i+0x30>
 800722e:	2378      	movs	r3, #120	; 0x78
 8007230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007234:	4864      	ldr	r0, [pc, #400]	; (80073c8 <_printf_i+0x220>)
 8007236:	e055      	b.n	80072e4 <_printf_i+0x13c>
 8007238:	6813      	ldr	r3, [r2, #0]
 800723a:	1d19      	adds	r1, r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6011      	str	r1, [r2, #0]
 8007240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007248:	2301      	movs	r3, #1
 800724a:	e08c      	b.n	8007366 <_printf_i+0x1be>
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6011      	str	r1, [r2, #0]
 8007250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007254:	bf18      	it	ne
 8007256:	b21b      	sxthne	r3, r3
 8007258:	e7cf      	b.n	80071fa <_printf_i+0x52>
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	1d18      	adds	r0, r3, #4
 8007260:	6010      	str	r0, [r2, #0]
 8007262:	0628      	lsls	r0, r5, #24
 8007264:	d501      	bpl.n	800726a <_printf_i+0xc2>
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	e002      	b.n	8007270 <_printf_i+0xc8>
 800726a:	0668      	lsls	r0, r5, #25
 800726c:	d5fb      	bpl.n	8007266 <_printf_i+0xbe>
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	4854      	ldr	r0, [pc, #336]	; (80073c4 <_printf_i+0x21c>)
 8007272:	296f      	cmp	r1, #111	; 0x6f
 8007274:	bf14      	ite	ne
 8007276:	220a      	movne	r2, #10
 8007278:	2208      	moveq	r2, #8
 800727a:	2100      	movs	r1, #0
 800727c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007280:	6865      	ldr	r5, [r4, #4]
 8007282:	60a5      	str	r5, [r4, #8]
 8007284:	2d00      	cmp	r5, #0
 8007286:	f2c0 8095 	blt.w	80073b4 <_printf_i+0x20c>
 800728a:	6821      	ldr	r1, [r4, #0]
 800728c:	f021 0104 	bic.w	r1, r1, #4
 8007290:	6021      	str	r1, [r4, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13d      	bne.n	8007312 <_printf_i+0x16a>
 8007296:	2d00      	cmp	r5, #0
 8007298:	f040 808e 	bne.w	80073b8 <_printf_i+0x210>
 800729c:	4665      	mov	r5, ip
 800729e:	2a08      	cmp	r2, #8
 80072a0:	d10b      	bne.n	80072ba <_printf_i+0x112>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	07db      	lsls	r3, r3, #31
 80072a6:	d508      	bpl.n	80072ba <_printf_i+0x112>
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	6862      	ldr	r2, [r4, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bfde      	ittt	le
 80072b0:	2330      	movle	r3, #48	; 0x30
 80072b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072ba:	ebac 0305 	sub.w	r3, ip, r5
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	f8cd 8000 	str.w	r8, [sp]
 80072c4:	463b      	mov	r3, r7
 80072c6:	aa03      	add	r2, sp, #12
 80072c8:	4621      	mov	r1, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff fef6 	bl	80070bc <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d14d      	bne.n	8007370 <_printf_i+0x1c8>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b005      	add	sp, #20
 80072da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072de:	4839      	ldr	r0, [pc, #228]	; (80073c4 <_printf_i+0x21c>)
 80072e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	6821      	ldr	r1, [r4, #0]
 80072e8:	1d1d      	adds	r5, r3, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6015      	str	r5, [r2, #0]
 80072ee:	060a      	lsls	r2, r1, #24
 80072f0:	d50b      	bpl.n	800730a <_printf_i+0x162>
 80072f2:	07ca      	lsls	r2, r1, #31
 80072f4:	bf44      	itt	mi
 80072f6:	f041 0120 	orrmi.w	r1, r1, #32
 80072fa:	6021      	strmi	r1, [r4, #0]
 80072fc:	b91b      	cbnz	r3, 8007306 <_printf_i+0x15e>
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	f022 0220 	bic.w	r2, r2, #32
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	2210      	movs	r2, #16
 8007308:	e7b7      	b.n	800727a <_printf_i+0xd2>
 800730a:	064d      	lsls	r5, r1, #25
 800730c:	bf48      	it	mi
 800730e:	b29b      	uxthmi	r3, r3
 8007310:	e7ef      	b.n	80072f2 <_printf_i+0x14a>
 8007312:	4665      	mov	r5, ip
 8007314:	fbb3 f1f2 	udiv	r1, r3, r2
 8007318:	fb02 3311 	mls	r3, r2, r1, r3
 800731c:	5cc3      	ldrb	r3, [r0, r3]
 800731e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007322:	460b      	mov	r3, r1
 8007324:	2900      	cmp	r1, #0
 8007326:	d1f5      	bne.n	8007314 <_printf_i+0x16c>
 8007328:	e7b9      	b.n	800729e <_printf_i+0xf6>
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	6825      	ldr	r5, [r4, #0]
 800732e:	6961      	ldr	r1, [r4, #20]
 8007330:	1d18      	adds	r0, r3, #4
 8007332:	6010      	str	r0, [r2, #0]
 8007334:	0628      	lsls	r0, r5, #24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	d501      	bpl.n	800733e <_printf_i+0x196>
 800733a:	6019      	str	r1, [r3, #0]
 800733c:	e002      	b.n	8007344 <_printf_i+0x19c>
 800733e:	066a      	lsls	r2, r5, #25
 8007340:	d5fb      	bpl.n	800733a <_printf_i+0x192>
 8007342:	8019      	strh	r1, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	4665      	mov	r5, ip
 800734a:	e7b9      	b.n	80072c0 <_printf_i+0x118>
 800734c:	6813      	ldr	r3, [r2, #0]
 800734e:	1d19      	adds	r1, r3, #4
 8007350:	6011      	str	r1, [r2, #0]
 8007352:	681d      	ldr	r5, [r3, #0]
 8007354:	6862      	ldr	r2, [r4, #4]
 8007356:	2100      	movs	r1, #0
 8007358:	4628      	mov	r0, r5
 800735a:	f7f8 ff61 	bl	8000220 <memchr>
 800735e:	b108      	cbz	r0, 8007364 <_printf_i+0x1bc>
 8007360:	1b40      	subs	r0, r0, r5
 8007362:	6060      	str	r0, [r4, #4]
 8007364:	6863      	ldr	r3, [r4, #4]
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	2300      	movs	r3, #0
 800736a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800736e:	e7a7      	b.n	80072c0 <_printf_i+0x118>
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	462a      	mov	r2, r5
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d0aa      	beq.n	80072d4 <_printf_i+0x12c>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	079b      	lsls	r3, r3, #30
 8007382:	d413      	bmi.n	80073ac <_printf_i+0x204>
 8007384:	68e0      	ldr	r0, [r4, #12]
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	4298      	cmp	r0, r3
 800738a:	bfb8      	it	lt
 800738c:	4618      	movlt	r0, r3
 800738e:	e7a3      	b.n	80072d8 <_printf_i+0x130>
 8007390:	2301      	movs	r3, #1
 8007392:	464a      	mov	r2, r9
 8007394:	4639      	mov	r1, r7
 8007396:	4630      	mov	r0, r6
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d09a      	beq.n	80072d4 <_printf_i+0x12c>
 800739e:	3501      	adds	r5, #1
 80073a0:	68e3      	ldr	r3, [r4, #12]
 80073a2:	9a03      	ldr	r2, [sp, #12]
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	42ab      	cmp	r3, r5
 80073a8:	dcf2      	bgt.n	8007390 <_printf_i+0x1e8>
 80073aa:	e7eb      	b.n	8007384 <_printf_i+0x1dc>
 80073ac:	2500      	movs	r5, #0
 80073ae:	f104 0919 	add.w	r9, r4, #25
 80073b2:	e7f5      	b.n	80073a0 <_printf_i+0x1f8>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1ac      	bne.n	8007312 <_printf_i+0x16a>
 80073b8:	7803      	ldrb	r3, [r0, #0]
 80073ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c2:	e76c      	b.n	800729e <_printf_i+0xf6>
 80073c4:	08007689 	.word	0x08007689
 80073c8:	0800769a 	.word	0x0800769a

080073cc <memcpy>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	1e43      	subs	r3, r0, #1
 80073d0:	440a      	add	r2, r1
 80073d2:	4291      	cmp	r1, r2
 80073d4:	d100      	bne.n	80073d8 <memcpy+0xc>
 80073d6:	bd10      	pop	{r4, pc}
 80073d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e0:	e7f7      	b.n	80073d2 <memcpy+0x6>

080073e2 <memmove>:
 80073e2:	4288      	cmp	r0, r1
 80073e4:	b510      	push	{r4, lr}
 80073e6:	eb01 0302 	add.w	r3, r1, r2
 80073ea:	d807      	bhi.n	80073fc <memmove+0x1a>
 80073ec:	1e42      	subs	r2, r0, #1
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d00a      	beq.n	8007408 <memmove+0x26>
 80073f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073fa:	e7f8      	b.n	80073ee <memmove+0xc>
 80073fc:	4283      	cmp	r3, r0
 80073fe:	d9f5      	bls.n	80073ec <memmove+0xa>
 8007400:	1881      	adds	r1, r0, r2
 8007402:	1ad2      	subs	r2, r2, r3
 8007404:	42d3      	cmn	r3, r2
 8007406:	d100      	bne.n	800740a <memmove+0x28>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007412:	e7f7      	b.n	8007404 <memmove+0x22>

08007414 <_free_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4605      	mov	r5, r0
 8007418:	2900      	cmp	r1, #0
 800741a:	d045      	beq.n	80074a8 <_free_r+0x94>
 800741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007420:	1f0c      	subs	r4, r1, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfb8      	it	lt
 8007426:	18e4      	addlt	r4, r4, r3
 8007428:	f000 f8d2 	bl	80075d0 <__malloc_lock>
 800742c:	4a1f      	ldr	r2, [pc, #124]	; (80074ac <_free_r+0x98>)
 800742e:	6813      	ldr	r3, [r2, #0]
 8007430:	4610      	mov	r0, r2
 8007432:	b933      	cbnz	r3, 8007442 <_free_r+0x2e>
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6014      	str	r4, [r2, #0]
 8007438:	4628      	mov	r0, r5
 800743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800743e:	f000 b8c8 	b.w	80075d2 <__malloc_unlock>
 8007442:	42a3      	cmp	r3, r4
 8007444:	d90c      	bls.n	8007460 <_free_r+0x4c>
 8007446:	6821      	ldr	r1, [r4, #0]
 8007448:	1862      	adds	r2, r4, r1
 800744a:	4293      	cmp	r3, r2
 800744c:	bf04      	itt	eq
 800744e:	681a      	ldreq	r2, [r3, #0]
 8007450:	685b      	ldreq	r3, [r3, #4]
 8007452:	6063      	str	r3, [r4, #4]
 8007454:	bf04      	itt	eq
 8007456:	1852      	addeq	r2, r2, r1
 8007458:	6022      	streq	r2, [r4, #0]
 800745a:	6004      	str	r4, [r0, #0]
 800745c:	e7ec      	b.n	8007438 <_free_r+0x24>
 800745e:	4613      	mov	r3, r2
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	b10a      	cbz	r2, 8007468 <_free_r+0x54>
 8007464:	42a2      	cmp	r2, r4
 8007466:	d9fa      	bls.n	800745e <_free_r+0x4a>
 8007468:	6819      	ldr	r1, [r3, #0]
 800746a:	1858      	adds	r0, r3, r1
 800746c:	42a0      	cmp	r0, r4
 800746e:	d10b      	bne.n	8007488 <_free_r+0x74>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	4401      	add	r1, r0
 8007474:	1858      	adds	r0, r3, r1
 8007476:	4282      	cmp	r2, r0
 8007478:	6019      	str	r1, [r3, #0]
 800747a:	d1dd      	bne.n	8007438 <_free_r+0x24>
 800747c:	6810      	ldr	r0, [r2, #0]
 800747e:	6852      	ldr	r2, [r2, #4]
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	4401      	add	r1, r0
 8007484:	6019      	str	r1, [r3, #0]
 8007486:	e7d7      	b.n	8007438 <_free_r+0x24>
 8007488:	d902      	bls.n	8007490 <_free_r+0x7c>
 800748a:	230c      	movs	r3, #12
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	e7d3      	b.n	8007438 <_free_r+0x24>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	1821      	adds	r1, r4, r0
 8007494:	428a      	cmp	r2, r1
 8007496:	bf04      	itt	eq
 8007498:	6811      	ldreq	r1, [r2, #0]
 800749a:	6852      	ldreq	r2, [r2, #4]
 800749c:	6062      	str	r2, [r4, #4]
 800749e:	bf04      	itt	eq
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	605c      	str	r4, [r3, #4]
 80074a6:	e7c7      	b.n	8007438 <_free_r+0x24>
 80074a8:	bd38      	pop	{r3, r4, r5, pc}
 80074aa:	bf00      	nop
 80074ac:	20000120 	.word	0x20000120

080074b0 <_malloc_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	1ccd      	adds	r5, r1, #3
 80074b4:	f025 0503 	bic.w	r5, r5, #3
 80074b8:	3508      	adds	r5, #8
 80074ba:	2d0c      	cmp	r5, #12
 80074bc:	bf38      	it	cc
 80074be:	250c      	movcc	r5, #12
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	4606      	mov	r6, r0
 80074c4:	db01      	blt.n	80074ca <_malloc_r+0x1a>
 80074c6:	42a9      	cmp	r1, r5
 80074c8:	d903      	bls.n	80074d2 <_malloc_r+0x22>
 80074ca:	230c      	movs	r3, #12
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	2000      	movs	r0, #0
 80074d0:	bd70      	pop	{r4, r5, r6, pc}
 80074d2:	f000 f87d 	bl	80075d0 <__malloc_lock>
 80074d6:	4a21      	ldr	r2, [pc, #132]	; (800755c <_malloc_r+0xac>)
 80074d8:	6814      	ldr	r4, [r2, #0]
 80074da:	4621      	mov	r1, r4
 80074dc:	b991      	cbnz	r1, 8007504 <_malloc_r+0x54>
 80074de:	4c20      	ldr	r4, [pc, #128]	; (8007560 <_malloc_r+0xb0>)
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	b91b      	cbnz	r3, 80074ec <_malloc_r+0x3c>
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 f863 	bl	80075b0 <_sbrk_r>
 80074ea:	6020      	str	r0, [r4, #0]
 80074ec:	4629      	mov	r1, r5
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 f85e 	bl	80075b0 <_sbrk_r>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d124      	bne.n	8007542 <_malloc_r+0x92>
 80074f8:	230c      	movs	r3, #12
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f868 	bl	80075d2 <__malloc_unlock>
 8007502:	e7e4      	b.n	80074ce <_malloc_r+0x1e>
 8007504:	680b      	ldr	r3, [r1, #0]
 8007506:	1b5b      	subs	r3, r3, r5
 8007508:	d418      	bmi.n	800753c <_malloc_r+0x8c>
 800750a:	2b0b      	cmp	r3, #11
 800750c:	d90f      	bls.n	800752e <_malloc_r+0x7e>
 800750e:	600b      	str	r3, [r1, #0]
 8007510:	50cd      	str	r5, [r1, r3]
 8007512:	18cc      	adds	r4, r1, r3
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f85c 	bl	80075d2 <__malloc_unlock>
 800751a:	f104 000b 	add.w	r0, r4, #11
 800751e:	1d23      	adds	r3, r4, #4
 8007520:	f020 0007 	bic.w	r0, r0, #7
 8007524:	1ac3      	subs	r3, r0, r3
 8007526:	d0d3      	beq.n	80074d0 <_malloc_r+0x20>
 8007528:	425a      	negs	r2, r3
 800752a:	50e2      	str	r2, [r4, r3]
 800752c:	e7d0      	b.n	80074d0 <_malloc_r+0x20>
 800752e:	428c      	cmp	r4, r1
 8007530:	684b      	ldr	r3, [r1, #4]
 8007532:	bf16      	itet	ne
 8007534:	6063      	strne	r3, [r4, #4]
 8007536:	6013      	streq	r3, [r2, #0]
 8007538:	460c      	movne	r4, r1
 800753a:	e7eb      	b.n	8007514 <_malloc_r+0x64>
 800753c:	460c      	mov	r4, r1
 800753e:	6849      	ldr	r1, [r1, #4]
 8007540:	e7cc      	b.n	80074dc <_malloc_r+0x2c>
 8007542:	1cc4      	adds	r4, r0, #3
 8007544:	f024 0403 	bic.w	r4, r4, #3
 8007548:	42a0      	cmp	r0, r4
 800754a:	d005      	beq.n	8007558 <_malloc_r+0xa8>
 800754c:	1a21      	subs	r1, r4, r0
 800754e:	4630      	mov	r0, r6
 8007550:	f000 f82e 	bl	80075b0 <_sbrk_r>
 8007554:	3001      	adds	r0, #1
 8007556:	d0cf      	beq.n	80074f8 <_malloc_r+0x48>
 8007558:	6025      	str	r5, [r4, #0]
 800755a:	e7db      	b.n	8007514 <_malloc_r+0x64>
 800755c:	20000120 	.word	0x20000120
 8007560:	20000124 	.word	0x20000124

08007564 <_realloc_r>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	4607      	mov	r7, r0
 8007568:	4614      	mov	r4, r2
 800756a:	460e      	mov	r6, r1
 800756c:	b921      	cbnz	r1, 8007578 <_realloc_r+0x14>
 800756e:	4611      	mov	r1, r2
 8007570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007574:	f7ff bf9c 	b.w	80074b0 <_malloc_r>
 8007578:	b922      	cbnz	r2, 8007584 <_realloc_r+0x20>
 800757a:	f7ff ff4b 	bl	8007414 <_free_r>
 800757e:	4625      	mov	r5, r4
 8007580:	4628      	mov	r0, r5
 8007582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007584:	f000 f826 	bl	80075d4 <_malloc_usable_size_r>
 8007588:	42a0      	cmp	r0, r4
 800758a:	d20f      	bcs.n	80075ac <_realloc_r+0x48>
 800758c:	4621      	mov	r1, r4
 800758e:	4638      	mov	r0, r7
 8007590:	f7ff ff8e 	bl	80074b0 <_malloc_r>
 8007594:	4605      	mov	r5, r0
 8007596:	2800      	cmp	r0, #0
 8007598:	d0f2      	beq.n	8007580 <_realloc_r+0x1c>
 800759a:	4631      	mov	r1, r6
 800759c:	4622      	mov	r2, r4
 800759e:	f7ff ff15 	bl	80073cc <memcpy>
 80075a2:	4631      	mov	r1, r6
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff ff35 	bl	8007414 <_free_r>
 80075aa:	e7e9      	b.n	8007580 <_realloc_r+0x1c>
 80075ac:	4635      	mov	r5, r6
 80075ae:	e7e7      	b.n	8007580 <_realloc_r+0x1c>

080075b0 <_sbrk_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4c06      	ldr	r4, [pc, #24]	; (80075cc <_sbrk_r+0x1c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4605      	mov	r5, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	f7fa fc54 	bl	8001e68 <_sbrk>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_sbrk_r+0x1a>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_sbrk_r+0x1a>
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000364 	.word	0x20000364

080075d0 <__malloc_lock>:
 80075d0:	4770      	bx	lr

080075d2 <__malloc_unlock>:
 80075d2:	4770      	bx	lr

080075d4 <_malloc_usable_size_r>:
 80075d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d8:	1f18      	subs	r0, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfbc      	itt	lt
 80075de:	580b      	ldrlt	r3, [r1, r0]
 80075e0:	18c0      	addlt	r0, r0, r3
 80075e2:	4770      	bx	lr

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
