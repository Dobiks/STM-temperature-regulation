
ThermoregulationSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b4  080064b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064bc  080064bc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080064c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000084  08006548  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08006548  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018568  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003178  00000000  00000000  0003861c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  0003cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028981  00000000  00000000  0003de98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012295  00000000  00000000  00066819  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4395  00000000  00000000  00078aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ce43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  0016cec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006478 	.word	0x08006478

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000088 	.word	0x20000088
 8000204:	08006478 	.word	0x08006478

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	4613      	mov	r3, r2
 8000528:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 fa5e 	bl	80009ec <null_ptr_check>
 8000530:	4603      	mov	r3, r0
 8000532:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d11c      	bne.n	8000576 <bmp280_get_regs+0x5e>
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d019      	beq.n	8000576 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d103      	bne.n	8000552 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000550:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685c      	ldr	r4, [r3, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7858      	ldrb	r0, [r3, #1]
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	b29b      	uxth	r3, r3
 800055e:	7bf9      	ldrb	r1, [r7, #15]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	47a0      	blx	r4
 8000564:	4603      	mov	r3, r0
 8000566:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d004      	beq.n	800057a <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000570:	23fc      	movs	r3, #252	; 0xfc
 8000572:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000574:	e001      	b.n	800057a <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800057a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800057e:	4618      	mov	r0, r3
 8000580:	371c      	adds	r7, #28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd90      	pop	{r4, r7, pc}

08000586 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000586:	b590      	push	{r4, r7, lr}
 8000588:	b089      	sub	sp, #36	; 0x24
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4613      	mov	r3, r2
 8000594:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d901      	bls.n	80005a0 <bmp280_set_regs+0x1a>
    {
        len = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f000 fa23 	bl	80009ec <null_ptr_check>
 80005a6:	4603      	mov	r3, r0
 80005a8:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80005aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d14d      	bne.n	800064e <bmp280_set_regs+0xc8>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d04a      	beq.n	800064e <bmp280_set_regs+0xc8>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d047      	beq.n	800064e <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d041      	beq.n	8000648 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d114      	bne.n	80005fc <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	76fb      	strb	r3, [r7, #27]
 80005d6:	e00d      	b.n	80005f4 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80005d8:	7efb      	ldrb	r3, [r7, #27]
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	7efb      	ldrb	r3, [r7, #27]
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	440b      	add	r3, r1
 80005e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80005ee:	7efb      	ldrb	r3, [r7, #27]
 80005f0:	3301      	adds	r3, #1
 80005f2:	76fb      	strb	r3, [r7, #27]
 80005f4:	7efa      	ldrb	r2, [r7, #27]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3ed      	bcc.n	80005d8 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d90d      	bls.n	800061e <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f107 0110 	add.w	r1, r7, #16
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f000 fa0e 	bl	8000a2c <interleave_data>
                temp_len = ((len * 2) - 1);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29b      	uxth	r3, r3
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b29b      	uxth	r3, r3
 8000618:	3b01      	subs	r3, #1
 800061a:	83bb      	strh	r3, [r7, #28]
 800061c:	e001      	b.n	8000622 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	689c      	ldr	r4, [r3, #8]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	7858      	ldrb	r0, [r3, #1]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	7819      	ldrb	r1, [r3, #0]
 800062e:	8bbb      	ldrh	r3, [r7, #28]
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	47a0      	blx	r4
 8000636:	4603      	mov	r3, r0
 8000638:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800063a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000642:	23fc      	movs	r3, #252	; 0xfc
 8000644:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000646:	e005      	b.n	8000654 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000648:	23fd      	movs	r3, #253	; 0xfd
 800064a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800064c:	e002      	b.n	8000654 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800064e:	23ff      	movs	r3, #255	; 0xff
 8000650:	77fb      	strb	r3, [r7, #31]
 8000652:	e000      	b.n	8000656 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000654:	bf00      	nop
    }

    return rslt;
 8000656:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3724      	adds	r7, #36	; 0x24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800066a:	23e0      	movs	r3, #224	; 0xe0
 800066c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800066e:	23b6      	movs	r3, #182	; 0xb6
 8000670:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f9ba 	bl	80009ec <null_ptr_check>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10d      	bne.n	80006a0 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000684:	f107 010d 	add.w	r1, r7, #13
 8000688:	f107 000e 	add.w	r0, r7, #14
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	f7ff ff79 	bl	8000586 <bmp280_set_regs>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	2002      	movs	r0, #2
 800069e:	4798      	blx	r3
    }

    return rslt;
 80006a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 80006b4:	2305      	movs	r3, #5
 80006b6:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f997 	bl	80009ec <null_ptr_check>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80006c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d150      	bne.n	800076c <bmp280_init+0xc0>
    {
        while (try_count)
 80006ca:	e02d      	b.n	8000728 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	20d0      	movs	r0, #208	; 0xd0
 80006d4:	f7ff ff20 	bl	8000518 <bmp280_get_regs>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80006dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d11a      	bne.n	800071a <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80006e8:	2b56      	cmp	r3, #86	; 0x56
 80006ea:	d007      	beq.n	80006fc <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b57      	cmp	r3, #87	; 0x57
 80006f2:	d003      	beq.n	80006fc <bmp280_init+0x50>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b58      	cmp	r3, #88	; 0x58
 80006fa:	d10e      	bne.n	800071a <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ffb0 	bl	8000662 <bmp280_soft_reset>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8000706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d110      	bne.n	8000730 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f9b7 	bl	8000a82 <get_calib_param>
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000718:	e00a      	b.n	8000730 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	200a      	movs	r0, #10
 8000720:	4798      	blx	r3
            --try_count;
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	3b01      	subs	r3, #1
 8000726:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ce      	bne.n	80006cc <bmp280_init+0x20>
 800072e:	e000      	b.n	8000732 <bmp280_init+0x86>
                break;
 8000730:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000738:	23fe      	movs	r3, #254	; 0xfe
 800073a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d113      	bne.n	800076c <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800076c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000782:	2300      	movs	r3, #0
 8000784:	733b      	strb	r3, [r7, #12]
 8000786:	2300      	movs	r3, #0
 8000788:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800078a:	6838      	ldr	r0, [r7, #0]
 800078c:	f000 f92e 	bl	80009ec <null_ptr_check>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d137      	bne.n	800080c <bmp280_get_config+0x94>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d034      	beq.n	800080c <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80007a2:	f107 010c 	add.w	r1, r7, #12
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2202      	movs	r2, #2
 80007aa:	20f4      	movs	r0, #244	; 0xf4
 80007ac:	f7ff feb4 	bl	8000518 <bmp280_get_regs>
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80007b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d129      	bne.n	8000810 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	109b      	asrs	r3, r3, #2
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	095b      	lsrs	r3, r3, #5
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80007e0:	7b7b      	ldrb	r3, [r7, #13]
 80007e2:	109b      	asrs	r3, r3, #2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	332c      	adds	r3, #44	; 0x2c
 8000802:	6810      	ldr	r0, [r2, #0]
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	7912      	ldrb	r2, [r2, #4]
 8000808:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 800080a:	e001      	b.n	8000810 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800080c:	23ff      	movs	r3, #255	; 0xff
 800080e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000810:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f9c6 	bl	8000bbc <conf_sensor>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	6039      	str	r1, [r7, #0]
 8000844:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f000 f8d0 	bl	80009ec <null_ptr_check>
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d109      	bne.n	800086c <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f9aa 	bl	8000bbc <conf_sensor>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	f000 f8ad 	bl	80009ec <null_ptr_check>
 8000892:	4603      	mov	r3, r0
 8000894:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d133      	bne.n	8000906 <bmp280_get_uncomp_data+0x8e>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d030      	beq.n	8000906 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 80008a4:	f107 0108 	add.w	r1, r7, #8
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2206      	movs	r2, #6
 80008ac:	20f7      	movs	r0, #247	; 0xf7
 80008ae:	f7ff fe33 	bl	8000518 <bmp280_get_regs>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d120      	bne.n	8000900 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80008be:	7a3b      	ldrb	r3, [r7, #8]
 80008c0:	031a      	lsls	r2, r3, #12
 80008c2:	7a7b      	ldrb	r3, [r7, #9]
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	4313      	orrs	r3, r2
 80008c8:	7aba      	ldrb	r2, [r7, #10]
 80008ca:	0912      	lsrs	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	031a      	lsls	r2, r3, #12
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	4313      	orrs	r3, r2
 80008de:	7b7a      	ldrb	r2, [r7, #13]
 80008e0:	0912      	lsrs	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4610      	mov	r0, r2
 80008f6:	f000 fa1b 	bl	8000d30 <st_check_boundaries>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80008fe:	e004      	b.n	800090a <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8000900:	23f3      	movs	r3, #243	; 0xf3
 8000902:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000904:	e001      	b.n	800090a <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000906:	23ff      	movs	r3, #255	; 0xff
 8000908:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b088      	sub	sp, #32
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f862 	bl	80009ec <null_ptr_check>
 8000928:	4603      	mov	r3, r0
 800092a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 800092c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d150      	bne.n	80009d6 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	da00      	bge.n	800093c <bmp280_get_comp_temp_32bit+0x26>
 800093a:	3307      	adds	r3, #7
 800093c:	10db      	asrs	r3, r3, #3
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	8a1b      	ldrh	r3, [r3, #16]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800094e:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <bmp280_get_comp_temp_32bit+0x44>
 8000956:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800095a:	12db      	asrs	r3, r3, #11
 800095c:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da00      	bge.n	8000966 <bmp280_get_comp_temp_32bit+0x50>
 8000964:	330f      	adds	r3, #15
 8000966:	111b      	asrs	r3, r3, #4
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8a1b      	ldrh	r3, [r3, #16]
 800096e:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da00      	bge.n	8000978 <bmp280_get_comp_temp_32bit+0x62>
 8000976:	330f      	adds	r3, #15
 8000978:	111b      	asrs	r3, r3, #4
 800097a:	4619      	mov	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8a1b      	ldrh	r3, [r3, #16]
 8000980:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000982:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000986:	2b00      	cmp	r3, #0
 8000988:	da01      	bge.n	800098e <bmp280_get_comp_temp_32bit+0x78>
 800098a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800098e:	131b      	asrs	r3, r3, #12
 8000990:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000998:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 800099c:	2b00      	cmp	r3, #0
 800099e:	da03      	bge.n	80009a8 <bmp280_get_comp_temp_32bit+0x92>
 80009a0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80009a4:	441a      	add	r2, r3
 80009a6:	4613      	mov	r3, r2
 80009a8:	139b      	asrs	r3, r3, #14
 80009aa:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	441a      	add	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	3380      	adds	r3, #128	; 0x80
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da00      	bge.n	80009c8 <bmp280_get_comp_temp_32bit+0xb2>
 80009c6:	33ff      	adds	r3, #255	; 0xff
 80009c8:	121b      	asrs	r3, r3, #8
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	77fb      	strb	r3, [r7, #31]
 80009d4:	e004      	b.n	80009e0 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 80009dc:	23f2      	movs	r3, #242	; 0xf2
 80009de:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80009e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <null_ptr_check+0x26>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d007      	beq.n	8000a12 <null_ptr_check+0x26>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <null_ptr_check+0x26>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000a12:	23ff      	movs	r3, #255	; 0xff
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e001      	b.n	8000a1c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	75fb      	strb	r3, [r7, #23]
 8000a3e:	e016      	b.n	8000a6e <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	441a      	add	r2, r3
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	440b      	add	r3, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	441a      	add	r2, r3
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	440b      	add	r3, r1
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
 8000a6e:	7dfa      	ldrb	r2, [r7, #23]
 8000a70:	78fb      	ldrb	r3, [r7, #3]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3e4      	bcc.n	8000a40 <interleave_data+0x14>
    }
}
 8000a76:	bf00      	nop
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b08a      	sub	sp, #40	; 0x28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffa5 	bl	80009ec <null_ptr_check>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d17f      	bne.n	8000bb0 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000ab0:	f107 010c 	add.w	r1, r7, #12
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2218      	movs	r2, #24
 8000ab8:	2088      	movs	r0, #136	; 0x88
 8000aba:	f7ff fd2d 	bl	8000518 <bmp280_get_regs>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d171      	bne.n	8000bb0 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	7b3b      	ldrb	r3, [r7, #12]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000af2:	7c7b      	ldrb	r3, [r7, #17]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	7c3b      	ldrb	r3, [r7, #16]
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000b04:	7cfb      	ldrb	r3, [r7, #19]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	7cbb      	ldrb	r3, [r7, #18]
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000b18:	7d7b      	ldrb	r3, [r7, #21]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	7d3b      	ldrb	r3, [r7, #20]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	7dbb      	ldrb	r3, [r7, #22]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000b3c:	7e7b      	ldrb	r3, [r7, #25]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	7e3b      	ldrb	r3, [r7, #24]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000b4e:	7efb      	ldrb	r3, [r7, #27]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7ebb      	ldrb	r3, [r7, #26]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000b60:	7f7b      	ldrb	r3, [r7, #29]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	7f3b      	ldrb	r3, [r7, #28]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	7fbb      	ldrb	r3, [r7, #30]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000b84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000bca:	2300      	movs	r3, #0
 8000bcc:	753b      	strb	r3, [r7, #20]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000bd2:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <conf_sensor+0x170>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff07 	bl	80009ec <null_ptr_check>
 8000bde:	4603      	mov	r3, r0
 8000be0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8095 	bne.w	8000d16 <conf_sensor+0x15a>
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8091 	beq.w	8000d16 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000bf4:	f107 0114 	add.w	r1, r7, #20
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	20f4      	movs	r0, #244	; 0xf4
 8000bfe:	f7ff fc8b 	bl	8000518 <bmp280_get_regs>
 8000c02:	4603      	mov	r3, r0
 8000c04:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8086 	bne.w	8000d1c <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fd26 	bl	8000662 <bmp280_soft_reset>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d17c      	bne.n	8000d1c <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000c22:	7d3b      	ldrb	r3, [r7, #20]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000c3c:	7d3b      	ldrb	r3, [r7, #20]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	f023 031c 	bic.w	r3, r3, #28
 8000c44:	b25a      	sxtb	r2, r3
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	f003 031c 	and.w	r3, r3, #28
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000c5c:	7d7b      	ldrb	r3, [r7, #21]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	f003 031f 	and.w	r3, r3, #31
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	015b      	lsls	r3, r3, #5
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000c76:	7d7b      	ldrb	r3, [r7, #21]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	f023 031c 	bic.w	r3, r3, #28
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	f003 031c 	and.w	r3, r3, #28
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000c96:	7d7b      	ldrb	r3, [r7, #21]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000cb4:	f107 0114 	add.w	r1, r7, #20
 8000cb8:	f107 0010 	add.w	r0, r7, #16
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f7ff fc61 	bl	8000586 <bmp280_set_regs>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d125      	bne.n	8000d1c <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	332c      	adds	r3, #44	; 0x2c
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	6018      	str	r0, [r3, #0]
 8000cda:	7912      	ldrb	r2, [r2, #4]
 8000cdc:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01b      	beq.n	8000d1c <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000ce4:	7d3b      	ldrb	r3, [r7, #20]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f023 0303 	bic.w	r3, r3, #3
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000d00:	f107 0114 	add.w	r1, r7, #20
 8000d04:	f107 0010 	add.w	r0, r7, #16
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f7ff fc3b 	bl	8000586 <bmp280_set_regs>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000d14:	e002      	b.n	8000d1c <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	75fb      	strb	r3, [r7, #23]
 8000d1a:	e000      	b.n	8000d1e <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8000d1c:	bf00      	nop
    }

    return rslt;
 8000d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	08006490 	.word	0x08006490

08000d30 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd03      	ble.n	8000d4c <st_check_boundaries+0x1c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <st_check_boundaries+0x6c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	dd09      	ble.n	8000d60 <st_check_boundaries+0x30>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dd03      	ble.n	8000d5a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <st_check_boundaries+0x6c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	dd02      	ble.n	8000d60 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000d5a:	23f4      	movs	r3, #244	; 0xf4
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e015      	b.n	8000d8c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dd03      	ble.n	8000d6e <st_check_boundaries+0x3e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <st_check_boundaries+0x6c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	dd02      	ble.n	8000d74 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000d6e:	23f6      	movs	r3, #246	; 0xf6
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e00b      	b.n	8000d8c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dd03      	ble.n	8000d82 <st_check_boundaries+0x52>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <st_check_boundaries+0x6c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	dd02      	ble.n	8000d88 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000d82:	23f5      	movs	r3, #245	; 0xf5
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e001      	b.n	8000d8c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	000fffef 	.word	0x000fffef

08000da0 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fc7f 	bl	80006ac <bmp280_init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fcdd 	bl	8000778 <bmp280_get_config>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd1f 	bl	800081c <bmp280_set_config>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2003      	movs	r0, #3
 8000de6:	f7ff fd28 	bl	800083a <bmp280_set_power_mode>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	603a      	str	r2, [r7, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++) 
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e26:	e011      	b.n	8000e4c <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 8000e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	441a      	add	r2, r3
 8000e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e34:	3301      	adds	r3, #1
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e3c:	440b      	add	r3, r1
 8000e3e:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++) 
 8000e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e46:	3301      	adds	r3, #1
 8000e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8e7      	bhi.n	8000e28 <bmp280_spi_reg_write+0x2c>
  }
  
  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <bmp280_spi_reg_write+0xdc>)
 8000e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <bmp280_spi_reg_write+0xe0>)
 8000e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f001 fcd6 	bl	800281c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	f107 010c 	add.w	r1, r7, #12
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <bmp280_spi_reg_write+0xe4>)
 8000e7e:	f002 ffaf 	bl	8003de0 <HAL_SPI_Transmit>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000e8e:	e012      	b.n	8000eb6 <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8000e90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <bmp280_spi_reg_write+0xdc>)
 8000e96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <bmp280_spi_reg_write+0xe0>)
 8000ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f001 fcb8 	bl	800281c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000eac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000eb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d9e8      	bls.n	8000e90 <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 8000ebe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
    
  return (int8_t)iError;
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	b25b      	sxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	200000ec 	.word	0x200000ec

08000ee4 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	; 0x50
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	603a      	str	r2, [r7, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <bmp280_spi_reg_read+0x110>)
 8000f36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <bmp280_spi_reg_read+0x114>)
 8000f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	f001 fc69 	bl	800281c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b298      	uxth	r0, r3
 8000f50:	f107 0208 	add.w	r2, r7, #8
 8000f54:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f58:	2305      	movs	r3, #5
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4827      	ldr	r0, [pc, #156]	; (8000ffc <bmp280_spi_reg_read+0x118>)
 8000f60:	f003 f8a4 	bl	80040ac <HAL_SPI_TransmitReceive>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000f70:	e012      	b.n	8000f98 <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 8000f72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <bmp280_spi_reg_read+0x110>)
 8000f78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <bmp280_spi_reg_read+0x114>)
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f001 fc47 	bl	800281c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8000f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f92:	3301      	adds	r3, #1
 8000f94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000f98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d9e8      	bls.n	8000f72 <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000fa6:	e011      	b.n	8000fcc <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 8000fa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fba:	440a      	add	r2, r1
 8000fbc:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 8000fc2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000fcc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	88ba      	ldrh	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8e7      	bhi.n	8000fa8 <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 8000fd8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  return (int8_t)iError;
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	b25b      	sxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3748      	adds	r7, #72	; 0x48
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	200000ec 	.word	0x200000ec

08001000 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4bb3      	ldr	r3, [pc, #716]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4ab2      	ldr	r2, [pc, #712]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4bad      	ldr	r3, [pc, #692]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4aac      	ldr	r2, [pc, #688]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4baa      	ldr	r3, [pc, #680]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4ba7      	ldr	r3, [pc, #668]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4aa6      	ldr	r2, [pc, #664]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4ba4      	ldr	r3, [pc, #656]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4ba1      	ldr	r3, [pc, #644]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4aa0      	ldr	r2, [pc, #640]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b9e      	ldr	r3, [pc, #632]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b9b      	ldr	r3, [pc, #620]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b98      	ldr	r3, [pc, #608]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b95      	ldr	r3, [pc, #596]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a94      	ldr	r2, [pc, #592]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b92      	ldr	r3, [pc, #584]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a6:	4b8f      	ldr	r3, [pc, #572]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a8e      	ldr	r2, [pc, #568]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 80010ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b8c      	ldr	r3, [pc, #560]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2118      	movs	r1, #24
 80010c2:	4889      	ldr	r0, [pc, #548]	; (80012e8 <MX_GPIO_Init+0x2e8>)
 80010c4:	f001 fbaa 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2149      	movs	r1, #73	; 0x49
 80010cc:	4887      	ldr	r0, [pc, #540]	; (80012ec <MX_GPIO_Init+0x2ec>)
 80010ce:	f001 fba5 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4886      	ldr	r0, [pc, #536]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 80010d8:	f001 fba0 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f644 4181 	movw	r1, #19585	; 0x4c81
 80010e2:	4884      	ldr	r0, [pc, #528]	; (80012f4 <MX_GPIO_Init+0x2f4>)
 80010e4:	f001 fb9a 	bl	800281c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ee:	487e      	ldr	r0, [pc, #504]	; (80012e8 <MX_GPIO_Init+0x2e8>)
 80010f0:	f001 fb94 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	487f      	ldr	r0, [pc, #508]	; (80012f8 <MX_GPIO_Init+0x2f8>)
 80010fa:	f001 fb8f 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	21f0      	movs	r1, #240	; 0xf0
 8001102:	487e      	ldr	r0, [pc, #504]	; (80012fc <MX_GPIO_Init+0x2fc>)
 8001104:	f001 fb8a 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001108:	2318      	movs	r3, #24
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4872      	ldr	r0, [pc, #456]	; (80012e8 <MX_GPIO_Init+0x2e8>)
 8001120:	f001 f9d2 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	4b75      	ldr	r3, [pc, #468]	; (8001300 <MX_GPIO_Init+0x300>)
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	486c      	ldr	r0, [pc, #432]	; (80012ec <MX_GPIO_Init+0x2ec>)
 800113a:	f001 f9c5 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 800113e:	2309      	movs	r3, #9
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4865      	ldr	r0, [pc, #404]	; (80012ec <MX_GPIO_Init+0x2ec>)
 8001156:	f001 f9b7 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800115a:	2332      	movs	r3, #50	; 0x32
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	485d      	ldr	r0, [pc, #372]	; (80012ec <MX_GPIO_Init+0x2ec>)
 8001176:	f001 f9a7 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800117a:	2306      	movs	r3, #6
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4856      	ldr	r0, [pc, #344]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 8001196:	f001 f997 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800119a:	2308      	movs	r3, #8
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	484f      	ldr	r0, [pc, #316]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 80011b2:	f001 f989 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 80011b6:	2320      	movs	r3, #32
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ba:	4b52      	ldr	r3, [pc, #328]	; (8001304 <MX_GPIO_Init+0x304>)
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4849      	ldr	r0, [pc, #292]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 80011ca:	f001 f97d 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 80011ce:	2340      	movs	r3, #64	; 0x40
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d2:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <MX_GPIO_Init+0x300>)
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4843      	ldr	r0, [pc, #268]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 80011e2:	f001 f971 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80011e6:	f644 4381 	movw	r3, #19585	; 0x4c81
 80011ea:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	483d      	ldr	r0, [pc, #244]	; (80012f4 <MX_GPIO_Init+0x2f4>)
 8001200:	f001 f962 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4832      	ldr	r0, [pc, #200]	; (80012e8 <MX_GPIO_Init+0x2e8>)
 800121e:	f001 f953 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001234:	230b      	movs	r3, #11
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	482d      	ldr	r0, [pc, #180]	; (80012f4 <MX_GPIO_Init+0x2f4>)
 8001240:	f001 f942 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0x300>)
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4826      	ldr	r0, [pc, #152]	; (80012f4 <MX_GPIO_Init+0x2f4>)
 800125a:	f001 f935 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800125e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0x304>)
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4822      	ldr	r0, [pc, #136]	; (80012fc <MX_GPIO_Init+0x2fc>)
 8001274:	f001 f928 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <MX_GPIO_Init+0x2fc>)
 800128e:	f001 f91b 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <MX_GPIO_Init+0x2f8>)
 80012aa:	f001 f90d 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_GPIO_Init+0x2f8>)
 80012c2:	f001 f901 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <MX_GPIO_Init+0x2ec>)
 80012de:	f001 f8f3 	bl	80024c8 <HAL_GPIO_Init>
 80012e2:	e011      	b.n	8001308 <MX_GPIO_Init+0x308>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	10110000 	.word	0x10110000
 8001304:	10210000 	.word	0x10210000

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001308:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800131a:	230a      	movs	r3, #10
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_GPIO_Init+0x3ac>)
 8001326:	f001 f8cf 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_GPIO_Init+0x3ac>)
 8001340:	f001 f8c2 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001344:	23f0      	movs	r3, #240	; 0xf0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <MX_GPIO_Init+0x3b0>)
 800135c:	f001 f8b4 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001360:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001372:	230b      	movs	r3, #11
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_GPIO_Init+0x3b4>)
 800137e:	f001 f8a3 	bl	80024c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2017      	movs	r0, #23
 8001388:	f001 f845 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800138c:	2017      	movs	r0, #23
 800138e:	f001 f85e 	bl	800244e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2028      	movs	r0, #40	; 0x28
 8001398:	f001 f83d 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f001 f856 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021800 	.word	0x40021800

080013b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_I2C1_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_I2C1_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_I2C1_Init+0x74>)
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <MX_I2C1_Init+0x7c>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_I2C1_Init+0x74>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_I2C1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <MX_I2C1_Init+0x74>)
 80013f4:	f001 fa50 	bl	8002898 <HAL_I2C_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013fe:	f000 fa77 	bl	80018f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_I2C1_Init+0x74>)
 8001406:	f001 fad7 	bl	80029b8 <HAL_I2CEx_ConfigAnalogFilter>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001410:	f000 fa6e 	bl	80018f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_I2C1_Init+0x74>)
 8001418:	f001 fb19 	bl	8002a4e <HAL_I2CEx_ConfigDigitalFilter>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001422:	f000 fa65 	bl	80018f0 <Error_Handler>
  }

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000a0 	.word	0x200000a0
 8001430:	40005400 	.word	0x40005400
 8001434:	20404768 	.word	0x20404768

08001438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d128      	bne.n	80014ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8001472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001478:	2312      	movs	r3, #18
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001484:	2304      	movs	r3, #4
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0x84>)
 8001490:	f001 f81a 	bl	80024c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	899b      	ldrh	r3, [r3, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f001 f9a0 	bl	800281c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7d9b      	ldrb	r3, [r3, #22]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d115      	bne.n	8001510 <lcd_write_command+0x50>
  {
	if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7f1b      	ldrb	r3, [r3, #28]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <lcd_write_command+0x3c>
	{
	  lcd_write(hlcd, (command >> 4), LCD_NIB);
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2204      	movs	r2, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f842 	bl	8001580 <lcd_write>
	}
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f839 	bl	8001580 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800150e:	e005      	b.n	800151c <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2208      	movs	r2, #8
 8001514:	4619      	mov	r1, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f832 	bl	8001580 <lcd_write>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6898      	ldr	r0, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	899b      	ldrh	r3, [r3, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	4619      	mov	r1, r3
 800153c:	f001 f96e 	bl	800281c <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7d9b      	ldrb	r3, [r3, #22]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d111      	bne.n	800156c <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2204      	movs	r2, #4
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f814 	bl	8001580 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f80b 	bl	8001580 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 800156a:	e005      	b.n	8001578 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2208      	movs	r2, #8
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f804 	bl	8001580 <lcd_write>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	4613      	mov	r3, r2
 800158e:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6918      	ldr	r0, [r3, #16]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8a9b      	ldrh	r3, [r3, #20]
 8001598:	2201      	movs	r2, #1
 800159a:	4619      	mov	r1, r3
 800159c:	f001 f93e 	bl	800281c <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e019      	b.n	80015da <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	8819      	ldrh	r1, [r3, #0]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	fa42 f303 	asr.w	r3, r2, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	f001 f924 	bl	800281c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	78bb      	ldrb	r3, [r7, #2]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3e1      	bcc.n	80015a6 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6918      	ldr	r0, [r3, #16]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8a9b      	ldrh	r3, [r3, #20]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f001 f915 	bl	800281c <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 80015f2:	2132      	movs	r1, #50	; 0x32
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f804 	bl	8001602 <lcd_delay_us>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 f8a2 	bl	8004764 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 8001620:	bf00      	nop
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f8      	bhi.n	8001622 <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f8bf 	bl	80047b8 <HAL_TIM_Base_Stop>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 8001650:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffd4 	bl	8001602 <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7d9b      	ldrb	r3, [r3, #22]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d120      	bne.n	80016a4 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 8001662:	2103      	movs	r1, #3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2b 	bl	80014c0 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 800166a:	f241 0167 	movw	r1, #4199	; 0x1067
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffc7 	bl	8001602 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001674:	2103      	movs	r1, #3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff22 	bl	80014c0 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 800167c:	21c8      	movs	r1, #200	; 0xc8
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffbf 	bl	8001602 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001684:	2103      	movs	r1, #3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff1a 	bl	80014c0 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 800168c:	2102      	movs	r1, #2
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff16 	bl	80014c0 <lcd_write_command>

    hlcd->IsInitialized = 1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 800169a:	2128      	movs	r1, #40	; 0x28
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff0f 	bl	80014c0 <lcd_write_command>
 80016a2:	e01f      	b.n	80016e4 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7d9b      	ldrb	r3, [r3, #22]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d11b      	bne.n	80016e4 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80016ac:	2130      	movs	r1, #48	; 0x30
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff06 	bl	80014c0 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80016b4:	f241 0167 	movw	r1, #4199	; 0x1067
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffa2 	bl	8001602 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80016be:	2130      	movs	r1, #48	; 0x30
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fefd 	bl	80014c0 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80016c6:	21c8      	movs	r1, #200	; 0xc8
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff9a 	bl	8001602 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80016ce:	2130      	movs	r1, #48	; 0x30
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fef5 	bl	80014c0 <lcd_write_command>

	hlcd->IsInitialized = 1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80016dc:	2138      	movs	r1, #56	; 0x38
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff feee 	bl	80014c0 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80016e4:	2101      	movs	r1, #1
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff feea 	bl	80014c0 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 80016ec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff86 	bl	8001602 <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 80016f6:	210c      	movs	r1, #12
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fee1 	bl	80014c0 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 80016fe:	2106      	movs	r1, #6
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fedd 	bl	80014c0 <lcd_write_command>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e00a      	b.n	8001734 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fefb 	bl	8001524 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3301      	adds	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	7bfc      	ldrb	r4, [r7, #15]
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f7fe fd66 	bl	8000208 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	429c      	cmp	r4, r3
 8001740:	d3ed      	bcc.n	800171e <LCD_printStr+0x10>
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
	...

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001752:	f000 fd06 	bl	8002162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001756:	f000 f837 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175a:	f7ff fc51 	bl	8001000 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800175e:	f000 fc5b 	bl	8002018 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001762:	f000 f9e5 	bl	8001b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001766:	f000 fa31 	bl	8001bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 800176a:	f000 faa7 	bl	8001cbc <MX_TIM4_Init>
  MX_I2C1_Init();
 800176e:	f7ff fe23 	bl	80013b8 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001772:	f000 f8c5 	bl	8001900 <MX_SPI4_Init>
  MX_TIM5_Init();
 8001776:	f000 faf5 	bl	8001d64 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  int8_t BMP280_Status =0;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  BMP280_Status = BMP280_Init(&bmp280_1);
 800177e:	480f      	ldr	r0, [pc, #60]	; (80017bc <main+0x70>)
 8001780:	f7ff fb0e 	bl	8000da0 <BMP280_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
  LCD_Init(&hlcd1);
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <main+0x74>)
 800178a:	f7ff ff5a 	bl	8001642 <LCD_Init>
  LCD_printStr(&hlcd1, "Message");
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <main+0x78>)
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <main+0x74>)
 8001792:	f7ff ffbc 	bl	800170e <LCD_printStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reading the raw data from sensor */
	  BMP280_Status = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4908      	ldr	r1, [pc, #32]	; (80017bc <main+0x70>)
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f86c 	bl	8000878 <bmp280_get_uncomp_data>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]

	  /* Getting the 32 bit compensated temperature */
	  BMP280_Status = bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	463b      	mov	r3, r7
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <main+0x70>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f8b3 	bl	8000916 <bmp280_get_comp_temp_32bit>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	f000 fd31 	bl	800221c <HAL_Delay>
	  BMP280_Status = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 80017ba:	e7ec      	b.n	8001796 <main+0x4a>
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	20000058 	.word	0x20000058
 80017c4:	08006494 	.word	0x08006494

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0b4      	sub	sp, #208	; 0xd0
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017d2:	2230      	movs	r2, #48	; 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fe46 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2284      	movs	r2, #132	; 0x84
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fe37 	bl	8006468 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017fa:	f001 f975 	bl	8002ae8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <SystemClock_Config+0x120>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a39      	ldr	r2, [pc, #228]	; (80018e8 <SystemClock_Config+0x120>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <SystemClock_Config+0x120>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <SystemClock_Config+0x124>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a34      	ldr	r2, [pc, #208]	; (80018ec <SystemClock_Config+0x124>)
 800181c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <SystemClock_Config+0x124>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800182e:	2301      	movs	r3, #1
 8001830:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800184a:	2304      	movs	r3, #4
 800184c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001850:	23d8      	movs	r3, #216	; 0xd8
 8001852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800185c:	2303      	movs	r3, #3
 800185e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f99e 	bl	8002ba8 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001872:	f000 f83d 	bl	80018f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001876:	f001 f947 	bl	8002b08 <HAL_PWREx_EnableOverDrive>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001880:	f000 f836 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001884:	230f      	movs	r3, #15
 8001886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800189a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80018a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018aa:	2107      	movs	r1, #7
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fc1f 	bl	80030f0 <HAL_RCC_ClockConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018b8:	f000 f81a 	bl	80018f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 80018bc:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80018c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fe06 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x116>
  {
    Error_Handler();
 80018da:	f000 f809 	bl	80018f0 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	37d0      	adds	r7, #208	; 0xd0
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_SPI4_Init+0x74>)
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <MX_SPI4_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_SPI4_Init+0x74>)
 800190c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001910:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_SPI4_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_SPI4_Init+0x74>)
 800191a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800191e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_SPI4_Init+0x74>)
 8001922:	2202      	movs	r2, #2
 8001924:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_SPI4_Init+0x74>)
 8001928:	2201      	movs	r2, #1
 800192a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_SPI4_Init+0x74>)
 800192e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001932:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_SPI4_Init+0x74>)
 8001936:	2218      	movs	r2, #24
 8001938:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_SPI4_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_SPI4_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_SPI4_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_SPI4_Init+0x74>)
 800194e:	2207      	movs	r2, #7
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_SPI4_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_SPI4_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_SPI4_Init+0x74>)
 8001960:	f002 f9ac 	bl	8003cbc <HAL_SPI_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800196a:	f7ff ffc1 	bl	80018f0 <Error_Handler>
  }

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000ec 	.word	0x200000ec
 8001978:	40013400 	.word	0x40013400

0800197c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_SPI_MspInit+0x7c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d127      	bne.n	80019ee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_SPI_MspInit+0x80>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019de:	2305      	movs	r3, #5
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_SPI_MspInit+0x84>)
 80019ea:	f000 fd6d 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40013400 	.word	0x40013400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x44>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x44>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x44>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x44>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x44>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 fb9c 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001aac:	2020      	movs	r0, #32
 8001aae:	f000 fecf 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ab2:	2040      	movs	r0, #64	; 0x40
 8001ab4:	f000 fecc 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM2_IRQHandler+0x10>)
 8001ac2:	f002 ff6b 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000210 	.word	0x20000210

08001ad0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <USART3_IRQHandler+0x10>)
 8001ad6:	f003 ff17 	bl	8005908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000250 	.word	0x20000250

08001ae4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aec:	f000 feb0 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001af0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af4:	f000 feac 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001af8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001afc:	f000 fea8 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <SystemInit+0x28>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <SystemInit+0x28>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SystemInit+0x28>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b58:	226b      	movs	r2, #107	; 0x6b
 8001b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b64:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b76:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b78:	f002 fdc8 	bl	800470c <HAL_TIM_Base_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b82:	f7ff feb5 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001b94:	f003 f93a 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b9e:	f7ff fea7 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_TIM2_Init+0x98>)
 8001bb0:	f003 fdb0 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bba:	f7ff fe99 	bl	80018f0 <Error_Handler>
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000210 	.word	0x20000210

08001bcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c00:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c06:	226b      	movs	r2, #107	; 0x6b
 8001c08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c24:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c26:	f002 fd71 	bl	800470c <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c30:	f7ff fe5e 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c42:	f003 f8e3 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c4c:	f7ff fe50 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c52:	f002 fddc 	bl	800480e <HAL_TIM_PWM_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c5c:	f7ff fe48 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c70:	f003 fd50 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c7a:	f7ff fe39 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7e:	2360      	movs	r3, #96	; 0x60
 8001c80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c96:	f002 ffa1 	bl	8004bdc <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ca0:	f7ff fe26 	bl	80018f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001ca6:	f000 f97f 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3738      	adds	r7, #56	; 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001d0 	.word	0x200001d0
 8001cb8:	40000400 	.word	0x40000400

08001cbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fbcc 	bl	8006468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <MX_TIM4_Init+0xa4>)
 8001cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001cee:	2264      	movs	r2, #100	; 0x64
 8001cf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d02:	2302      	movs	r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d16:	2301      	movs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001d2a:	f002 fda5 	bl	8004878 <HAL_TIM_Encoder_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f7ff fddc 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_TIM4_Init+0xa0>)
 8001d46:	f003 fce5 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d50:	f7ff fdce 	bl	80018f0 <Error_Handler>
  }

}
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000150 	.word	0x20000150
 8001d60:	40000800 	.word	0x40000800

08001d64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <MX_TIM5_Init+0x98>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001d8a:	226b      	movs	r2, #107	; 0x6b
 8001d8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001da8:	4813      	ldr	r0, [pc, #76]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001daa:	f002 fcaf 	bl	800470c <HAL_TIM_Base_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001db4:	f7ff fd9c 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001dc6:	f003 f821 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f7ff fd8e 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_TIM5_Init+0x94>)
 8001de2:	f003 fc97 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001dec:	f7ff fd80 	bl	80018f0 <Error_Handler>
  }

}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000190 	.word	0x20000190
 8001dfc:	40000c00 	.word	0x40000c00

08001e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d114      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	201c      	movs	r0, #28
 8001e40:	f000 fae9 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e44:	201c      	movs	r0, #28
 8001e46:	f000 fb02 	bl	800244e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e4a:	e05b      	b.n	8001f04 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <HAL_TIM_Base_MspInit+0x110>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d145      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4816      	ldr	r0, [pc, #88]	; (8001f14 <HAL_TIM_Base_MspInit+0x114>)
 8001eba:	f000 fb05 	bl	80024c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 8001ebe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <HAL_TIM_Base_MspInit+0x118>)
 8001edc:	f000 faf4 	bl	80024c8 <HAL_GPIO_Init>
}
 8001ee0:	e010      	b.n	8001f04 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM5)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_TIM_Base_MspInit+0x11c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10b      	bne.n	8001f04 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_TIM_Base_MspInit+0x10c>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40000c00 	.word	0x40000c00

08001f20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d128      	bne.n	8001f94 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8001f72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f84:	2302      	movs	r3, #2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f90:	f000 fa9a 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020c00 	.word	0x40020c00

08001fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_TIM_MspPostInit+0x64>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d11b      	bne.n	8002002 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_TIM_MspPostInit+0x68>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_TIM_MspPostInit+0x68>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_TIM_MspPostInit+0x68>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_R_Pin;
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_RGB_CH_R_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_TIM_MspPostInit+0x6c>)
 8001ffe:	f000 fa63 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40000400 	.word	0x40000400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020400 	.word	0x40020400

08002018 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_USART3_UART_Init+0x58>)
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <MX_USART3_UART_Init+0x5c>)
 8002020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_USART3_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_USART3_UART_Init+0x58>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_USART3_UART_Init+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_USART3_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_USART3_UART_Init+0x58>)
 800205c:	f003 fc06 	bl	800586c <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002066:	f7ff fc43 	bl	80018f0 <Error_Handler>
  }

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000250 	.word	0x20000250
 8002074:	40004800 	.word	0x40004800

08002078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_UART_MspInit+0x8c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d130      	bne.n	80020fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_UART_MspInit+0x90>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_UART_MspInit+0x90>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_UART_MspInit+0x90>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_MspInit+0x90>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_UART_MspInit+0x90>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_UART_MspInit+0x90>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020dc:	2307      	movs	r3, #7
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <HAL_UART_MspInit+0x94>)
 80020e8:	f000 f9ee 	bl	80024c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2027      	movs	r0, #39	; 0x27
 80020f2:	f000 f990 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020f6:	2027      	movs	r0, #39	; 0x27
 80020f8:	f000 f9a9 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40004800 	.word	0x40004800
 8002108:	40023800 	.word	0x40023800
 800210c:	40020c00 	.word	0x40020c00

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
  ldr  r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800212e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213a:	f7ff fce3 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f004 f96f 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7ff fb03 	bl	800174c <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002148:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800214c:	080064c4 	.word	0x080064c4
  ldr  r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002154:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002158:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 800215c:	200002d4 	.word	0x200002d4

08002160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC_IRQHandler>

08002162 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002166:	2003      	movs	r0, #3
 8002168:	f000 f94a 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216c:	2000      	movs	r0, #0
 800216e:	f000 f805 	bl	800217c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002172:	f7ff fc47 	bl	8001a04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f965 	bl	800246a <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f92d 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000078 	.word	0x20000078
 80021d4:	20000080 	.word	0x20000080
 80021d8:	2000007c 	.word	0x2000007c

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000080 	.word	0x20000080
 8002200:	200002d0 	.word	0x200002d0

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200002d0 	.word	0x200002d0

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_Delay+0x40>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000080 	.word	0x20000080

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e00c      	b.n	80024ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e175      	b.n	80027d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8164 	bne.w	80027ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d00b      	beq.n	8002526 <HAL_GPIO_Init+0x5e>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251a:	2b11      	cmp	r3, #17
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b12      	cmp	r3, #18
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b12      	cmp	r3, #18
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80be 	beq.w	80027ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a64      	ldr	r2, [pc, #400]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800266a:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_GPIO_Init+0x324>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x328>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d037      	beq.n	8002706 <HAL_GPIO_Init+0x23e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a56      	ldr	r2, [pc, #344]	; (80027f4 <HAL_GPIO_Init+0x32c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d031      	beq.n	8002702 <HAL_GPIO_Init+0x23a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_GPIO_Init+0x330>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02b      	beq.n	80026fe <HAL_GPIO_Init+0x236>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_GPIO_Init+0x334>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_Init+0x232>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_GPIO_Init+0x338>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_Init+0x22e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x33c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x22a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a51      	ldr	r2, [pc, #324]	; (8002808 <HAL_GPIO_Init+0x340>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a50      	ldr	r2, [pc, #320]	; (800280c <HAL_GPIO_Init+0x344>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x348>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_GPIO_Init+0x34c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x21a>
 80026de:	2309      	movs	r3, #9
 80026e0:	e012      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e2:	230a      	movs	r3, #10
 80026e4:	e010      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00e      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00c      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00a      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f2:	2305      	movs	r3, #5
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e004      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fe:	2302      	movs	r3, #2
 8002700:	e002      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002706:	2300      	movs	r3, #0
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f002 0203 	and.w	r2, r2, #3
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	4093      	lsls	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002718:	4934      	ldr	r1, [pc, #208]	; (80027ec <HAL_GPIO_Init+0x324>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_GPIO_Init+0x350>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274a:	4a33      	ldr	r2, [pc, #204]	; (8002818 <HAL_GPIO_Init+0x350>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_GPIO_Init+0x350>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x350>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_GPIO_Init+0x350>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_GPIO_Init+0x350>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_GPIO_Init+0x350>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a13      	ldr	r2, [pc, #76]	; (8002818 <HAL_GPIO_Init+0x350>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f ae86 	bls.w	80024e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	3724      	adds	r7, #36	; 0x24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f806 	bl	8002880 <HAL_GPIO_EXTI_Callback>
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013c00 	.word	0x40013c00

08002880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fdba 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e006      	b.n	8002920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_I2C_Init+0x11c>)
 800293e:	430b      	orrs	r3, r1
 8002940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	ea42 0103 	orr.w	r1, r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69d9      	ldr	r1, [r3, #28]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	02008000 	.word	0x02008000

080029b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d138      	bne.n	8002a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d8:	2302      	movs	r3, #2
 80029da:	e032      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d139      	bne.n	8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e033      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2224      	movs	r2, #36	; 0x24
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b36:	f7ff fb65 	bl	8002204 <HAL_GetTick>
 8002b3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b3c:	e009      	b.n	8002b52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b3e:	f7ff fb61 	bl	8002204 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4c:	d901      	bls.n	8002b52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e022      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6c:	f7ff fb4a 	bl	8002204 <HAL_GetTick>
 8002b70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b72:	e009      	b.n	8002b88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b74:	f7ff fb46 	bl	8002204 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b82:	d901      	bls.n	8002b88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e007      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b94:	d1ee      	bne.n	8002b74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e291      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b96      	ldr	r3, [pc, #600]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd8:	4b93      	ldr	r3, [pc, #588]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
 8002be4:	4b90      	ldr	r3, [pc, #576]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x130>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e26b      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7a>
 8002c14:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x9c>
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7b      	ldr	r2, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff fabc 	bl	8002204 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fab8 	bl	8002204 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e21f      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe8>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff faa8 	bl	8002204 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff faa4 	bl	8002204 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e20b      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x110>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d069      	beq.n	8002dba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x190>
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1df      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	493d      	ldr	r1, [pc, #244]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e040      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d023      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fa5a 	bl	8002204 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7ff fa56 	bl	8002204 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1bd      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4929      	ldr	r1, [pc, #164]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	e018      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff fa36 	bl	8002204 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fa32 	bl	8002204 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e199      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d038      	beq.n	8002e38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7ff fa13 	bl	8002204 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7ff fa0f 	bl	8002204 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e176      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x23a>
 8002e00:	e01a      	b.n	8002e38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f9f9 	bl	8002204 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7ff f9f5 	bl	8002204 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d903      	bls.n	8002e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e15c      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
 8002e28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b91      	ldr	r3, [pc, #580]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a4 	beq.w	8002f8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a87      	ldr	r2, [pc, #540]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	4b82      	ldr	r3, [pc, #520]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7e      	ldr	r2, [pc, #504]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7ff f9bd 	bl	8002204 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7ff f9b9 	bl	8002204 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e120      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea0:	4b75      	ldr	r3, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x31a>
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e02d      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x33c>
 8002eca:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a69      	ldr	r2, [pc, #420]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a66      	ldr	r2, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x35e>
 8002eec:	4b61      	ldr	r3, [pc, #388]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a60      	ldr	r2, [pc, #384]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a5d      	ldr	r2, [pc, #372]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5a      	ldr	r2, [pc, #360]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7ff f96d 	bl	8002204 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7ff f969 	bl	8002204 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0ce      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ee      	beq.n	8002f2e <HAL_RCC_OscConfig+0x386>
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7ff f957 	bl	8002204 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7ff f953 	bl	8002204 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b3c      	ldr	r3, [pc, #240]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a3b      	ldr	r2, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a4 	beq.w	80030e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f98:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d06b      	beq.n	800307c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d149      	bne.n	8003040 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a30      	ldr	r2, [pc, #192]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f924 	bl	8002204 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7ff f920 	bl	8002204 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e087      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4313      	orrs	r3, r2
 8003004:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800300a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7ff f8f4 	bl	8002204 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7ff f8f0 	bl	8002204 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e057      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x478>
 800303e:	e04f      	b.n	80030e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7ff f8da 	bl	8002204 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7ff f8d6 	bl	8002204 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e03d      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x4ac>
 8003072:	e035      	b.n	80030e0 <HAL_RCC_OscConfig+0x538>
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x544>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d121      	bne.n	80030dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0d0      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d910      	bls.n	8003138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	4965      	ldr	r1, [pc, #404]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b8      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800315a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800316e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	494d      	ldr	r1, [pc, #308]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d040      	beq.n	8003214 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e073      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4936      	ldr	r1, [pc, #216]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7ff f80e 	bl	8002204 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7ff f80a 	bl	8002204 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e053      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	4922      	ldr	r1, [pc, #136]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e032      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4916      	ldr	r1, [pc, #88]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003282:	f000 f821 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003286:	4601      	mov	r1, r0
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x1cc>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	fa21 f303 	lsr.w	r3, r1, r3
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1d0>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x1d4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff6a 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00
 80032b8:	40023800 	.word	0x40023800
 80032bc:	0800649c 	.word	0x0800649c
 80032c0:	20000078 	.word	0x20000078
 80032c4:	2000007c 	.word	0x2000007c

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d007      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x32>
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d008      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x38>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 80b4 	bne.w	800345c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032f6:	60bb      	str	r3, [r7, #8]
      break;
 80032f8:	e0b3      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032fa:	4b5e      	ldr	r3, [pc, #376]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032fc:	60bb      	str	r3, [r7, #8]
      break;
 80032fe:	e0b0      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003300:	4b5a      	ldr	r3, [pc, #360]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003308:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800330a:	4b58      	ldr	r3, [pc, #352]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04a      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	f04f 0400 	mov.w	r4, #0
 8003320:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	ea03 0501 	and.w	r5, r3, r1
 800332c:	ea04 0602 	and.w	r6, r4, r2
 8003330:	4629      	mov	r1, r5
 8003332:	4632      	mov	r2, r6
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	0154      	lsls	r4, r2, #5
 800333e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	4619      	mov	r1, r3
 8003346:	4622      	mov	r2, r4
 8003348:	1b49      	subs	r1, r1, r5
 800334a:	eb62 0206 	sbc.w	r2, r2, r6
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	0194      	lsls	r4, r2, #6
 8003358:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800335c:	018b      	lsls	r3, r1, #6
 800335e:	1a5b      	subs	r3, r3, r1
 8003360:	eb64 0402 	sbc.w	r4, r4, r2
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	00e2      	lsls	r2, r4, #3
 800336e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003372:	00d9      	lsls	r1, r3, #3
 8003374:	460b      	mov	r3, r1
 8003376:	4614      	mov	r4, r2
 8003378:	195b      	adds	r3, r3, r5
 800337a:	eb44 0406 	adc.w	r4, r4, r6
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	0262      	lsls	r2, r4, #9
 8003388:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800338c:	0259      	lsls	r1, r3, #9
 800338e:	460b      	mov	r3, r1
 8003390:	4614      	mov	r4, r2
 8003392:	4618      	mov	r0, r3
 8003394:	4621      	mov	r1, r4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 0400 	mov.w	r4, #0
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc ff3a 	bl	8000218 <__aeabi_uldivmod>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e049      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b2f      	ldr	r3, [pc, #188]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	ea03 0501 	and.w	r5, r3, r1
 80033c2:	ea04 0602 	and.w	r6, r4, r2
 80033c6:	4629      	mov	r1, r5
 80033c8:	4632      	mov	r2, r6
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	0154      	lsls	r4, r2, #5
 80033d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033d8:	014b      	lsls	r3, r1, #5
 80033da:	4619      	mov	r1, r3
 80033dc:	4622      	mov	r2, r4
 80033de:	1b49      	subs	r1, r1, r5
 80033e0:	eb62 0206 	sbc.w	r2, r2, r6
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0194      	lsls	r4, r2, #6
 80033ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033f2:	018b      	lsls	r3, r1, #6
 80033f4:	1a5b      	subs	r3, r3, r1
 80033f6:	eb64 0402 	sbc.w	r4, r4, r2
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	00e2      	lsls	r2, r4, #3
 8003404:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003408:	00d9      	lsls	r1, r3, #3
 800340a:	460b      	mov	r3, r1
 800340c:	4614      	mov	r4, r2
 800340e:	195b      	adds	r3, r3, r5
 8003410:	eb44 0406 	adc.w	r4, r4, r6
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	02a2      	lsls	r2, r4, #10
 800341e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003422:	0299      	lsls	r1, r3, #10
 8003424:	460b      	mov	r3, r1
 8003426:	4614      	mov	r4, r2
 8003428:	4618      	mov	r0, r3
 800342a:	4621      	mov	r1, r4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	461a      	mov	r2, r3
 8003434:	4623      	mov	r3, r4
 8003436:	f7fc feef 	bl	8000218 <__aeabi_uldivmod>
 800343a:	4603      	mov	r3, r0
 800343c:	460c      	mov	r4, r1
 800343e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	60bb      	str	r3, [r7, #8]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800345e:	60bb      	str	r3, [r7, #8]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	68bb      	ldr	r3, [r7, #8]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200

08003478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000078 	.word	0x20000078

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003494:	f7ff fff0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8003498:	4601      	mov	r1, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	080064ac 	.word	0x080064ac

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034bc:	f7ff ffdc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034c0:	4601      	mov	r1, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0b5b      	lsrs	r3, r3, #13
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4a03      	ldr	r2, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	080064ac 	.word	0x080064ac

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	4964      	ldr	r1, [pc, #400]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	4959      	ldr	r1, [pc, #356]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	494a      	ldr	r1, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 808b 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6413      	str	r3, [r2, #64]	; 0x40
 80035d0:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fe fe0c 	bl	8002204 <HAL_GetTick>
 80035ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe fe08 	bl	8002204 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e355      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d035      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d02e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d114      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fdd0 	bl	8002204 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe fdcc 	bl	8002204 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e317      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0ee      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003696:	d111      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	4901      	ldr	r1, [pc, #4]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
 80036b8:	0ffffcff 	.word	0x0ffffcff
 80036bc:	4bb0      	ldr	r3, [pc, #704]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4aaf      	ldr	r2, [pc, #700]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	4bad      	ldr	r3, [pc, #692]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	49aa      	ldr	r1, [pc, #680]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036e6:	4ba6      	ldr	r3, [pc, #664]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ec:	4aa4      	ldr	r2, [pc, #656]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036f6:	4ba2      	ldr	r3, [pc, #648]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	499f      	ldr	r1, [pc, #636]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003714:	4b9a      	ldr	r3, [pc, #616]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003722:	4997      	ldr	r1, [pc, #604]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003736:	4b92      	ldr	r3, [pc, #584]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003744:	498e      	ldr	r1, [pc, #568]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003758:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003766:	4986      	ldr	r1, [pc, #536]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377a:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	497d      	ldr	r1, [pc, #500]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800379c:	4b78      	ldr	r3, [pc, #480]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4975      	ldr	r1, [pc, #468]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037be:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f023 020c 	bic.w	r2, r3, #12
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	496c      	ldr	r1, [pc, #432]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e0:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	4964      	ldr	r1, [pc, #400]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	495b      	ldr	r1, [pc, #364]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003824:	4b56      	ldr	r3, [pc, #344]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	4953      	ldr	r1, [pc, #332]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003846:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	494a      	ldr	r1, [pc, #296]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	4942      	ldr	r1, [pc, #264]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	4939      	ldr	r1, [pc, #228]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	4931      	ldr	r1, [pc, #196]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d011      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	4928      	ldr	r1, [pc, #160]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	4918      	ldr	r1, [pc, #96]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	490f      	ldr	r1, [pc, #60]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d005      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003956:	f040 80d8 	bne.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a08      	ldr	r2, [pc, #32]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003966:	f7fe fc4d 	bl	8002204 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800396e:	f7fe fc49 	bl	8002204 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d903      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e196      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003980:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ee      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d021      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039a4:	4b64      	ldr	r3, [pc, #400]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b8:	0e1b      	lsrs	r3, r3, #24
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	071b      	lsls	r3, r3, #28
 80039d8:	4957      	ldr	r1, [pc, #348]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02e      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0a:	d129      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	0f1b      	lsrs	r3, r3, #28
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	019a      	lsls	r2, r3, #6
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	071b      	lsls	r3, r3, #28
 8003a40:	493d      	ldr	r1, [pc, #244]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4e:	f023 021f 	bic.w	r2, r3, #31
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	3b01      	subs	r3, #1
 8003a58:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	0e1b      	lsrs	r3, r3, #24
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a80:	0f1b      	lsrs	r3, r3, #28
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	019a      	lsls	r2, r3, #6
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	071b      	lsls	r3, r3, #28
 8003aa0:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	019a      	lsls	r2, r3, #6
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	071b      	lsls	r3, r3, #28
 8003ad0:	4919      	ldr	r1, [pc, #100]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fe fb8e 	bl	8002204 <HAL_GetTick>
 8003ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aec:	f7fe fb8a 	bl	8002204 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0d7      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	f040 80cd 	bne.w	8003cac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1e:	f7fe fb71 	bl	8002204 <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b26:	f7fe fb6d 	bl	8002204 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	; 0x64
 8003b32:	d903      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0ba      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003b38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b3c:	4b5e      	ldr	r3, [pc, #376]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d0ed      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02e      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d12a      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	0f1b      	lsrs	r3, r3, #28
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	019a      	lsls	r2, r3, #6
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	071b      	lsls	r3, r3, #28
 8003ba6:	4944      	ldr	r1, [pc, #272]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	493d      	ldr	r1, [pc, #244]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bdc:	d11d      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	0e1b      	lsrs	r3, r3, #24
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bec:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	0f1b      	lsrs	r3, r3, #28
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	019a      	lsls	r2, r3, #6
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	4929      	ldr	r1, [pc, #164]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d028      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	0e1b      	lsrs	r3, r3, #24
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	019a      	lsls	r2, r3, #6
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4911      	ldr	r1, [pc, #68]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fe fabe 	bl	8002204 <HAL_GetTick>
 8003c88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c8c:	f7fe faba 	bl	8002204 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e007      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003caa:	d1ef      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800

08003cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e084      	b.n	8003dd8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd fe47 	bl	800197c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d0e:	d902      	bls.n	8003d16 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e002      	b.n	8003d1c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d24:	d007      	beq.n	8003d36 <HAL_SPI_Init+0x7a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d46:	d903      	bls.n	8003d50 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4e:	e002      	b.n	8003d56 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	ea42 0103 	orr.w	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	f003 0204 	and.w	r2, r3, #4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	ea42 0103 	orr.w	r1, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_Transmit+0x22>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e150      	b.n	80040a4 <HAL_SPI_Transmit+0x2c4>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0a:	f7fe f9fb 	bl	8002204 <HAL_GetTick>
 8003e0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e24:	e135      	b.n	8004092 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Transmit+0x52>
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e36:	e12c      	b.n	8004092 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e82:	d107      	bne.n	8003e94 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d007      	beq.n	8003eb2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eba:	d94b      	bls.n	8003f54 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_Transmit+0xea>
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d13e      	bne.n	8003f48 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eee:	e02b      	b.n	8003f48 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d112      	bne.n	8003f24 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f22:	e011      	b.n	8003f48 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f24:	f7fe f96e 	bl	8002204 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d803      	bhi.n	8003f3c <HAL_SPI_Transmit+0x15c>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d102      	bne.n	8003f42 <HAL_SPI_Transmit+0x162>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f46:	e0a4      	b.n	8004092 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ce      	bne.n	8003ef0 <HAL_SPI_Transmit+0x110>
 8003f52:	e07c      	b.n	800404e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_Transmit+0x182>
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d170      	bne.n	8004044 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d912      	bls.n	8003f92 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b02      	subs	r3, #2
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f90:	e058      	b.n	8004044 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fb8:	e044      	b.n	8004044 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d12b      	bne.n	8004020 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d912      	bls.n	8003ff8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b02      	subs	r3, #2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ff6:	e025      	b.n	8004044 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800401e:	e011      	b.n	8004044 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004020:	f7fe f8f0 	bl	8002204 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d803      	bhi.n	8004038 <HAL_SPI_Transmit+0x258>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d102      	bne.n	800403e <HAL_SPI_Transmit+0x25e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004042:	e026      	b.n	8004092 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1b5      	bne.n	8003fba <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fb14 	bl	8004680 <SPI_EndRxTxTransaction>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e000      	b.n	8004092 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ba:	2301      	movs	r3, #1
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x26>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e1fb      	b.n	80044ca <HAL_SPI_TransmitReceive+0x41e>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040da:	f7fe f893 	bl	8002204 <HAL_GetTick>
 80040de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d00e      	beq.n	800411a <HAL_SPI_TransmitReceive+0x6e>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004102:	d106      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x66>
 800410c:	7efb      	ldrb	r3, [r7, #27]
 800410e:	2b04      	cmp	r3, #4
 8004110:	d003      	beq.n	800411a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004118:	e1cd      	b.n	80044b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_SPI_TransmitReceive+0x80>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_TransmitReceive+0x80>
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004132:	e1c0      	b.n	80044b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b04      	cmp	r3, #4
 800413e:	d003      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2205      	movs	r2, #5
 8004144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	887a      	ldrh	r2, [r7, #2]
 800416e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418a:	d802      	bhi.n	8004192 <HAL_SPI_TransmitReceive+0xe6>
 800418c:	8a3b      	ldrh	r3, [r7, #16]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d908      	bls.n	80041a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	e007      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d007      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041da:	d97c      	bls.n	80042d6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x13e>
 80041e4:	8a7b      	ldrh	r3, [r7, #18]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d169      	bne.n	80042be <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	881a      	ldrh	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420e:	e056      	b.n	80042be <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d11b      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x1aa>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d016      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x1aa>
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	2b01      	cmp	r3, #1
 800422c:	d113      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	881a      	ldrh	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	1c9a      	adds	r2, r3, #2
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d11c      	bne.n	800429e <HAL_SPI_TransmitReceive+0x1f2>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d016      	beq.n	800429e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	b292      	uxth	r2, r2
 800427c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800429a:	2301      	movs	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429e:	f7fd ffb1 	bl	8002204 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d807      	bhi.n	80042be <HAL_SPI_TransmitReceive+0x212>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d003      	beq.n	80042be <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042bc:	e0fb      	b.n	80044b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1a3      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x164>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d19d      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x164>
 80042d4:	e0df      	b.n	8004496 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x23a>
 80042de:	8a7b      	ldrh	r3, [r7, #18]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f040 80cb 	bne.w	800447c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d912      	bls.n	8004316 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	1c9a      	adds	r2, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b02      	subs	r3, #2
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004314:	e0b2      	b.n	800447c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433c:	e09e      	b.n	800447c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d134      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x30a>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02f      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x30a>
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2b01      	cmp	r3, #1
 800435a:	d12c      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d912      	bls.n	800438c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b02      	subs	r3, #2
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800438a:	e012      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d148      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x3aa>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d042      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d923      	bls.n	8004424 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	b292      	uxth	r2, r2
 80043e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d81f      	bhi.n	8004452 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e016      	b.n	8004452 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f103 020c 	add.w	r2, r3, #12
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004456:	f7fd fed5 	bl	8002204 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004462:	429a      	cmp	r2, r3
 8004464:	d803      	bhi.n	800446e <HAL_SPI_TransmitReceive+0x3c2>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d102      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x3c8>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800447a:	e01c      	b.n	80044b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	f47f af5b 	bne.w	800433e <HAL_SPI_TransmitReceive+0x292>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	f47f af54 	bne.w	800433e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8f0 	bl	8004680 <SPI_EndRxTxTransaction>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d006      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
 80044b2:	e000      	b.n	80044b6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80044b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e2:	e04c      	b.n	800457e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d048      	beq.n	800457e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044ec:	f7fd fe8a 	bl	8002204 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d902      	bls.n	8004502 <SPI_WaitFlagStateUntilTimeout+0x30>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d13d      	bne.n	800457e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004510:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451a:	d111      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004524:	d004      	beq.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452e:	d107      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004548:	d10f      	bne.n	800456a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004568:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e00f      	b.n	800459e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	429a      	cmp	r2, r3
 800459a:	d1a3      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80045b4:	e057      	b.n	8004666 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045bc:	d106      	bne.n	80045cc <SPI_WaitFifoStateUntilTimeout+0x26>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d103      	bne.n	80045cc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d048      	beq.n	8004666 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045d4:	f7fd fe16 	bl	8002204 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <SPI_WaitFifoStateUntilTimeout+0x44>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13d      	bne.n	8004666 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d111      	bne.n	8004628 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d004      	beq.n	8004618 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d107      	bne.n	8004628 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d10f      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e008      	b.n	8004678 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d19f      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff ff84 	bl	80045a6 <SPI_WaitFifoStateUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e027      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff ff07 	bl	80044d2 <SPI_WaitFlagStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e014      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff5d 	bl	80045a6 <SPI_WaitFifoStateUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e000      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e01d      	b.n	800475a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fb64 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 fc4a 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_TIM_Base_Start+0x50>)
 800477c:	4013      	ands	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d00b      	beq.n	800479e <HAL_TIM_Base_Start+0x3a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478c:	d007      	beq.n	800479e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	00010007 	.word	0x00010007

080047b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_TIM_Base_Stop+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	f240 4344 	movw	r3, #1092	; 0x444
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_Base_Stop+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e01d      	b.n	800485c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f815 	bl	8004864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fbc9 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e07b      	b.n	8004984 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fd fb3d 	bl	8001f20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b34      	ldr	r3, [pc, #208]	; (800498c <HAL_TIM_Encoder_Init+0x114>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fb8b 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_TIM_Encoder_Init+0x118>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	4313      	orrs	r3, r2
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_TIM_Encoder_Init+0x11c>)
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_TIM_Encoder_Init+0x120>)
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4313      	orrs	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	011a      	lsls	r2, r3, #4
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	031b      	lsls	r3, r3, #12
 8004938:	4313      	orrs	r3, r2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4313      	orrs	r3, r2
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	fffebff8 	.word	0xfffebff8
 8004990:	fffffcfc 	.word	0xfffffcfc
 8004994:	fffff3f3 	.word	0xfffff3f3
 8004998:	ffff0f0f 	.word	0xffff0f0f

0800499c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0202 	mvn.w	r2, #2
 80049c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fae2 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fad4 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fae5 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0204 	mvn.w	r2, #4
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fab8 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 faaa 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fabb 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0208 	mvn.w	r2, #8
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2204      	movs	r2, #4
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa8e 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa80 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa91 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0210 	mvn.w	r2, #16
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa64 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa56 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa67 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0201 	mvn.w	r2, #1
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa30 	bl	8004f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe7c 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	d10e      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fe6f 	bl	8005858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d10e      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa15 	bl	8004fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d10e      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d107      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f06f 0220 	mvn.w	r2, #32
 8004bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fe2f 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e105      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b14      	cmp	r3, #20
 8004c0a:	f200 80f0 	bhi.w	8004dee <HAL_TIM_PWM_ConfigChannel+0x212>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004def 	.word	0x08004def
 8004c1c:	08004def 	.word	0x08004def
 8004c20:	08004def 	.word	0x08004def
 8004c24:	08004ca9 	.word	0x08004ca9
 8004c28:	08004def 	.word	0x08004def
 8004c2c:	08004def 	.word	0x08004def
 8004c30:	08004def 	.word	0x08004def
 8004c34:	08004ceb 	.word	0x08004ceb
 8004c38:	08004def 	.word	0x08004def
 8004c3c:	08004def 	.word	0x08004def
 8004c40:	08004def 	.word	0x08004def
 8004c44:	08004d2b 	.word	0x08004d2b
 8004c48:	08004def 	.word	0x08004def
 8004c4c:	08004def 	.word	0x08004def
 8004c50:	08004def 	.word	0x08004def
 8004c54:	08004d6d 	.word	0x08004d6d
 8004c58:	08004def 	.word	0x08004def
 8004c5c:	08004def 	.word	0x08004def
 8004c60:	08004def 	.word	0x08004def
 8004c64:	08004dad 	.word	0x08004dad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fa58 	bl	8005124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
      break;
 8004ca6:	e0a3      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 faaa 	bl	8005208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
      break;
 8004ce8:	e082      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fb01 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
      break;
 8004d28:	e062      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb57 	bl	80053e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e041      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fb8e 	bl	8005494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0208 	orr.w	r2, r2, #8
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0204 	bic.w	r2, r2, #4
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004daa:	e021      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fbc0 	bl	8005538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	021a      	lsls	r2, r3, #8
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004dee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_ConfigClockSource+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0a6      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x166>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <HAL_TIM_ConfigClockSource+0x170>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d067      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0x120>
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d80b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x6c>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d073      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x140>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d802      	bhi.n	8004e6e <HAL_TIM_ConfigClockSource+0x62>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d06f      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e6c:	e078      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d06c      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x140>
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d06a      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e76:	e073      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d00d      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0x8c>
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d804      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x7e>
 8004e80:	2b50      	cmp	r3, #80	; 0x50
 8004e82:	d033      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0xe0>
 8004e84:	2b60      	cmp	r3, #96	; 0x60
 8004e86:	d041      	beq.n	8004f0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e88:	e06a      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d066      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x152>
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e94:	d017      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e96:	e063      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f000 fc14 	bl	80056d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	609a      	str	r2, [r3, #8]
      break;
 8004ec4:	e04c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6899      	ldr	r1, [r3, #8]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f000 fbfd 	bl	80056d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee8:	609a      	str	r2, [r3, #8]
      break;
 8004eea:	e039      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f000 fb71 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2150      	movs	r1, #80	; 0x50
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fbca 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f0a:	e029      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f000 fb90 	bl	800563e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2160      	movs	r1, #96	; 0x60
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fbba 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f2a:	e019      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f000 fb51 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2140      	movs	r1, #64	; 0x40
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fbaa 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f4a:	e009      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fba1 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e000      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	fffeff88 	.word	0xfffeff88

08004f80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3d      	ldr	r2, [pc, #244]	; (80050fc <TIM_Base_SetConfig+0x118>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <TIM_Base_SetConfig+0x11c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3b      	ldr	r2, [pc, #236]	; (8005104 <TIM_Base_SetConfig+0x120>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3a      	ldr	r2, [pc, #232]	; (8005108 <TIM_Base_SetConfig+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d027      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <TIM_Base_SetConfig+0x118>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d023      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <TIM_Base_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <TIM_Base_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a29      	ldr	r2, [pc, #164]	; (8005108 <TIM_Base_SetConfig+0x124>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <TIM_Base_SetConfig+0x128>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a27      	ldr	r2, [pc, #156]	; (8005110 <TIM_Base_SetConfig+0x12c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_Base_SetConfig+0x130>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0x134>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a24      	ldr	r2, [pc, #144]	; (800511c <TIM_Base_SetConfig+0x138>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <TIM_Base_SetConfig+0x13c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d103      	bne.n	80050e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40010400 	.word	0x40010400
 800510c:	40014000 	.word	0x40014000
 8005110:	40014400 	.word	0x40014400
 8005114:	40014800 	.word	0x40014800
 8005118:	40001800 	.word	0x40001800
 800511c:	40001c00 	.word	0x40001c00
 8005120:	40002000 	.word	0x40002000

08005124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <TIM_OC1_SetConfig+0xd8>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_OC1_SetConfig+0x64>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a20      	ldr	r2, [pc, #128]	; (8005204 <TIM_OC1_SetConfig+0xe0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10c      	bne.n	80051a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0308 	bic.w	r3, r3, #8
 800518e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <TIM_OC1_SetConfig+0xdc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC1_SetConfig+0x8e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <TIM_OC1_SetConfig+0xe0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	fffeff8f 	.word	0xfffeff8f
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400

08005208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <TIM_OC2_SetConfig+0xe4>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x68>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <TIM_OC2_SetConfig+0xec>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10d      	bne.n	800528c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC2_SetConfig+0x94>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <TIM_OC2_SetConfig+0xec>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d113      	bne.n	80052c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	feff8fff 	.word	0xfeff8fff
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <TIM_OC3_SetConfig+0xe0>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC3_SetConfig+0x66>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_OC3_SetConfig+0xe8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10d      	bne.n	800537a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0x92>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC3_SetConfig+0xe8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	fffeff8f 	.word	0xfffeff8f
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <TIM_OC4_SetConfig+0xa4>)
 8005410:	4013      	ands	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	031b      	lsls	r3, r3, #12
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <TIM_OC4_SetConfig+0xa8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC4_SetConfig+0x68>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <TIM_OC4_SetConfig+0xac>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d109      	bne.n	8005460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	feff8fff 	.word	0xfeff8fff
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400

08005494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4b1b      	ldr	r3, [pc, #108]	; (800552c <TIM_OC5_SetConfig+0x98>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a12      	ldr	r2, [pc, #72]	; (8005530 <TIM_OC5_SetConfig+0x9c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC5_SetConfig+0x5e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a11      	ldr	r2, [pc, #68]	; (8005534 <TIM_OC5_SetConfig+0xa0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d109      	bne.n	8005506 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	fffeff8f 	.word	0xfffeff8f
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <TIM_OC6_SetConfig+0x9c>)
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	051b      	lsls	r3, r3, #20
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <TIM_OC6_SetConfig+0xa0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC6_SetConfig+0x60>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <TIM_OC6_SetConfig+0xa4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	feff8fff 	.word	0xfeff8fff
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0210 	bic.w	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e06d      	b.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a20      	ldr	r2, [pc, #128]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d022      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d01d      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a15      	ldr	r2, [pc, #84]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40010000 	.word	0x40010000
 8005818:	40010400 	.word	0x40010400
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e040      	b.n	8005900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fbf2 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f972 	bl	8005b94 <UART_SetConfig>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e022      	b.n	8005900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fc10 	bl	80060e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fc97 	bl	800622c <UART_CheckIdleState>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f640 030f 	movw	r3, #2063	; 0x80f
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d113      	bne.n	8005960 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d009      	beq.n	8005960 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8100 	beq.w	8005b56 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
      }
      return;
 800595e:	e0fa      	b.n	8005b56 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80d5 	beq.w	8005b12 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80ca 	beq.w	8005b12 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <HAL_UART_IRQHandler+0x9e>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2201      	movs	r2, #1
 8005998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599e:	f043 0201 	orr.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00e      	beq.n	80059ce <HAL_UART_IRQHandler+0xc6>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2202      	movs	r2, #2
 80059c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <HAL_UART_IRQHandler+0xee>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2204      	movs	r2, #4
 80059e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ee:	f043 0202 	orr.w	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d013      	beq.n	8005a28 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a20:	f043 0208 	orr.w	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <HAL_UART_IRQHandler+0x14a>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d07f      	beq.n	8005b5a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a82:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d004      	beq.n	8005a9c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d031      	beq.n	8005b00 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fc6f 	bl	8006380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d123      	bne.n	8005af8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <HAL_UART_IRQHandler+0x260>)
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fc fcd4 	bl	8002482 <HAL_DMA_Abort_IT>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d016      	beq.n	8005b0e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aee:	e00e      	b.n	8005b0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f845 	bl	8005b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af6:	e00a      	b.n	8005b0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f841 	bl	8005b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afe:	e006      	b.n	8005b0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f83d 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005b0c:	e025      	b.n	8005b5a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	bf00      	nop
    return;
 8005b10:	e023      	b.n	8005b5a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d017      	beq.n	8005b5e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
    }
    return;
 8005b36:	e012      	b.n	8005b5e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <HAL_UART_IRQHandler+0x258>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc4d 	bl	80063ec <UART_EndTransmit_IT>
    return;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <HAL_UART_IRQHandler+0x258>
      return;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_UART_IRQHandler+0x258>
    return;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_UART_IRQHandler+0x258>
    return;
 8005b5e:	bf00      	nop
  }

}
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	080063c1 	.word	0x080063c1

08005b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4bb1      	ldr	r3, [pc, #708]	; (8005e88 <UART_SetConfig+0x2f4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	6939      	ldr	r1, [r7, #16]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a9f      	ldr	r2, [pc, #636]	; (8005e8c <UART_SetConfig+0x2f8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d121      	bne.n	8005c58 <UART_SetConfig+0xc4>
 8005c14:	4b9e      	ldr	r3, [pc, #632]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d816      	bhi.n	8005c50 <UART_SetConfig+0xbc>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x94>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c3f 	.word	0x08005c3f
 8005c34:	08005c4b 	.word	0x08005c4b
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e151      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e14e      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005c44:	2304      	movs	r3, #4
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e14b      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e148      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005c50:	2310      	movs	r3, #16
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	bf00      	nop
 8005c56:	e144      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a8d      	ldr	r2, [pc, #564]	; (8005e94 <UART_SetConfig+0x300>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d134      	bne.n	8005ccc <UART_SetConfig+0x138>
 8005c62:	4b8b      	ldr	r3, [pc, #556]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d829      	bhi.n	8005cc4 <UART_SetConfig+0x130>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <UART_SetConfig+0xe4>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005cb3 	.word	0x08005cb3
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cc5 	.word	0x08005cc5
 8005ca8:	08005cbf 	.word	0x08005cbf
 8005cac:	2300      	movs	r3, #0
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e117      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e114      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e111      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	77fb      	strb	r3, [r7, #31]
 8005cc2:	e10e      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	bf00      	nop
 8005cca:	e10a      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a71      	ldr	r2, [pc, #452]	; (8005e98 <UART_SetConfig+0x304>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d120      	bne.n	8005d18 <UART_SetConfig+0x184>
 8005cd6:	4b6e      	ldr	r3, [pc, #440]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d00f      	beq.n	8005d04 <UART_SetConfig+0x170>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d802      	bhi.n	8005cee <UART_SetConfig+0x15a>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <UART_SetConfig+0x164>
 8005cec:	e010      	b.n	8005d10 <UART_SetConfig+0x17c>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d005      	beq.n	8005cfe <UART_SetConfig+0x16a>
 8005cf2:	2b30      	cmp	r3, #48	; 0x30
 8005cf4:	d009      	beq.n	8005d0a <UART_SetConfig+0x176>
 8005cf6:	e00b      	b.n	8005d10 <UART_SetConfig+0x17c>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e0f1      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e0ee      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d04:	2304      	movs	r3, #4
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e0eb      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e0e8      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	bf00      	nop
 8005d16:	e0e4      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5f      	ldr	r2, [pc, #380]	; (8005e9c <UART_SetConfig+0x308>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d120      	bne.n	8005d64 <UART_SetConfig+0x1d0>
 8005d22:	4b5b      	ldr	r3, [pc, #364]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d00f      	beq.n	8005d50 <UART_SetConfig+0x1bc>
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d802      	bhi.n	8005d3a <UART_SetConfig+0x1a6>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <UART_SetConfig+0x1b0>
 8005d38:	e010      	b.n	8005d5c <UART_SetConfig+0x1c8>
 8005d3a:	2b80      	cmp	r3, #128	; 0x80
 8005d3c:	d005      	beq.n	8005d4a <UART_SetConfig+0x1b6>
 8005d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d40:	d009      	beq.n	8005d56 <UART_SetConfig+0x1c2>
 8005d42:	e00b      	b.n	8005d5c <UART_SetConfig+0x1c8>
 8005d44:	2300      	movs	r3, #0
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e0cb      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e0c8      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d50:	2304      	movs	r3, #4
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e0c5      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d56:	2308      	movs	r3, #8
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e0c2      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	bf00      	nop
 8005d62:	e0be      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4d      	ldr	r2, [pc, #308]	; (8005ea0 <UART_SetConfig+0x30c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d124      	bne.n	8005db8 <UART_SetConfig+0x224>
 8005d6e:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7c:	d012      	beq.n	8005da4 <UART_SetConfig+0x210>
 8005d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d82:	d802      	bhi.n	8005d8a <UART_SetConfig+0x1f6>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <UART_SetConfig+0x204>
 8005d88:	e012      	b.n	8005db0 <UART_SetConfig+0x21c>
 8005d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8e:	d006      	beq.n	8005d9e <UART_SetConfig+0x20a>
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d94:	d009      	beq.n	8005daa <UART_SetConfig+0x216>
 8005d96:	e00b      	b.n	8005db0 <UART_SetConfig+0x21c>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e0a1      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e09e      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005da4:	2304      	movs	r3, #4
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e09b      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005daa:	2308      	movs	r3, #8
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e098      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	bf00      	nop
 8005db6:	e094      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a39      	ldr	r2, [pc, #228]	; (8005ea4 <UART_SetConfig+0x310>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d124      	bne.n	8005e0c <UART_SetConfig+0x278>
 8005dc2:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d012      	beq.n	8005df8 <UART_SetConfig+0x264>
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	d802      	bhi.n	8005dde <UART_SetConfig+0x24a>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <UART_SetConfig+0x258>
 8005ddc:	e012      	b.n	8005e04 <UART_SetConfig+0x270>
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d006      	beq.n	8005df2 <UART_SetConfig+0x25e>
 8005de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de8:	d009      	beq.n	8005dfe <UART_SetConfig+0x26a>
 8005dea:	e00b      	b.n	8005e04 <UART_SetConfig+0x270>
 8005dec:	2301      	movs	r3, #1
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e077      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e074      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e071      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e06e      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	bf00      	nop
 8005e0a:	e06a      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <UART_SetConfig+0x314>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d124      	bne.n	8005e60 <UART_SetConfig+0x2cc>
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d012      	beq.n	8005e4c <UART_SetConfig+0x2b8>
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2a:	d802      	bhi.n	8005e32 <UART_SetConfig+0x29e>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <UART_SetConfig+0x2ac>
 8005e30:	e012      	b.n	8005e58 <UART_SetConfig+0x2c4>
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	d006      	beq.n	8005e46 <UART_SetConfig+0x2b2>
 8005e38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e3c:	d009      	beq.n	8005e52 <UART_SetConfig+0x2be>
 8005e3e:	e00b      	b.n	8005e58 <UART_SetConfig+0x2c4>
 8005e40:	2300      	movs	r3, #0
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e04d      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e04a      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e047      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e52:	2308      	movs	r3, #8
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e044      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	bf00      	nop
 8005e5e:	e040      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <UART_SetConfig+0x318>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d139      	bne.n	8005ede <UART_SetConfig+0x34a>
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <UART_SetConfig+0x2fc>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e78:	d027      	beq.n	8005eca <UART_SetConfig+0x336>
 8005e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7e:	d817      	bhi.n	8005eb0 <UART_SetConfig+0x31c>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01c      	beq.n	8005ebe <UART_SetConfig+0x32a>
 8005e84:	e027      	b.n	8005ed6 <UART_SetConfig+0x342>
 8005e86:	bf00      	nop
 8005e88:	efff69f3 	.word	0xefff69f3
 8005e8c:	40011000 	.word	0x40011000
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40004400 	.word	0x40004400
 8005e98:	40004800 	.word	0x40004800
 8005e9c:	40004c00 	.word	0x40004c00
 8005ea0:	40005000 	.word	0x40005000
 8005ea4:	40011400 	.word	0x40011400
 8005ea8:	40007800 	.word	0x40007800
 8005eac:	40007c00 	.word	0x40007c00
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d006      	beq.n	8005ec4 <UART_SetConfig+0x330>
 8005eb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eba:	d009      	beq.n	8005ed0 <UART_SetConfig+0x33c>
 8005ebc:	e00b      	b.n	8005ed6 <UART_SetConfig+0x342>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e00e      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e00b      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e008      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e005      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	bf00      	nop
 8005edc:	e001      	b.n	8005ee2 <UART_SetConfig+0x34e>
 8005ede:	2310      	movs	r3, #16
 8005ee0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eea:	d17f      	bne.n	8005fec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d85c      	bhi.n	8005fac <UART_SetConfig+0x418>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x364>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f3d 	.word	0x08005f3d
 8005f00:	08005f5d 	.word	0x08005f5d
 8005f04:	08005fad 	.word	0x08005fad
 8005f08:	08005f75 	.word	0x08005f75
 8005f0c:	08005fad 	.word	0x08005fad
 8005f10:	08005fad 	.word	0x08005fad
 8005f14:	08005fad 	.word	0x08005fad
 8005f18:	08005f95 	.word	0x08005f95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f7fd fab8 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8005f20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	005a      	lsls	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	61bb      	str	r3, [r7, #24]
        break;
 8005f3a:	e03a      	b.n	8005fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fd fabc 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 8005f40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	005a      	lsls	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	61bb      	str	r3, [r7, #24]
        break;
 8005f5a:	e02a      	b.n	8005fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	085a      	lsrs	r2, r3, #1
 8005f62:	4b5f      	ldr	r3, [pc, #380]	; (80060e0 <UART_SetConfig+0x54c>)
 8005f64:	4413      	add	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6852      	ldr	r2, [r2, #4]
 8005f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	61bb      	str	r3, [r7, #24]
        break;
 8005f72:	e01e      	b.n	8005fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f74:	f7fd f9a8 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8005f78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	005a      	lsls	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	61bb      	str	r3, [r7, #24]
        break;
 8005f92:	e00e      	b.n	8005fb2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	61bb      	str	r3, [r7, #24]
        break;
 8005faa:	e002      	b.n	8005fb2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
        break;
 8005fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d916      	bls.n	8005fe6 <UART_SetConfig+0x452>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d212      	bcs.n	8005fe6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f023 030f 	bic.w	r3, r3, #15
 8005fc8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	897a      	ldrh	r2, [r7, #10]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e070      	b.n	80060c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
 8005fea:	e06d      	b.n	80060c8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005fec:	7ffb      	ldrb	r3, [r7, #31]
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d859      	bhi.n	80060a6 <UART_SetConfig+0x512>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x464>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	0800603b 	.word	0x0800603b
 8006000:	08006059 	.word	0x08006059
 8006004:	080060a7 	.word	0x080060a7
 8006008:	08006071 	.word	0x08006071
 800600c:	080060a7 	.word	0x080060a7
 8006010:	080060a7 	.word	0x080060a7
 8006014:	080060a7 	.word	0x080060a7
 8006018:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7fd fa38 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8006020:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	085a      	lsrs	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	fbb2 f3f3 	udiv	r3, r2, r3
 8006034:	b29b      	uxth	r3, r3
 8006036:	61bb      	str	r3, [r7, #24]
        break;
 8006038:	e038      	b.n	80060ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603a:	f7fd fa3d 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 800603e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	085a      	lsrs	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	441a      	add	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006052:	b29b      	uxth	r3, r3
 8006054:	61bb      	str	r3, [r7, #24]
        break;
 8006056:	e029      	b.n	80060ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085a      	lsrs	r2, r3, #1
 800605e:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <UART_SetConfig+0x550>)
 8006060:	4413      	add	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6852      	ldr	r2, [r2, #4]
 8006066:	fbb3 f3f2 	udiv	r3, r3, r2
 800606a:	b29b      	uxth	r3, r3
 800606c:	61bb      	str	r3, [r7, #24]
        break;
 800606e:	e01d      	b.n	80060ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006070:	f7fd f92a 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8006074:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085a      	lsrs	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	61bb      	str	r3, [r7, #24]
        break;
 800608c:	e00e      	b.n	80060ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	61bb      	str	r3, [r7, #24]
        break;
 80060a4:	e002      	b.n	80060ac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
        break;
 80060aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d908      	bls.n	80060c4 <UART_SetConfig+0x530>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d204      	bcs.n	80060c4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e001      	b.n	80060c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	01e84800 	.word	0x01e84800
 80060e4:	00f42400 	.word	0x00f42400

080060e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01a      	beq.n	80061fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d10a      	bne.n	80061fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800623a:	f7fb ffe3 	bl	8002204 <HAL_GetTick>
 800623e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b08      	cmp	r3, #8
 800624c:	d10e      	bne.n	800626c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f814 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e00a      	b.n	8006282 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e05d      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d059      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a4:	f7fb ffae 	bl	8002204 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d302      	bcc.n	80062ba <UART_WaitOnFlagUntilTimeout+0x30>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11b      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e042      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02b      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d123      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006318:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006328:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e00f      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	d092      	beq.n	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006396:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fbce 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006402:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fbab 	bl	8005b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4e0d      	ldr	r6, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1ba4      	subs	r4, r4, r6
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2500      	movs	r5, #0
 800642c:	42a5      	cmp	r5, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4e0b      	ldr	r6, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f000 f820 	bl	8006478 <_init>
 8006438:	1ba4      	subs	r4, r4, r6
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2500      	movs	r5, #0
 800643e:	42a5      	cmp	r5, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006448:	4798      	blx	r3
 800644a:	3501      	adds	r5, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006452:	4798      	blx	r3
 8006454:	3501      	adds	r5, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080064bc 	.word	0x080064bc
 800645c:	080064bc 	.word	0x080064bc
 8006460:	080064bc 	.word	0x080064bc
 8006464:	080064c0 	.word	0x080064c0

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
